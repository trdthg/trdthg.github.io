<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://trdthg.github.io/blog</id>
    <title>Trdthg's blog Blog</title>
    <updated>2023-01-03T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://trdthg.github.io/blog"/>
    <subtitle>Trdthg's blog Blog</subtitle>
    <icon>https://trdthg.github.io/img/logo_png.png</icon>
    <entry>
        <title type="html"><![CDATA[[译] Rust冒险: 滥用 Serde]]></title>
        <id>/2023/01/03/[译] Rust冒险: 滥用 Serde</id>
        <link href="https://trdthg.github.io/blog/2023/01/03/[译] Rust冒险: 滥用 Serde"/>
        <updated>2023-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[原文链接：https://lucumr.pocoo.org/2021/11/14/abusing-serde/]]></summary>
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://lucumr.pocoo.org/2021/11/14/abusing-serde/" target="_blank" rel="noopener noreferrer">https://lucumr.pocoo.org/2021/11/14/abusing-serde/</a></p><p><strong>翻译：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></strong></p><p>选题：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></p><p>本文由 <a href="https://Rustt.org" target="_blank" rel="noopener noreferrer">Rustt</a> 翻译，<a href="https://studyrust.org" target="_blank" rel="noopener noreferrer">StudyRust</a> 荣誉推出</p></blockquote><h1>Rust 冒险：滥用 Serde</h1><p>当你让一个 Rust 程序员指出自己最喜欢的东西时，他们会很快的指出 serde 是一个让工作愉快好帮手。serde 是一个 Rust
的序列化和反序列化框架。它的格式相对独立，可以让你处理 JSON，YAML 以及一系列不同的格式。</p><p>除了上面的之外，还有很多东西可以用 serve 完成。我认为有一些用例相当有趣，值得分享。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="滥用序列化">滥用序列化<a class="hash-link" href="#滥用序列化" title="标题的直接链接">​</a></h2><p><em>Abusing Serialization</em></p><p>其中一个有趣的用例是用 serde 作为某种形式的反射框架，将结构体暴露给其他的不能原生支持 Rust
结构体的环境。在这些情况下，作为一个开发者，你序列化了一个可以被序列化的对象，接着立即以某种稍微不同的格式再次反序列化它。相比于反序列化，我们也可以自定义一个序列化器用来
'捕获' 序列化的调用。这是在 IPC，模板引擎上下文、格式转换中常用的模式。</p><p>这在实践中大概是什么样呢？让我们从用户的角度看一下我写的 <a href="https://github.com/mitsuhiko/minijinja" target="_blank" rel="noopener noreferrer">MiniJinja</a>
模板引擎。MiniJinja 使用 serde 作为核心数据模型，将结构化的数据传递给模板，以便它们可以在运行时进行评估。下面是一些给开发者的示例代码：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Serialize, Debug)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct User {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let mut env = Environment::new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    env.add_template("hello.txt", "Hello {{ user.name }}!")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let template = env.get_template("hello.txt").unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let user = User {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name: "John".into(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    println!("{}", template.render(context!(user)).unwrap());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如你所见，我们定义了一个叫 User 的结构体，可以使用默认的 Serialize 实现将它序列化。这个对象接着被传递到
<code>context!()</code>。<code>context!()</code> 所做的就是创建了一个 map，然后将一个键设为
user，接着设置为该变量的值。这样做的目的是允许模板引擎访问到 user 的 '属性'，例如 name。Rust
不是动态语言，这意味着通常在运行时做这样的事情是不可能的。但是由于 serde 为 User 实现了
Seralize，我们可以这样做。具体的实现大致如下（伪代码）：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl Serialize for User {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn serialize(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        where S: Serializer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let s = serializer.serialize_struct("User", 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s.serialize_field("name", &amp;self.name)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s.end()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>正常情况下，serializer 是一个类似于 JSON 序列化器的东西，它可以将结构体写入到一个字符串或者是文件，在这个过程中把它编码为 JSON。但是
serde 提供的接口并不要求用户必须这样。实际上，MiniJinja 直接将结构体编码为一个内存中的结构，模板引擎可以解析它。</p><p>这种模式并不新颖，serde 本身其实也有使用。当你使用 serde 的 flatter 功能时，serde 会启用一个内部缓冲模式，数据会被存储在一个内部的
Context 类型中，Context 类型可以表示 serde 数据模型的全部内容。然后这个 context 可以被传递给另一个序列化器中。</p><p>我不仅在 MiniJinja，同时也在 <a href="https://insta.rs/" target="_blank" rel="noopener noreferrer">insta</a>
（一个快照测试工具）使用到这种模式。为了避免由于非确定性数据导致的测试快照的不稳定性，我首先将其序列化为一种内部的格式，接着在该格式上进行一个再加工，最后再将其序列化为最终的格式（例如
YAML）。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tls-恶作剧">TLS 恶作剧<a class="hash-link" href="#tls-恶作剧" title="标题的直接链接">​</a></h2><p><em>TLS Shenanigans</em></p><blockquote><p>TLS：Thread Local Storage，Shenanigans：恶作剧</p></blockquote><p>然而，MiniJinja 在此处使用 serde 的有趣之处在于，它允许在序列化和序列化器之间传递不兼容的数据。如前所述，serde
有一个特定的数据模型，不符合该数据模型的东西都会遇到这个问题。例如，serde 可以编码的最大整型是
i128。如果你需要一个任意精度的整型，那就不走运了。但是还是有办法的，你可以使用
<a href="https://en.wikipedia.org/wiki/In-band_signaling" target="_blank" rel="noopener noreferrer">带内信令（in-band signalling）</a>传递额外数据。例如，serde
JSON 序列化器能够表示任意精度整型，因为它在单值对象中保留了一个特殊的键，并用它去指示 JSON 序列化 /
反序列化器组合，决定这个任意精度的整型是否要被序列化。它看起来像这样：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"$serde_json::private::Number"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"value"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>但是你应该能发现，如果一个人给出了这样的 JSON 文档，serde JSON 会把它当作任意精度的整形去解析，这意味着 'value' 部分本身也需要于
serde 兼容。对于任意精度的整型，这没有问题，因为它可以用字符串表示。但是假如你想在序列化和反序列化中传递的东西根本不能序列化呢？</p><p>这时，巧妙地利用 <strong>thread local</strong> 就是一种变通方法。</p><p>在 MiniJinja 中，运行时值的内部表示是一个叫做 <code>Value</code>
的结构体。正如你所期望的，它可以容纳整型，浮点数，字符串，列表，对象等等。然而，他也可以容纳一些 serde
完全无法解析的类型。特别是它可以保存一种特殊类型的字符串，称为 <code>'safe' string</code>, 它是一个存储了安全的 HTML
代码的字符串，不需要转义，也不需要所谓的 '动态值'。后者特别有趣，因为它不能被序列化。</p><p>什么是动态值？它实际上是具有状态的对象的句柄，应该直接传递给模板。这里的一个例子是 MiniJinja 中的 loop 变量：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;ul&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{% for item in seq %}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;li&gt;{{ loop.index }}: {{ item }}&lt;/li&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{% endfor %}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/ul&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>MiniJinja（类似于 Jinja2）提供了一个特殊的 loop 变量可以访问循环的状态。例如，你可以通过 <code>loop.index</code>
来获取当前循环的迭代次数。在 MiniJinja 的工作原理中，'循环控制器' 本身会被直接传递给模板，并且把值本身当作引用计数存进去。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pub struct LoopState {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    len: AtomicUsize,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    idx: AtomicUsize,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let controller = Rc::new(LoopState {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    idx: AtomicUsize::new(!0usize),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    len: AtomicUsize::new(len),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当循环迭代时，控制器上的索引会 +1。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">controller.idx.fetch_add(1, Ordering::Relaxed);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>控制器本身会被直接添加到上下文中：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let template_side_controller = Value::from_object(controller);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>为了达到这个目的，控制器需要实现 MiniJinja 内部的 <code>Object</code> 特征，下面是一个最小实现：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl Object for LoopState {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn attributes(&amp;self) -&gt; &amp;[&amp;str] {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &amp;["index", "length"][..]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn get_attr(&amp;self, name: &amp;str) -&gt; Option&lt;Value&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let idx = self.idx.load(Ordering::Relaxed) as u64;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let len = self.len.load(Ordering::Relaxed) as u64;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        match name {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "index" =&gt; Some(Value::from(idx + 1)),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "length" =&gt; Some(Value::from(len)),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            _ =&gt; None,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在模板引擎那一边，系统知道当 <code>index</code> 属性被使用时，需要调用 <code>get_attr()</code> 方法。</p><p>到目前为止我们所说的都是理论，serde 究竟是如何做的呢？当 <code>Value::from_object</code> 调用时，传入的值会被 <code>move</code> 到 value
对象里。这样做不需要特殊处理，特别是由于已经使用了引用计数。但是现在的问题是，对于像 <code>LoopState</code> 这样本身没有实现 <code>Serialize</code>
的东西，它的值是如何被序列化的？答案是线程本地存储（thread local storage）和一个合作的（co-operating）序列化和反序列化器。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="越过边界的-state">越过边界的 State<a class="hash-link" href="#越过边界的-state" title="标题的直接链接">​</a></h2><p><em>Out of Bound State</em></p><p>隐藏在 MiniJinja 的 Value 实现有这样一段代码：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const VALUE_HANDLE_MARKER: &amp;str = "\x01__minijinja_ValueHandle";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">thread_local! {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     static INTERNAL_SERIALIZATION: AtomicBool = AtomicBool::new(false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     static LAST_VALUE_HANDLE: AtomicUsize = AtomicUsize::new(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     static VALUE_HANDLES: RefCell&lt;BTreeMap&lt;usize, Value&gt;&gt; = RefCell::new(BTreeMap::new());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn in_internal_serialization() -&gt; bool {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    INTERNAL_SERIALIZATION.with(|flag| flag.load(atomic::Ordering::Relaxed))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>它们的用处是，Value
自身能够感知到什么时候使用内部序列化的特殊形式。这种内部序列化是一种特殊形式的序列化，我们明确知道我们的序列化数据的接收者是一个可以理解该数据的反序列化器。我们没有直接对数据进行序列化，而是将其存入到
TLS 中，然后把数据的句柄序列化到 serde 序列化器中。反序列化器会先反序列化句柄，接着再从 TLS 中提取值。</p><p>因此，我们的循环控制器序列化的实现大致如下：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl Serialize for Value {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        S: Serializer,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // enable round tripping of values</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if in_internal_serialization() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            use serde::ser::SerializeStruct;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let handle = LAST_VALUE_HANDLE.with(|x| x.fetch_add(1, atomic::Ordering::Relaxed));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            VALUE_HANDLES.with(|handles| handles.borrow_mut().insert(handle, self.clone()));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let mut s = serializer.serialize_struct(VALUE_HANDLE_MARKER, 1)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s.serialize_field("handle", &amp;handle)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return s.end();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // ... here follows implementation for serializing to JSON etc.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果它被序列化为 JSON，我们大致能看到这样的东西：</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"\u0001__minijinja_ValueHandle"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>而真正的循环控制器将被存储在 <code>VALUE_HANDLES</code> 中句柄为 1 处。现在我们如何从里面的到数值呢？在 MiniJinja
中，反序列化其实从未发生，只有序列化。而且序列化也只是将内存中的对象组装起来。因此，我们只需要让序列化器理解带内信令如何处理，并以此找到带外的值。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl ser::SerializeStruct for SerializeStruct {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type Ok = Value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type Error = Error;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn serialize_field&lt;T: ?Sized&gt;(&amp;mut self, key: &amp;'static str, value: &amp;T) -&gt; Result&lt;(), Error&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        T: Serialize,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let value = value.serialize(ValueSerializer)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.fields.insert(key, value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Ok(())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn end(self) -&gt; Result&lt;Value, Error&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        match self.name {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            VALUE_HANDLE_MARKER =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                let handle_id = self.fields["handle"].as_usize();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Ok(VALUE_HANDLES.with(|handles| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    let mut handles = handles.borrow_mut();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    handles</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        .remove(&amp;handle_id)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        .expect("value handle not in registry")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            _ =&gt; /* regular struct code */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ser-to-de">Ser-to-De<a class="hash-link" href="#ser-to-de" title="标题的直接链接">​</a></h2><p>上面的例子是你可以滥用的一种方式，但是同样的模式在真实的序列化和反序列化中也可以用到。在 MiniJinja
中，我可以不使用序列化，因为我有效地利用了序列化代码，从一种内存格式转换到另一种内存格式。如果你想在进程间传递数据，情况就会变得棘手一些，实际的序列化就是必要的。例如，你想建立一个
IPC
系统，在进程之间交换数据，这里的挑战是，出于性能的考虑，对于比较大的内存段，你必须使用共享内存，或者是以文件描述符的形式传递打开的文件（因为这些文件有可能是
socket）。在我的实验性 <a href="https://github.com/mitsuhiko/unix-ipc" target="_blank" rel="noopener noreferrer">unix-ipc</a> crate
中，我就是这样做的。</p><p>我在这里建立了一个二级缓冲区，它可以放置文件描述符。同样，这里必须使用 TLS。</p><p>API 大致如下：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pub fn serialize&lt;S: Serialize&gt;(s: S) -&gt; io::Result&lt;(Vec&lt;u8&gt;, Vec&lt;RawFd&gt;)&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let mut fds = Vec::new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let mut out = Vec::new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    enter_ipc_mode(|| bincode::serialize_into(&amp;mut out, &amp;s), &amp;mut fds)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .map_err(bincode_to_io_error)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Ok((out, fds))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从用户的角度来看，这些都是透明的。当一个 Serailize 实现遇到了一个文件对象时，它可以检查是否应该使用 IPC 的序列化，如果是，它可以把 FD
存起来，<code>enter_ipc_mode</code> 基本上将 fds 绑定到了一个线程局部变量里，接着调用 <code>register_fd</code>
注册它。例如，下面展示了内部句柄的序列化方式：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;F: IntoRawFd&gt; Serialize for Handle&lt;F&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        S: ser::Serializer,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if is_ipc_mode() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // effectively a weird version of `into_raw_fd` that does</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // consume</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let fd = self.extract_raw_fd();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let idx = register_fd(fd);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            idx.serialize(serializer)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Err(ser::Error::custom("can only serialize in ipc mode"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后是反序列化：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;'de, F: FromRawFd + IntoRawFd&gt; Deserialize&lt;'de&gt; for Handle&lt;F&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Handle&lt;F&gt;, D::Error&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        D: de::Deserializer&lt;'de&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if is_ipc_mode() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let idx = u32::deserialize(deserializer)?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let fd = lookup_fd(idx).ok_or_else(|| de::Error::custom("fd not found in mapping"))?;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            unsafe { Ok(Handle(Mutex::new(Some(FromRawFd::from_raw_fd(fd))))) }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Err(de::Error::custom("can only deserialize in ipc mode"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从用户的角度来看，他只需要通过 IPC channel 传递一个 <code>Handle::new(my_file)</code> 就能实现。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="serde-的现状">Serde 的现状<a class="hash-link" href="#serde-的现状" title="标题的直接链接">​</a></h2><p><em>State of Serde</em></p><p>不幸的是，上面所有的东西都依赖线程本地变量和对内信令。整体上都不是很好，如果有一天出了 serde 2.0，我希望有更好的方法实现上面的内容。</p><p>实际上，现在的 serde 仍然有不少问题和上述的 Hack 行为相关。</p><ul><li><a href="https://github.com/serde-rs/serde/issues/1463" target="_blank" rel="noopener noreferrer">serde requires in-band signalling</a></li><li><a href="https://github.com/serde-rs/serde/issues/1183" target="_blank" rel="noopener noreferrer">Internal buffering disrupts format-specific deserialization features</a></li><li><a href="https://github.com/serde-rs/json/issues/721" target="_blank" rel="noopener noreferrer">serde_json's arbitrary precision feature incompatible with flatten</a></li></ul><p>说到这里，在我们需要重写 serde 之前，肯定还有进一步可以被滥用的地方。但是现在是时候应该慢慢考虑 serve
未来版本的设想了它应该对数据模型的支持更友好，可以用更少的 Hack 来脱离规定框架。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译] 未初始化内存: unsafe Rust太难了]]></title>
        <id>/2023/01/02/[译] 未初始化内存: unsafe Rust太难了</id>
        <link href="https://trdthg.github.io/blog/2023/01/02/[译] 未初始化内存: unsafe Rust太难了"/>
        <updated>2023-01-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[原文链接：https://lucumr.pocoo.org/2022/1/30/unsafe-rust/]]></summary>
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://lucumr.pocoo.org/2022/1/30/unsafe-rust/" target="_blank" rel="noopener noreferrer">https://lucumr.pocoo.org/2022/1/30/unsafe-rust/</a></p><p><strong>翻译：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></strong></p><p>选题：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></p><p>本文由 <a href="https://Rustt.org" target="_blank" rel="noopener noreferrer">Rustt</a> 翻译，<a href="https://studyrust.org" target="_blank" rel="noopener noreferrer">StudyRust</a> 荣誉推出</p></blockquote><h1>未初始化内存：unsafe Rust 太难了</h1><p>Rust
在很多意义上不仅仅是一个现代的系统编程语言，也是一个实用的语言。它承诺了自己的安全性，并且提供了一个完整的框架，使得创建安全的抽象成为可能，同时运行时开销很小甚至为
0。你可以使用 unsafe 来明确的脱离安全的 Rust。</p><p>如果你之前看过这篇文章，你会惊讶的发现，它和之前的版本大不相同。这篇文章的作者是被 unsafe
的规则所困惑的受害者。我在文章中增加了一个例子，用来更好的展示其中的陷阱。我之前在 Twitter 上说过，编写 unsafe Rust 比 C / C++
更困难，所以我想为我的观点作出一些解释。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="从-c-到-rust">从 C 到 Rust<a class="hash-link" href="#从-c-到-rust" title="标题的直接链接">​</a></h2><p>我们从下面的例子开始：我们有一个待初始化的结构体。比较有趣的字段是
<code>name</code>。它是一个指针，指向一个已经分配好的字符串。除此之外，分配到哪里对我们并不重要，因此我们可以将这个结构体自身分配在栈上。我们的想法是，当这个结构体被初始化之后，它就可以被安全的传递和打印。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdbool.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">role</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">bool</span><span class="token plain"> disabled</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> flag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">role</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strdup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"basic"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">disabled </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s (%d, %s)\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">disabled </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"true"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来我们用 Rust 去实现上面的代码。现在我们并不需要过多的关注 Rust
文档，只需要专注于一对一翻译即可。在你阅读下面的代码之前还有一点要注意：我们正在有意的创建一个对 Rust 程序员更熟悉的对象，并且可以被看作公共
API。所以我们在这里直接使用 String，而不是 C 语言的字符串。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::mem;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct Role {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    disabled: bool,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag: u32,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let role = unsafe {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let mut role: Role = mem::zeroed();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        role.name = "basic".to_string();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        role.flag = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        role.disabled = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        role</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    println!("{} ({}, {})", role.name, role.flag, role.disabled);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>看到这里，立即就有人想问，这里为什么需要
unsafe？当然了，你的确不需要。但是这段代码使用了一个函数：<code>std::mem::zeroed</code>。如果你尝试在最近的 Rust
编译器运行，应该会的得到这个错误：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">thread 'main' panicked at 'attempted to zero-initialize type `Role`,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  which is invalid', src/main.rs:11:30</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>老版本的编译器能够正常运行，但是那其实也是错误的。怎么解决呢？编译器又一次告诉我们解决之法：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">warning: the type `Role` does not permit zero-initialization</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --&gt; src/main.rs:11:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11 | let mut role: Role = mem::zeroed();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                      ^^^^^^^^^^^^^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                      this code causes undefined behavior when executed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                      help: use `MaybeUninit&lt;T&gt;` instead, and only call</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                         `assume_init` after initialization is done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>为什么 <code>Role</code> 类型不支持使用 0 初始化呢？我们需要改动那些代码？我们能不能不初始化？</p><p>有人可能会想，使用 <code>#[repr(C)]</code> 强制结构体使用 C 语言的内存布局，但是这不能解决问题。正如编译器给出的建议，我们需要
<code>MaybeUninit</code>。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::mem::MaybeUninit;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct Role {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    disabled: bool,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag: u32,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let role = unsafe {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let mut uninit = MaybeUninit::&lt;Role&gt;::zeroed();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let role = uninit.as_mut_ptr();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (*role).name = "basic".to_string();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (*role).flag = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (*role).disabled = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uninit.assume_init()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    println!("{} ({}, {})", role.name, role.flag, role.disabled);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将 <code>zeroed</code> 换为 <code>MaybeUninit::zeroed</code> 之后，一切都变了。现在我们不能直接使用结构体，而是要操作一个裸指针。由于裸指针没有实现
<code>deref</code>，并且 Rust 中没有 <code>-&gt;</code> 操作符，我们需要手动解引用，并用这种笨拙的语法分配每一个字段。</p><p>首先：这样做可行吗？答案是肯定的。但是它正确吗？不正确。</p><p>答案在于，任何像可变引用（&amp;mut）或者是栈上的值本身这样的构造，在 unsafe 代码之外仍然需要一直处于有效的状态。<code>zeroed</code> 返回一个值为 0
的结构，我们不能保证它可以有效的表示结构体或者任何其中的字段。在我们的例子中，我们的字符串在所有内容被清零的情况下是有效的，但是这并不能保证，而且是未定义行为。</p><p>需要注意的一点是，一个可变引用永远不能指向一个无效的对象，所以在对象的所有字段都被初始化之前，下面的操作是错误的：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let role = &amp;mut *uninit.as_mut_ptr()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>所以，让我们把 <code>zeroed</code> 改为 <code>uninit</code>。如果我们再次运行，程序就会崩溃。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// let mut uninit = MaybeUninit::&lt;Role&gt;::uninit();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">free(): invalid pointer</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>为什么会崩溃呢？答案是，通过给 name 赋值一个新的字符串，我们也 drop 了之前的旧字符串。我们之前只是碰巧没有遇到这种情况，因为 Drop
碰巧能够处理一个被清零的字符串。但现在，我们深入了未定义行为。我们如何解决这个问题呢？我们需要以某种方式直接将字符串写到那里的指针。</p><p>我们首先要接受 MaybeUninit 是必要的，现在我们要处理这里的裸指针。这有些麻烦，但是看起来不是特别难。现在我们有两个新问题：我们知道 <code>&amp;mut X</code>
是不允许的，但是 <code>*mut X</code> 是允许的。我们如何在不使用 <code>&amp;mut X</code> 的情况下得到一个 <code>*mut X</code>? 讽刺的是，在 Rust 1.51
之前，再不打破任何规则之前，这是不可能的，但是现在，你可以使用 <code>addr_of_mut!</code> 宏。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let name_ptr = std::ptr::addr_of_mut!((*role).name);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>太棒了，现在我们拿到了 name 的指针，如何写入呢？我们可以使用 <code>write</code> 方法。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">addr_of_mut!((*role).name).write("basic".to_string());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>现在完成了吗？还记得我们是如何使用普通结构体的吗？如果阅读一下文档，你就会发现，结构体的内存布局没有任何保证。事实表明，<a href="https://github.com/rust-lang/reference/issues/1151" target="_blank" rel="noopener noreferrer">尽管目前的文档是这样说的</a>，但是我们可以依靠字段的对齐性。如果我们处理的是
<code>#[repr(packed)]</code>，我们就必须使用 <code>write_unaligned</code> 方法来代替。如果 Rust
选择的结构体的一个成员是不对齐的，这是合法的。</p><p>最终的代码：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::mem::MaybeUninit;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::ptr::addr_of_mut;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct Role {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: String,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    disabled: bool,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag: u32,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let role = unsafe {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let mut uninit = MaybeUninit::&lt;Role&gt;::uninit();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let role = uninit.as_mut_ptr();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        addr_of_mut!((*role).name).write("basic".to_string());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (*role).flag = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (*role).disabled = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uninit.assume_init()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    println!("{} ({}, {})", role.name, role.flag, role.disabled);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么时候用-addr_of_mut">什么时候用 <code>addr_of_mut!</code><a class="hash-link" href="#什么时候用-addr_of_mut" title="标题的直接链接">​</a></h2><p>一般有两种情况：未初始化的内存，未对齐的引用。Rust
不允许用户创建一个未对齐的引用（即时只是暂时的），同时也不允许创建一个对未初始化内存的引用。那么，这些引用是什么时候被创建的呢？</p><p>对于下面的代码：<code>(*flag).flag = 1</code>，根据 Rust 的规则，如果一个类型没有实现 Drop，这是可以的。如果该类型实现了
Drop，这行代码会产生很多问题：当 <code>Drop::drop</code> 被调用时，并且调用在未初始化的内存上，这时我们就需要
<code>addr_of_mut!</code>。这就是为什么我们可以直接为 flag 字段赋值，但是我们却需要通过 <code>addr_of_mut!</code> 来获取 name
字段，因为它是一个字符串。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="maybeuninit">MaybeUninit<a class="hash-link" href="#maybeuninit" title="标题的直接链接">​</a></h2><p>对安全的理解随着时间的推移而不断改变。曾经，<code>mem::uninitialized</code> 被认为是一个健全的 API，但是在后来，<code>MaybeUninit</code>
被引入去解决发现的缺点。但是，由于部分初始化的类型的存在，MaybeUninit 在实践中并不理想。虽然由于 <code>#[repr(transparent)]</code>，
MaybeUninit 和 T 是内存兼容的，但是在嵌套使用时的效果并不佳。</p><p>有时你需要结构体的某个字段上有一个 MaybeUninit，但是只后你又希望这个抽象不存在，这种情况并不罕见。实际上，在实践中使用 MaybeUninit
是一个充满挑战的体验，但是这篇文章并没有体现出来。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="我的-unsafe-代码正确吗">我的 unsafe 代码正确吗？<a class="hash-link" href="#我的-unsafe-代码正确吗" title="标题的直接链接">​</a></h2><p>在 2022 年，我承认，我不再对编写 Rust 代码感到自信。unsafe 的规则可能可能都是如此复杂，但是从我多年来阅读过的 unsafe 代码来说，大多数
unsafe 代码都不太关心这些规则，并且无视了它们。<code>addr_of_mut!</code>直到 1.53 才被添加到语言中是有原因的。即使到了今天，文档中都说它
Rust 结构体 repr 的对齐方式没有任何保证。</p><p>在过去的几年里，似乎发生了这样的事情：Rust 开发者在实践中编写 unsafe
越来越困难，现在的规则是如此复杂，以至于对一个随意的程序员来说非常难以理解，围绕他的文档也很容易被曲解。我在这篇文章的<a href="https://github.com/mitsuhiko/lucumr/blob/48440d3cf151f0d774bc9ad62f903034ca2b30ff/2022/1/30/unsafe-rust.rst" target="_blank" rel="noopener noreferrer">上一个版本</a>中认为
<code>addr_of_mut!</code> 的一些使用是必要的，但实际上并非如此。在有人指出这个错误之前，文章已经得到了大量关注。</p><p>这些规则使得 Rust 最好的功能之一越来越难以接近，同时也越来越难以理解。要求存在 MaybeUninit，而不仅仅是过去的
mem::uninitialized API 是显而易见的，但是却展示了语言规则是多么的复杂。</p><p>我不认为这是好的。事实上，我认为这根本不是一个好的趋势，好像越来越少的人了解 unsafe Rust。与 C 的互操作性是让 Rust
伟大的一个原因，但是我们现在正在创建巨大的屏障，这是不可取的。更重要的是：编译器在指出我的错误时没有什么帮助。</p><p>让 unsafe 变得更符合人体工程学是一个困难的问题，但是它值得被解决。因为有一点很明确：人们不会很快停止编写 unsafe 代码。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译] 拓展 Rust 中的 Map]]></title>
        <id>/2023/01/01/[译] 拓展 Rust 中的 Map</id>
        <link href="https://trdthg.github.io/blog/2023/01/01/[译] 拓展 Rust 中的 Map"/>
        <updated>2023-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[原文链接：https://lucumr.pocoo.org/2022/1/6/rust-extension-map/]]></summary>
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://lucumr.pocoo.org/2022/1/6/rust-extension-map/" target="_blank" rel="noopener noreferrer">https://lucumr.pocoo.org/2022/1/6/rust-extension-map/</a></p><p><strong>翻译：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></strong></p><p>选题：<a href="https://github.com/trdthg" target="_blank" rel="noopener noreferrer">trdthg</a></p><p>本文由 <a href="https://Rustt.org" target="_blank" rel="noopener noreferrer">Rustt</a> 翻译，<a href="https://studyrust.org" target="_blank" rel="noopener noreferrer">StudyRust</a> 荣誉推出</p></blockquote><h1>拓展 Rust 中的 Map</h1><p>在 Rust 中，如果你想为用户提供一个灵活的 API，一般可以引入泛型参数。以一个 web
框架为例，它可能需要一个程序类型，并且需要传递给很多函数。这个程序类型需要能够以配置的形式被参数化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="引入-any-特征">引入 Any 特征<a class="hash-link" href="#引入-any-特征" title="标题的直接链接">​</a></h2><p>一个解决方法是使用 <code>Any</code> 特征。它需要一个 <code>'static</code> 的生命周期，当你之后使用它时，还需要用 <code>Box</code>
进行装箱。比如我们可能对它进行向下转型，即转换为原始的类型。这意味着你可以在某个地方（比如我们的 App）中存储和获取任意类型。</p><p>我们期望的 API 大致如下：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let app = App::new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// place in extension map</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app.extensions().insert(Config { ... });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app.extensions().insert(Database { ... });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// retrieve from extension map</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let config = app.extensions().get::&lt;Config&gt;();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们的 app 需要容纳其他拓展的类型，以便之后使用。</p><p>现在，让我们试试最简单的实现方式：准备一个 <code>Extensions</code> 对象，让它实现插入和获取的方法。如果一个拓展还不存在，我们就自动插入一个默认的（需要实现
<code>Default</code> 特征）。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::collections::HashMap;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::any::{Any, TypeId};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Default)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: HashMap&lt;TypeId, Box&lt;dyn Any&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn insert&lt;T: 'static&gt;(&amp;mut self, value: T) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map.insert(TypeId::of::&lt;T&gt;(), Box::new(value));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get&lt;T: 'static&gt;(&amp;self) -&gt; &amp;T {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map.get(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .and_then(|b| b.downcast_ref())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get_mut&lt;T: Default + 'static&gt;(&amp;mut self) -&gt; &amp;mut T {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map.get_mut(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .and_then(|b| b.downcast_mut())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn ensure&lt;T: Default + 'static&gt;(&amp;mut self) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if self.map.get(&amp;TypeId::of::&lt;T&gt;()).is_none() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self.insert(T::default());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的代码非常直接，但是存在两个问题：首先，只有 <code>get_mut</code> 能够调用 <code>ensure</code> 去插入默认值，如果有人直接调用 <code>get</code> 就会导致
panic。第二个问题是，借用检查器会让之后的编写非常困难。上面的 map 对于解决经典的问题（例如 app）是很有用的，你只需要配置一次，自那之后 map
就像是被冻结了一样，因为有太多的引用在飞来分飞去，以至于没有人能够得到 <code>&amp;mut</code> 的引用。</p><p>how does it work？</p><p>上面的代码是如何做到的呢，Rust 中的每一种类型都会有一个 type ID，你可以使用 <code>TypeId::of::&lt;T&gt;()</code>
获取。他是唯一的，你可以用它进行比较，或者是作为 map 的键来使用。每种类型只允许有一个值。接着我们把 T 作为 <code>dyn Any</code> 存储在 map
里，<code>Any</code> 特征允许我们使用 <code>downcast_ref</code> 和 <code>downcast_mut</code> 方法拿到原始类型。由于我们使用了 ensure
方法确保这里的类型存在，因此可以安全的 unwrap。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内部可变性">内部可变性<a class="hash-link" href="#内部可变性" title="标题的直接链接">​</a></h2><p>让我们看一个 web 框架或者是模板引擎的常见案例。以
<a href="https://github.com/mitsuhiko/minijinja" target="_blank" rel="noopener noreferrer">MiniJinja</a>（模板引擎）为例，它里面有一个 State
对象，每次模板初始化时都会创建一次，State 没有实现 Send 和 Sync，MiniJinja 在评估时需要 State。如果你想让用户能够放入自定义的
State 呢？在这种情况下，我们可以通过在内部使用 <code>RefCell</code> 来调整上面的类型。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::collections::HashMap;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::any::{Any, TypeId};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::cell::{Ref, RefCell, RefMut};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Default)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: RefCell&lt;HashMap&lt;TypeId, Box&lt;dyn Any&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn insert&lt;T: 'static&gt;(&amp;self, value: T) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map.borrow_mut().insert(TypeId::of::&lt;T&gt;(), Box::new(value));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get&lt;T: Default + 'static&gt;(&amp;self) -&gt; Ref&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Ref::map(self.map.borrow(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| b.downcast_ref())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get_mut&lt;T: Default + 'static&gt;(&amp;self) -&gt; RefMut&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RefMut::map(self.map.borrow_mut(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get_mut(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| b.downcast_mut())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn ensure&lt;T: Default + 'static&gt;(&amp;self) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if self.map.borrow().get(&amp;TypeId::of::&lt;T&gt;()).is_none() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self.insert(T::default());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从用户的角度来看，几乎没有变化。主要的区别是你不需要一个可变引用就能调用 <code>get_mut</code>，这一壮举是由 <code>RefCell</code> 实现的，Refcell
能够将检查移动到运行时。当一个 <code>RefMut</code> 被给出时，如果已经存在任何的可变或不可变引用，就会发生
panic。对于这里的用户来说，这并不是一个很大的问题，因为我们可以很容易地确保只有一个可变的引用在使用。特别棒的是，Ref 和 RefMut
类型提供了一个静态的 map 方法，让你可以轻松派生出另一个 Ref 或 RefMut，并保持原来的引用，但对值进行转换。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="同步支持">同步支持<a class="hash-link" href="#同步支持" title="标题的直接链接">​</a></h2><p>如果我们想要用 Send 和 Sync 来实现和上面相同的效果呢？我们需要一个锁。可惜的是标准库提供的 Mutex 和 RwLock 不能让你在拿到锁的同时
map，你可以使用 <code>parking_lot</code> 替代，它实现了必要的一些方法。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use parking_lot::{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MappedRwLockReadGuard,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MappedRwLockWriteGuard,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RwLock,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RwLockReadGuard,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RwLockWriteGuard,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::any::{Any, TypeId};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::collections::HashMap;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Default)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: RwLock&lt;HashMap&lt;TypeId, Box&lt;dyn Any&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn insert&lt;T: Send + Sync + 'static&gt;(&amp;self, value: T) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map.write().insert(TypeId::of::&lt;T&gt;(), Box::new(value));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get&lt;T: Send + Sync + Default + 'static&gt;(&amp;self) -&gt; MappedRwLockReadGuard&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RwLockReadGuard::map(self.map.read(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| b.downcast_ref())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get_mut&lt;T: Send + Sync + Default + 'static&gt;(&amp;self) -&gt; MappedRwLockWriteGuard&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RwLockWriteGuard::map(self.map.write(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get_mut(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| b.downcast_mut())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn ensure&lt;T: Default + Send + Sync + 'static&gt;(&amp;self) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if self.map.read().get(&amp;TypeId::of::&lt;T&gt;()).is_none() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self.insert(T::default());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：由于 Any 并没有实现 Debug，所以我们很难为我们的 map 实现 Debug 特征，一些简单的改变并不能解决目前的问题。下半部分我们将介绍
<code>as-any</code> 模式</p><p>我们面临的挑战是，在 Rust 里，你不能使用 <code>Box&lt;Any + Debug&gt;</code>，然而还是有一些方法解决这个问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为-map-实现-debug">为 map 实现 Debug<a class="hash-link" href="#为-map-实现-debug" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="简化问题">简化问题<a class="hash-link" href="#简化问题" title="标题的直接链接">​</a></h3><p>我们的目标是对 <code>Box&lt;dyn Any&gt;</code> 做一个包装，并让 Wrapper 实现 Debug。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Debug)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct AnyBox(Box&lt;dyn Any + Debug&gt;);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果你尝试编译，编译器应该会很不高兴的抛出错误：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error[E0225]: only auto traits can be used as additional traits in a trait object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; src/main.rs:9:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">9 | struct AnyBox(Box&lt;dyn Any + Debug&gt;);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                       ---   ^^^^^ additional non-auto trait</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |                       first non-auto trait</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  = help: consider creating a new trait with all of these as supertraits and</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    using that trait here instead: `trait NewTrait: Any + Debug {}`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="超级特征">超级特征<a class="hash-link" href="#超级特征" title="标题的直接链接">​</a></h3><p>幸运的是，编译器再次为我们指明了解决之道，我们需要创建一个父特征，并利用特征约束。同时，我们为所有实现了 Any 和 Debug
的类型实现我们的超级特征。就像下面这样：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Debug)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct AnyBox(Box&lt;dyn DebugAny&gt;);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">trait DebugAny: Any + Debug {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;T: Any + Debug + 'static&gt; DebugAny for T {}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>你可以想这样构建一个 Box，但是真正不能通过编译的是向下转型</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let any_box = AnyBox(Box::new(42i32));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dbg!(any_box.0.downcast_ref::&lt;i32&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编译器会告诉我们，AnyBox 中的值并没有 <code>downcast_ref</code> 方法</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error[E0599]: no method named `downcast_ref` found for struct</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  `Box&lt;(dyn DebugAny + 'static)&gt;` in the current scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --&gt; src/main.rs:15:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15 |     dbg!(any_box.0.downcast_ref::&lt;i32&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                    ^^^^^^^^^^^^ method not found in `Box&lt;(dyn DebugAny + 'static)&gt;`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>原因是 <code>Box&lt;dyn DebugAny&gt;</code> 并不是 <code>Box&lt;dyn Any&gt;</code>，因此我们不能那里得到 Any
特征拥有的方法。那么我们如何解决这个问题呢？最简单的方法是 <strong>"as any"</strong> 模式，我们在我们的 DebugAny
特征上实现一个方法，将其向上转换为一个 Any。看起来像这样：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">trait DebugAny: Any + Debug {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any(&amp;self) -&gt; &amp;dyn Any;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;T: Any + Debug + 'static&gt; DebugAny for T {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any(&amp;self) -&gt; &amp;dyn Any { self }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any { self }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>现在虽然我们依然不能在 DebugAny 上调用 <code>downcast_ref</code>，但是我们可以拿走它的值，并调用 <code>as_any</code> 得到一个
<code>&amp;dyn Any</code>：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let any_box = AnyBox(Box::new(42i32));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dbg!(any_box.0.as_any().downcast_ref::&lt;i32&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dbg!(&amp;any_box);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>但是当我们运行后，却得到了一个 None。发生什么事了？？？</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[src/main.rs:23] any_box.0.as_any().downcast_ref::&lt;i32&gt;() = None</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个谜题的答案与方法解析的工作方式和空白实现有关。当我们在 <code>Box&lt;dyn DebugAny&gt;</code> 上调用 <code>as_any</code> 时，Box
并没有发生自动解引用，事实上调用的是 <code>Box&lt;dyn DebugAny&gt;</code> 的 as_any，因为 Box 现在也实现了我们的
DebugAny。那么，我们如何穿过这个 Box 呢？通过手动解引用。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let any_box = AnyBox(Box::new(42i32));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dbg!((*any_box.0).as_any().downcast_ref::&lt;i32&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dbg!(&amp;any_box);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这样就是我们预期的值了</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[src/main.rs:23] (*any_box.0).as_any().downcast_ref::&lt;i32&gt;() = Some(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    42,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[src/main.rs:24] &amp;any_box = AnyBox(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    42,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="可调试的-extension-map">可调试的 Extension Map<a class="hash-link" href="#可调试的-extension-map" title="标题的直接链接">​</a></h2><p>有了上面的经验，我们现在可以拿出之前的非同步 map，稍加改造就能为其实现 Debug。</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::any::{Any, TypeId};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::cell::{Ref, RefCell, RefMut};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::collections::HashMap;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::fmt::Debug;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">trait DebugAny: Any + Debug {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any(&amp;self) -&gt; &amp;dyn Any;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl&lt;T: Any + Debug + 'static&gt; DebugAny for T {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any(&amp;self) -&gt; &amp;dyn Any { self }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any { self }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#[derive(Default, Debug)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: RefCell&lt;HashMap&lt;TypeId, Box&lt;dyn DebugAny&gt;&gt;&gt;,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn insert&lt;T: Debug + 'static&gt;(&amp;self, value: T) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.map</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .borrow_mut()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .insert(TypeId::of::&lt;T&gt;(), Box::new(value));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get&lt;T: Default + Debug + 'static&gt;(&amp;self) -&gt; Ref&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Ref::map(self.map.borrow(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| (**b).as_any().downcast_ref())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn get_mut&lt;T: Default + Debug + 'static&gt;(&amp;self) -&gt; RefMut&lt;'_, T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.ensure::&lt;T&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RefMut::map(self.map.borrow_mut(), |m| {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            m.get_mut(&amp;TypeId::of::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .and_then(|b| (**b).as_any_mut().downcast_mut())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .unwrap()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn ensure&lt;T: Default + Debug + 'static&gt;(&amp;self) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if self.map.borrow().get(&amp;TypeId::of::&lt;T&gt;()).is_none() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            self.insert(T::default());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>向 map 里面添加点东西，打印一下：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[src/main.rs:63] &amp;extensions = Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: RefCell {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            TypeId {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                t: 13431306602944299956,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }: 42,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在这个例子中，我在 map 中放置了一个 32 位的整数 42，它打印出了作为键的 TypeId，和作为值的 42。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="保留类型名称">保留类型名称<a class="hash-link" href="#保留类型名称" title="标题的直接链接">​</a></h2><p>如果你想保留原来的类型名称，而不仅仅是类型的 ID，我们可以使用一个自定义的类型作为 map 的键。通过对 TypeId 和 TypeName
做一次简单的包装就能轻松实现：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use std::any::{TypeId, type_name};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::hash::{Hash, Hasher};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use std::fmt::{self, Debug};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pub struct TypeKey(TypeId, &amp;'static str);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl TypeKey {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pub fn of&lt;T: 'static&gt;() -&gt; TypeKey {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        TypeKey(TypeId::of::&lt;T&gt;(), type_name::&lt;T&gt;())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Hash for TypeKey {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.0.hash(state);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl PartialEq for TypeKey {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn eq(&amp;self, other: &amp;Self) -&gt; bool {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self.0 == other.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Eq for TypeKey {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">impl Debug for TypeKey {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        write!(f, "{}", self.1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接着用它替换掉原来的键，调试一下：</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[src/main.rs:90] &amp;extensions = Extensions {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map: RefCell {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        value: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            i32: 42,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            alloc::vec::Vec&lt;i32&gt;: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                2,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                3,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意，我在 map 中额外插入了一个 <code>Vec&lt;i32&gt;</code>，以获得更明显的输出。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 发行版配置]]></title>
        <id>/i3wm</id>
        <link href="https://trdthg.github.io/blog/i3wm"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[i3wm]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="i3wm">i3wm<a class="hash-link" href="#i3wm" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="多屏幕">多屏幕<a class="hash-link" href="#多屏幕" title="标题的直接链接">​</a></h3><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">xrandr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xrandr --output DP-1 --auto --right-of eDP-1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="manjaro">manjaro<a class="hash-link" href="#manjaro" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cpu-调频">cpu 调频<a class="hash-link" href="#cpu-调频" title="标题的直接链接">​</a></h3><ol><li>查看当前所有 CPU 的信息：</li></ol><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cpupower -c all frequency-info</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>设置所有 CPU 为性能模式：</li></ol><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cpupower -c all frequency-set -g performance</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>performance: 固定最高运行频率上，不动态调节。</p></li><li><p>powersave: 固定工作在其支持的最低运行频率上</p></li><li><p>ondemand: 按需快速动态调整 CPU 频率，一有 cpu 计算量的任务，就会立即达到最大频率运行，等执行完毕就立即回到最低频率；</p></li><li><p>conservative:
与 ondemand 不同，平滑地调整 CPU 频率，频率的升降是渐变式的，会自动在频率上下限调整，和 ondemand 的区别在于它会按需分配频率，而不是一味追求最高频率；</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="自动挂载">自动挂载<a class="hash-link" href="#自动挂载" title="标题的直接链接">​</a></h3><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 100mb 虚拟硬盘</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">mount</span><span class="token plain"> tmpfs </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> /home/trdthg/tmp/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmpfs /home/trdthg/tmp tmpfs </span><span class="token assign-left variable" style="color:#36acaa">size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">96m </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 1.查看电脑中所有硬盘的分区情况。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 命令如下：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># sudo fdisk -l</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 2.结果如下</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># /dev/nvme0n1p3    567296  210282495 209715200   100G Microsoft 基本数据</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># /dev/nvme0n1p4 210282496  872337407 662054912 315.7G Microsoft 基本数据</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#auto mount windows fs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/nvme0n1p3 /mnt/C ntfs </span><span class="token assign-left variable" style="color:#36acaa">nls</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">utf8,umask</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">000   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/nvme0n1p4 /mnt/D ntfs </span><span class="token assign-left variable" style="color:#36acaa">nls</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">utf8,umask</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">000   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 注： 末尾的 2 行是添加的内容。其中/dev/nvme0n1p3 一行代表 C 盘分区将自动挂载到/mnt/C 目录下，文件系统为 NTFS（如果步骤 1 中查看分 区的文件系统为 FAT32 时，此处请写 vfat），字符编码为 utf8。umask 表示文件目录的权限，此参数以及之后的 2 个参数都为 0 即可。以下几行以 此类推。此处可以选择性的添加需要自动挂载的分区，不想挂载的分区不用书写。</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="openssh-serversshd-启动">openssh-server(sshd) 启动<a class="hash-link" href="#openssh-serversshd-启动" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="openssh">OpenSSH<a class="hash-link" href="#openssh" title="标题的直接链接">​</a></h3><p>OpenSSH 可以支撑 Manjaro 成为 SSH Server，以便其他主机可以通过 SSH 连接到 Manjaro。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 安装 OpenSSH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> pacman -S openssh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 开机自启 sshd 服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> systemctl </span><span class="token builtin class-name">enable</span><span class="token plain"> sshd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 启动 sshd 服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> systemctl start sshd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 重启 sshd 服务</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> systemctl restart sshd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[资源整理]]></title>
        <id>/resources</id>
        <link href="https://trdthg.github.io/blog/resources"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[- Leaf——美团点评分布式 ID 生成系统]]></summary>
        <content type="html"><![CDATA[<ul><li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener noreferrer">Leaf——美团点评分布式 ID 生成系统</a></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网站更新日志]]></title>
        <id>/site_update_log</id>
        <link href="https://trdthg.github.io/blog/site_update_log"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[v3 Docusaurus]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="v3-docusaurus">v3 Docusaurus<a class="hash-link" href="#v3-docusaurus" title="标题的直接链接">​</a></h2><p>2022.10.21 从 vuepress2 迁移到 Docusaurus</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="v2-vuepress3">v2 vuepress3<a class="hash-link" href="#v2-vuepress3" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="v1-vuepress1">v1 vuepress1<a class="hash-link" href="#v1-vuepress1" title="标题的直接链接">​</a></h2><p>基于 typora 处理图片</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># rm -rf docs/.vuepress/dist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd vuePressBlog</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 生成静态文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pnpm run build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 图片源修改</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm docs/.vuepress/public/assets/img/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp /home/trthg/.config/Typora/typora-user-images/* docs/.vuepress/public/assets/img/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># md 引用图片路径修改</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sed -i "s/\/home\/trthg\/.config\/Typora\/typora-user-images/\/assets\/img/g" `grep -rl "/assets/img" ./`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># # /* 会忽略。开头的文件   /. 不会</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../assets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../java</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../other</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../python</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../rust</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../ioclub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -r ../magic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm ../*.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># rm ../*.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># rm ../*.jpg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv docs/.vuepress/dist/* ../</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curDate=$(date "+%Y-%m-%d")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curTime=$(date "+%H:%M:%S")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># # git init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd ..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -s -m "commit: $curDate $curTime"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push -u origin main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[分布式系统]]></title>
        <id>/draft/DistributedSystem</id>
        <link href="https://trdthg.github.io/blog/draft/DistributedSystem"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[优势]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="优势">优势<a class="hash-link" href="#优势" title="标题的直接链接">​</a></h2><ul><li><p>通过并行计算增加容量 (parallelism)</p></li><li><p>通过复制容忍故障 (fault tolerance)</p></li><li><p>匹配物理设备的分布 (physical)</p></li><li><p>通过隔离来实现安全 (security / isolated)</p><ul><li>将安全的和不安全的计算放在不同机器上运行</li><li>系统间通过网络进行交互</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="挑战">挑战<a class="hash-link" href="#挑战" title="标题的直接链接">​</a></h2><ul><li><p>分布式系统有许多部分组成，这些部分是同时运行的，会遇到各种并发编程和复杂交互带来的问题。因此需要某些机制在时间上进行控制（比如超时机制，熔断机制）。</p></li><li><p>多台计算机加网络会使故障原因也更加复杂</p></li><li><p>性能，n 台计算机并不能达到 n 倍的性能</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="主题">主题<a class="hash-link" href="#主题" title="标题的直接链接">​</a></h2><ol><li><p>一致性</p><p>通用的基础设施需要有明确的行为。例如，"Get(k) 获取最近一次 Put(k,v) 的值"。</p><p>实现良好的行为是很难的！ "复制" 的服务器很难保持一致。</p></li><li><p>性能</p><p>目标：可扩展的吞吐量</p><p>Nx 个服务器，通过并行的 CPU、磁盘、网络实现 Nx 个总吞吐量。随着 N 的增长，扩展会变得更加困难，负载不平衡。有些事情不会随着 N 的增加而加快，例如初始化、交互。</p></li><li><p>权衡</p><p>容错性、一致性和性能是敌人。实现容错性和一致性需要通信</p><ul><li><p>发送数据到备份</p></li><li><p>检查数据是否是最新的。</p></li><li><p>通信通常很慢，而且不可扩展</p></li><li><p>许多设计只提供弱的一致性，以获得速度。</p><ul><li>例如，Get() 并不*产生最新的 Put()! 对于应用程序的程序员来说，这是很痛苦的，但可能是一个很好的权衡。</li></ul></li></ul><p>我们会在一致性/性能中看到许多设计点。</p></li><li><p>实现</p><p>RPC、线程、并发控制。</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lab">Lab<a class="hash-link" href="#lab" title="标题的直接链接">​</a></h2><ul><li><p>Map-Reduce</p></li><li><p>Raft 解决容错性</p></li><li><p>使用 Raft 构建 K/V server，它可以被复制</p></li><li><p>Sharded K/V server 将有可复制能力的主备 K/V server 克隆到多个组中，并将之前的数据分割存储到这些组中，提高运行速度（每个组只存储自己对应的数据，组合起来就是一整份数据）。同时还要实现在不同的服务期间移动数据，保证不会丢失（数据分片到各个组中，各组的服务器内也会有主从复制）。</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="map-reduce">Map-Reduce<a class="hash-link" href="#map-reduce" title="标题的直接链接">​</a></h2><p>以一个 word-count 为例，如果集群要对上万的文件进行计算，GFS 会先寻找到文件的所在位置，然后直接在本机的 map-reduce 程序中运行，从而节约了大量的网络传输。</p><blockquote><p>将按行存储转换为按列存储的过程，在论文中成为 shuffle</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a class="hash-link" href="#概述" title="标题的直接链接">​</a></h3><p>背景：在多 TB 级数据集上进行多小时的计算，例如，建立搜索索引，或排序，或分析网络的结构，只有在有 1000 台计算机的情况下才实用。</p><p>但是应用不是由分布式系统专家编写的，它的总体目标是让非专业的程序员也能轻松使用，对于程序员来说，他只需要定义 Map 和 Reduce 函数 (通常是相当简单的同步代码). MR 管理并隐藏了分布式的所有细节！</p><p>一个 MapReduce 作业的抽象视图</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">输入 1 -&gt; Map -&gt; a,1 b,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">输入 2 -&gt; Map -&gt; b,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">输入 3 -&gt; Map -&gt; a,1 c,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| | |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| | -&gt; Reduce -&gt; c,1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| -----&gt; Reduce -&gt; b,2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------&gt; Reduce -&gt; a,2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>1) 输入文件（已经）被分成 M 个文件</li><li>2) MR 对每个输入文件调用 Map()，产生一组 k2, v2 的 "中间" 数据，每个 Map() 调用都是一个 "任务"</li><li>3) 当地图被 Reduce 时。MR 会收集给定 k2 的所有中间 v2。并将每个键和值传递给一个 Reduce 调用</li><li>4) 最终输出是来自 Reduce() 的&lt;k2,v3&gt;对的集合。</li></ul><p>以 wordcount 为例：</p><ul><li>Map(k, v) 将 v 分割成单词</li><li>对于每个词 w, emit(w, "1")</li><li>Reduce(k, v_set)</li><li>emit(len(v_set))</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mapreduce-系统的优缺点">MapReduce 系统的优缺点<a class="hash-link" href="#mapreduce-系统的优缺点" title="标题的直接链接">​</a></h3><ol><li><p>MapReduce 的扩展性很好。</p><p>N 个 worker 计算机（可能）让你获得 Nx 的吞吐量。Maps() 和 Reduce() 可以并行运行，因为它们不相互影响。因此，更多的计算机可以带来更多的吞吐量！</p></li><li><p>MapReduce 隐藏了很多细节。</p><ul><li>发送应用代码到服务器</li><li>跟踪哪些任务已经完成</li><li>将中间数据从 Maps "洗" 到 Reduce 中去</li><li>平衡服务器上的负载</li><li>从故障中恢复。</li></ul></li><li><p>MapReduce 限制了应用程序可以做的事。</p><ul><li>没有互动或状态 (除了通过中间输出)</li><li>没有迭代</li><li>没有实时或流式处理</li></ul></li><li><p>MapReduce 输入和输出都存储在 GFS 集群文件系统上</p><ul><li>MR 需要巨大的并行输入和输出的吞吐量。</li><li>GFS 将文件分割到许多服务器上，以 64MB 为一个块。<ul><li>Map 并行读取</li><li>Reduce 并行写入</li></ul></li><li>GFS 还将每个文件复制到 2 或 3 个服务器上</li></ul></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mr-的工作细节">MR 的工作细节。<a class="hash-link" href="#mr-的工作细节" title="标题的直接链接">​</a></h3><ol><li><p>MapReduce 需要一个协调器，将任务分配给 worker 并纪录进度。</p><p>协调器将 Map 任务分配给 worker，直到所有的 Map 完成。</p><ul><li>Map 将输出（或者说中间数据）写到本地磁盘上</li><li>Map 通过哈希将输出分割到每个 Reduce 任务的一个文件中。</li></ul><p>在所有 Map 完成后，协调器将 Reduce 任务分配给 worker</p><ul><li>每个 Reduce 任务从（所有）Map worker 那里获取其中间输出。</li><li>每个 Reduce 任务在 GFS 上写入一个单独的输出文件</li></ul></li><li><p>什么可能会限制性能？</p><p>CPU、内存、磁盘、网络？在 2004 年，论文作者受到了网络容量的限制。</p><p>MR 在网络上发送什么？</p><ul><li>Map 从 GFS 读取输入。</li><li>Reduces 读取 Map 的中间输出。通常和输入一样大，例如用于排序。</li><li>Reduces 写输出文件到 GFS。</li></ul><p>在 MR 的 shuffle 过程中，一半的流量要经过根交换机。</p><p>论文的根交换机速度为 100 ~ 200 Gb/s，总共有 1800 台机器，所以每台机器可以分得 55 Gb/s。相比于磁盘或 RAM 的速度小得多。</p></li><li><p>MR 如何尽量减少网络的使用？</p><ul><li><p>协调器试图在存储其输入的 GFS 服务器上原地运行每个 Map 任务。所有的计算机都会同时运行 GFS 和 MR worker, 所以 Map 的输入都会通过 GFS 在本地磁盘读取，而不是网络。</p></li><li><p>中间数据被分割为许多文件，每个文件都存储了许多 key. 文件数量比 key 要少得多，大文件传输的效率要更高</p></li></ul></li><li><p>MR 如何处理负载均衡？</p><p>如果 N-1 个服务器必须等待 1 个慢速服务器完成，则是浪费和缓慢的。但有些任务可能确实比其他任务花的时间更长。</p><p>解决方法：比 worker 数量多得多的任务</p><ul><li>协调器将新的任务分配给完成先前任务的 worker。</li><li>因此，没有一个任务大到可以支配完成时间（希望如此）。</li><li>因此，快的服务器会比慢的服务器做更多的任务，完成的时间也差不多。</li></ul></li><li><p>MR 的容错性如何？</p><p>如果一个 worker 在 MP 任务中崩溃了怎么办？
MR 会对程序员隐藏故障。</p><p>MR 不必从头开始重新运行整个工作，它只重新运行失败的 Map 和 Reduce。假设 MR 将一个 Map 运行了两次，一个 Reduce 看到了第一次运行的输出。另一个 Reduce 看到了第二次运行的输出？</p><p>正确性要求重新执行时产生完全相同的输出。所以 Map 和 Reduce 必须是纯确定性的函数。它们只允许看它们的参数/输入。没有状态，没有文件 I/O，没有交互，没有外部通信。</p><p>如果你想允许 non-functional 的 Map 或 Reduce 呢？worker 失败将重新执行整个工作。或者是回滚到某个全局检查点。</p></li><li><p>崩溃恢复的细节</p><ul><li><p>一个 Map worker 崩溃了。</p><ul><li>协调器注意到 worker 不再响应 ping</li><li>协调器知道哪些 Map 任务在该 worker 上运行<ul><li>这些任务的中间输出现在已经丢失，必须重新运行</li><li>协调器通知其他 worker 运行这些任务</li></ul></li><li>如果所有的 Reduce 任务都获取了中间数据，可以不重新运行。</li></ul></li><li><p>一个 Reduce worker 崩溃了。</p><ul><li>完成的任务是好的 -- 已经存储在 GFS 中，并且保存有副本。</li><li>协调器在其他 worker 上重新启动未完成的任务。</li></ul></li></ul></li><li><p>其他故障/问题。</p><ul><li><p>如果协调者给两个 worker 分配了相同的 Map 任务怎么办？</p><p>  = 也许协调器错误地认为一个 worker 死了。它将只告诉 Reduce worer 其中一个。</p></li><li><p>如果协调者给了两个 worker 同样的 Reduce() 任务怎么办？</p><ul><li>他们都会试图在 GFS 上写下同一个输出文件！</li><li>GFS 的原子重命名可以防止混合；一个完整的文件将是可见的。</li></ul></li><li><p>如果一个 worker 非常慢 --"散兵游勇"，怎么办？</p><ul><li>也许是硬件它弱。</li><li>协调器启动最后几个任务的第二个副本。</li></ul></li><li><p>如果一个 worker 由于硬件或软件损坏而计算出不正确的输出，怎么办？</p><ul><li>太糟糕了！MR 假设 "故障停止" 的 CPU 和软件。</li></ul></li><li><p>如果协调器崩溃了怎么办？</p></li></ul></li><li><p>目前的状况？</p><ul><li>影响力巨大（Hadoop, Spark, &amp;c）。</li><li>可能谷歌已经不使用了。<ul><li>被Flume/FlumeJava取代（见Chambers等人的论文）。</li><li>GFS 被 Colossus（没有好的描述）和 BigTable 取代。</li></ul></li></ul></li><li><p>结论</p><p>MapReduce 使大集群计算流行起来。</p><ul><li>不是最有效或最灵活的。</li></ul><ul><li>扩展性好。</li><li>易于编程 -- 失败和数据移动被隐藏。</li></ul><p>这些在实践中是很好的权衡。现在已经有了一些更高级的继承者。</p></li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Let's Dev: A Package Manager]]></title>
        <id>/draft/[译] pkg_mng</id>
        <link href="https://trdthg.github.io/blog/draft/[译] pkg_mng"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[大家好！今天，我们要写一个新的包管理器，甚至比 Yarn 还要好！好吧，也许不是，但至少我们会玩得开心，了解包管理器的工作原理，并思考 Yarn]]></summary>
        <content type="html"><![CDATA[<p>大家好！今天，我们要写一个新的包管理器，甚至比 Yarn 还要好！好吧，也许不是，但至少我们会玩得开心，了解包管理器的工作原理，并思考 Yarn
的下一步可能会发生什么。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾软件]]></title>
        <id>/draft/test</id>
        <link href="https://trdthg.github.io/blog/draft/test"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[- 数据库连接工具]]></summary>
        <content type="html"><![CDATA[<ul><li>数据库连接工具</li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">git-credential-helper</a></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库设计]]></title>
        <id>/draft/数据库设计</id>
        <link href="https://trdthg.github.io/blog/draft/数据库设计"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[聚合函数]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="聚合函数">聚合函数<a class="hash-link" href="#聚合函数" title="标题的直接链接">​</a></h2><p>状态</p><p>key 优化</p><p>开放寻址（没有链表，内存连续，cache 优化，指针跳转少，向量化优化），拉链（key 冲突）</p><p>string 短不如不存引用 string 长就不方便</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机组成原理]]></title>
        <id>/draft/组成原理</id>
        <link href="https://trdthg.github.io/blog/draft/组成原理"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[4.1 存储器概述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="41-存储器概述">4.1 存储器概述<a class="hash-link" href="#41-存储器概述" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分类">分类<a class="hash-link" href="#分类" title="标题的直接链接">​</a></h3><p>按存储介质：</p><ul><li><p>1 半导体存储器：TTL, MOS (容易丢失，断电就没)</p></li><li><p>2.1 磁表面存储器：(塑料或金属基片涂磁层并磁化) 磁头 磁载体 (盘片)</p></li><li><p>2.2 磁芯存储器：硬磁材料 环形元件</p></li><li><p>3 光盘存储器：激光 磁光材料</p></li></ul><p>按存储方式：</p><ol><li><p>存取时间与地址无关 (随机访问)</p><ul><li>随机存储器 (RAM random-access memory) 在程序执行过程中可读可写</li><li>只读存储器 (ROM read-only memory) 在程序执行过程中只读</li></ul></li><li><p>存取时间与地址有关 (串行访问)</p><ul><li>顺序存储存储器 磁带</li><li>直接存储存储器 硬盘 (定位 磁头一栋，停在指定的柱面上，读写头移动到柱面下，等待磁盘指定的区域旋转过来)</li></ul></li></ol><p>按在计算机中的作用：</p><ol><li>主存储器<ul><li>RAM<ul><li>静态 RAM cache</li><li>动态 RAM 内存条</li></ul></li><li>ROM<ul><li>MROM 出厂厂家写入</li><li>PROM 一次可编程</li><li>EPROM 可擦鞋，可编程 ROM, 擦写复杂</li><li>EEPROM 更容易擦写</li></ul></li></ul></li><li>Flash Memory 大硬盘缓冲</li><li>高速缓冲存储器 (Cache)</li><li>辅助存储器 磁盘 磁带 光盘</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="层次结构">层次结构<a class="hash-link" href="#层次结构" title="标题的直接链接">​</a></h3><ol><li>存储器的三个主要特性的关系</li></ol><p>速度 价格 容量</p><p>寄存器 &gt; 缓存 &gt; 主存 &gt; 硬盘 &gt; 光盘 &gt; 磁带</p><ol start="2"><li>存储层次</li></ol><ul><li>cache &lt;=&gt; 主存<ul><li>解决 CPU 和主存速度差异过大</li></ul></li><li>主存 &lt;=&gt; 辅存<ul><li>解决容量问题</li><li>虚拟地址空间</li></ul></li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   +-----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--+--+      +-------+        +--+--+        +-----+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|     |------|       |--------|     |--------|     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| CPU |      | cache |        | 主存 |       | 辅存 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|     |------|       |--------|     |--------|     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--+--+      +-------+        +--+--+        +-----+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   |                             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   +-----------------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="42-主存储器">4.2 主存储器<a class="hash-link" href="#42-主存储器" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a class="hash-link" href="#概述" title="标题的直接链接">​</a></h3><ol><li>主存储器基本组成</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-------+     +---------+       +-----+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       |&lt;---&gt;|         |&lt;-----&gt;|     |  数据总线</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 存储体 |     | 读写电路 |       | MDR | &lt;========&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       |&lt;---&gt;|         |&lt;-----&gt;|     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+     +---------+       +-----+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ￪   ￪          ￪   ￪</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+     +---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 驱动器 |     | 控制电路 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+     +---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ￪   ￪          ￪   ￪</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+       读   写</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 译码器 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ￪   ￪</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  MAR  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ￪</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | 地址总线</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    |</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>MAR 中保存了由 01 代码构成的地址 译码器将 01 代码译码之后会对应存储体的存储单元
接着选中的存储单元的开关打开，存储体中的数据会送到数据线上，或者数据线上的数据会保存到存储单元里</p><ol start="2"><li>主存和 CPU 的联系</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------+  | 数据总线   +-------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| |  MAR  |&lt;=|==========&gt;|       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------+  |           |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |     读    |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |----------&gt;|       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|     CPU    |     写    |  主存  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |----------&gt;|       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |           |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------+  | 地址总线   |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| |  MAR  |==|==========&gt;|       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------+  |           +-------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>存储器和主存需要数据交换，所以数据总线是双向的</li><li>读和写都是站在 CPU 角度来说的，CPU 需要发出读或者写信号</li></ul><ol start="3"><li>主存中存储单元地址的分配</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">字地址      字节地址         字地址      字节地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  0    +--+--+--+--+         0    +--+--+--+--+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  4    |1 |2 |3 |4 |         4    |4 |3 |2 |1 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  8    |5 |6 |7 |8 |         8    |8 |7 |6 |5 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       +--+--+--+--+              +--+--+--+--+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       小端对齐                       大端对齐</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>举例：将 16 进制数 0X12345678H 存储</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">字地址      字节地址        字地址      字节地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  0    +--+--+--+--+       0    +--+--+--+--+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  4    |12|34|56|78|       4    |78|56|34|12|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       +--+--+--+--+            +--+--+--+--+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="4"><li>存储器的技术指标</li></ol><ul><li>存储容量：主存存储二进制代码的总位数</li><li>存储速度<ul><li>存取时间：存储器的访问时间，读出时间，写入时间</li><li>存取周期：连续两次独立的存储器操作 (读或写) 所需要的最小间隔时间</li></ul></li><li>存储器的带宽</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="半导体芯片概述">半导体芯片概述<a class="hash-link" href="#半导体芯片概述" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-基本结构">1. 基本结构<a class="hash-link" href="#1-基本结构" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">         +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         | +----+   +----+  +----+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  地址线  | | 译 |   | 存 |   | 读 | |  数据线</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  =====&gt; | | 码 |   | 储 |   | 写 | | &lt;=====&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         | | 驱 |   | 矩 |   | 电 | |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         | | 动 |   | 阵 |   | 路 | |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         | +----+   +----+  +----+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">片选线---&gt;|                         | &lt;--- 读/写控制线</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         +-------------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>地址线：单向，由外部输入，能够表示有多少个存储单元</p></li><li><p>数据线：双向，读出和写入的数据都通过数据线传输，表示存储单元有多少信息</p></li><li><p>片选线：内存条上有很多芯片，需要由它确定。(CS/CE)</p><p>一个存储单元的容量是 1b，需要 8 个存储单元组成一组才能表示 1 字节，很多组就构成了一个大存储器，片选线能够指定组</p></li><li><p>读/写控制线：读写的控制信号 (例如 WE 低电平写，高电平读，OE 允许读，WE 允许写)</p></li></ul><p>芯片容量 = 2 ^ 地址线条数 × 2 ^ 数据线条数</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-译码器">2. 译码器<a class="hash-link" href="#2-译码器" title="标题的直接链接">​</a></h4><p>将输入地址映射到对应的线路，找到对应的存储单元</p><ul><li>线选法：每个地址都对应一根线，线太多不现实</li><li>重合法：地址信号分为两部分，可以等分也可以不等分，按照矩阵的 x y 选择</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-随机存取存储器-ram">3. 随机存取存储器 (RAM)<a class="hash-link" href="#3-随机存取存储器-ram" title="标题的直接链接">​</a></h4><ol><li>静态 RAM(SRAM)</li></ol><p>行选，列选同时打开，完成读写操作</p><ol start="2"><li>动态 RAM(DRAM)</li></ol><p>假如数据保存的是 0</p><ul><li>预充电：读数据线为高电平 1</li><li>读选择线有效，这是读出的数据为 1，需要取反的到真实数据</li></ul><p>假如数据保存的是 1</p><ul><li>数据是高电平，t1 也导通，接地，</li><li>数据电容放电会变为 0，读数据线也会变为低电平<blockquote><p>注意：读数据线不能一直充电</p></blockquote></li><li>这是读选择线会读到 0, 取反得到真实数据</li><li><strong>注意</strong>: 因为数据改变了，需要重新写入原始数据。写入时就通过写选择线写入，写选择线会控制一整行</li></ul><ol start="3"><li>动态 RAM 时序</li></ol><p>行列地址分开传送</p><ul><li>引脚数量更少，速度相对会慢</li><li>静态 RAM 也可以实现，但是它速度更快，价格更高，不能舍弃性能</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-只读存储器">4. 只读存储器<a class="hash-link" href="#4-只读存储器" title="标题的直接链接">​</a></h4><ol><li>掩膜 ROM(MROM)</li></ol><ul><li><p>出厂时写入，不能修改</p></li><li><p>可以保存常用的函数等</p></li><li><p>行列选择线交叉处有 MOS 管为 1</p></li><li><p>行列选择线交叉处无 MOS 管为 0</p></li></ul><ol start="2"><li>PROM (一次性编程)</li></ol><p>融丝</p><ol start="3"><li>EPROM(多次性编程)</li></ol><p>必须整块擦出</p><ol start="4"><li>EPPRAM</li></ol><ul><li>电可擦写</li><li>局部擦写</li><li>全部擦写</li></ul><ol start="5"><li>Flash Memory(闪速型存储器)</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-存储器和-cpu-的连接">5. 存储器和 CPU 的连接<a class="hash-link" href="#5-存储器和-cpu-的连接" title="标题的直接链接">​</a></h4><p>存储器容量的拓展</p><ol><li>位拓展（增加存储字长）</li></ol><p>用 16K × 4 位 的存储芯片组成 1K × 8 位的存储器</p><ul><li><p>准备两个芯片（以 2114 为例）</p></li><li><p>1K 对应 10 根地址线，分别连接到两个芯片上</p></li><li><p>每一个芯片输出 4 位数据，把它们分别接到 8 根地址线上</p></li><li><p>片选线会同时选中两个芯片，他们会同时工作</p></li></ul><ol start="2"><li>字拓展（增加存储器器的容量）</li></ol><p>用 1K × 8 位的存储芯片组成 2K × 8 位的存储器</p><p>2K 对应 11 根地址线</p><p>使用最高位作为芯片选择的信号</p><ol start="3"><li>字位拓展</li></ol><p>用 1K × 4 位的存储芯片组成 4K × 8 位</p><p>先用两个 1K × 4 的组成 1 个 1K × 8 的</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">4K 对应 12 根地址线</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4K A11 A10 A9 ... A1 A0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1K         A9 ... A1 A0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以用最高 2 位选择 4 个芯片，两位译码出 4 根线，决定是哪一个芯片</p><p>存储器与 CPU 的连接</p><ol><li><p>地址线的连接</p></li><li><p>数据线的连接</p></li><li><p>读/写命令线的连接</p></li><li><p>片选线的连接</p></li><li><p>合理选择存储芯片</p></li><li><p>其他，时序，负载</p></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="6-存储器的校验">6. 存储器的校验<a class="hash-link" href="#6-存储器的校验" title="标题的直接链接">​</a></h4><ol><li>奇偶校验</li></ol><p>计算一组存储单元中 1 的个数，如果 1 的个数是偶数，校验码就为 0, 1 的个数是奇数，校验码变为 1</p><p>假如纠错码发生翻转呢？并无影响</p><p>缺点：</p><ul><li>只能知道出错，但不知到出错的位置</li><li>如果有偶数位发生翻转，无法检查到出错</li></ul><ol start="2"><li>汉明码</li></ol><p>将数据分组，并利用二分法反复确认对比错误，能够发现两个数据翻转，无法解决 3 个数据翻转</p><p>由于汉明码的性质，纠错码出现在 2^n 位上。数据块越大，纠错吗的相对占比就越少</p><ol start="3"><li>LDPC</li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="7-提高访存速度">7. 提高访存速度<a class="hash-link" href="#7-提高访存速度" title="标题的直接链接">​</a></h4><ul><li>采用高速器件</li><li>采用层次结构 Cache-主存</li><li>调整主存结构</li></ul><ol><li>单体多字结构</li></ol><p>每次向数据中取出多个记录</p><p>带宽可能提高 4 倍</p><ol start="2"><li>多体并行系统</li></ol><ul><li><p>高位交叉，顺序编址</p><p>不同存储体之间可以并行，但是 CPU 只会频繁访问某一个存储体</p></li><li><p>低位交叉，各个存储体轮流编址</p><p>需要满足一定条件，在存取周期内</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="43-高速缓冲存储器">4.3 高速缓冲存储器<a class="hash-link" href="#43-高速缓冲存储器" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1">1.<a class="hash-link" href="#1" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2cache-和-主存的映射">2.Cache 和 主存的映射<a class="hash-link" href="#2cache-和-主存的映射" title="标题的直接链接">​</a></h3><ol><li>直接映射</li></ol><p>特点：</p><ul><li>每个缓存块 i 和若干个主存块对应</li><li>每个主存块 j 只能和 1 干个缓存块对应</li></ul><p>过程：</p><ul><li>将主存储器的每个单元按照所在地址取模（Cache 大小）分组</li><li>根据地址就能直接找到地址在 Cache 中的位置，</li><li>接着在经过比较器比较组号是否对应判断是否命中</li></ul><p>优点：速度快</p><ul><li>只需要一个额外的标记，组号</li><li>CPU 三级缓存，适合做为一级缓存，追求极致速度</li></ul><p>缺点：利用率不高，</p><ul><li>假如 Cache 不满，1 号已经被占用，其他组 1 号的存储记录也不能利用到空的 Cache 资源</li></ul><ol start="2"><li>全相连映射</li></ol><p>特点：</p><ul><li><p>主存的任一块可以映射到 Cache 的任一块</p></li><li><p>主存储器依然需要分组</p></li><li><p>Cache 需要除了组号，还要标记第几位</p></li><li><p>在比较时需要同时比较组号，位号</p></li></ul><p>优点：</p><ul><li>利用率高</li><li>适合做为 CPU 后几级缓存</li></ul><ol start="3"><li>组相连映射</li></ol><p>前两种方法的折中</p><p>让每个主存块可以和 n 个 缓存块对应，它可以选择这 n 个中的任意一个</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3替换算法">3.替换算法<a class="hash-link" href="#3替换算法" title="标题的直接链接">​</a></h3><ol><li>先进先出（FIFO）</li></ol><p>没有体现程序的局部型原理</p><ol start="2"><li>最近最少使用算法（LRU）</li></ol><p>很好体现程序的局部型原理</p><p>实现复杂：（滑动窗口 + 次数）？</p><p>最近最旧使用简单替代？</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络]]></title>
        <id>/draft/计算机网络</id>
        <link href="https://trdthg.github.io/blog/draft/计算机网络"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[1. 概述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-概述">1. 概述<a class="hash-link" href="#1-概述" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-应用层">2. 应用层<a class="hash-link" href="#2-应用层" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="电路交换-circuit-switching">电路交换 circuit-switching<a class="hash-link" href="#电路交换-circuit-switching" title="标题的直接链接">​</a></h3><p>频分，时分</p><p>建立连接 - 数据传输 - 释放资源</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分组-包-交换-package-switching">分组 (包) 交换 package-switching<a class="hash-link" href="#分组-包-交换-package-switching" title="标题的直接链接">​</a></h3><p>为每一个连接只分配一小块资源，同时服务多个 (用户) 连接</p><p>端到端</p><ul><li><p>所有数据包都是利用的完整的带宽，带宽不用分片</p></li><li><p>限制在交换机转发的能力</p></li><li><p>不需要预留资源</p></li><li><p>不需要提前和转发设备沟通，</p></li><li><p>需要存储转发</p></li><li><p>超过转发能力会有排队延迟，甚至产生丢包</p><ul><li>电路交换会限制发送速率，不会在中间产生不可用</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-传输层">3. 传输层<a class="hash-link" href="#3-传输层" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-传输层服务">1. 传输层服务<a class="hash-link" href="#1-传输层服务" title="标题的直接链接">​</a></h3><ol><li>传输层和网络层的区别</li></ol><ul><li>网络层：主机间的逻辑通信</li><li>传输层：进程间的逻辑通信</li></ul><p>传输层的服务 = 传输层的协议 + 网络层的服务</p><p>不同主机进程间数据传输 = 传输层的协议 + 进程所在主机间数据传输</p><p>发送端：</p><ul><li>接收应用层的消息</li><li>设置报文头部字段的值</li><li>创建报文段</li><li>把报文端传递给对应 IP</li></ul><p>接收端：</p><ul><li>从某 IP 接收 报文段</li><li>检查 header 的值</li><li>解析应用层消息</li><li>通过 socket 把数据多路分解到应用</li></ul><ol start="2"><li>两个传输层协议</li></ol><p>TCP(Transmission Control Protocol)：</p><ul><li>可靠传输 (reliable, in-order delivery)</li><li>拥塞控制 (congestion control)</li><li>流量控制 (flow control)：确保发送端不会发送过多数据导致接收端 buffer 溢出而丢包的机制</li><li>面向建立</li></ul><p>UDP(User Datagram Protocol)：</p><ul><li>不可靠传输 (unreliable, unordered delivery)</li><li>尽力而为 (no-frills extension of "best-effort" IP)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-多路复用--多路分解">2. 多路复用 / 多路分解<a class="hash-link" href="#2-多路复用--多路分解" title="标题的直接链接">​</a></h3><p><em>Multiplexing/demultiplexing</em></p><ul><li>创建 socket 时需要指定本机端口号</li><li>连接 UDP 时需要指定目的主机的 IP 和 端口号</li><li>当接收端接收到 UDP 报文后会检查目的端口，然口投递到对应的进程</li></ul><p>TCP 面向连接，TCP socket 定义了一个四元组</p><p>总结</p><ul><li>UDP 多路分解只使用端口号</li><li>TCP 多路分解使用 源和目地的 IP 和 端口</li><li>多路复用和多路分解发生在所有层</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-无连接传输-udp">3. 无连接传输 UDP<a class="hash-link" href="#3-无连接传输-udp" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="udp-特点">UDP 特点<a class="hash-link" href="#udp-特点" title="标题的直接链接">​</a></h4><ol><li><p>UDP 是一种尽力而为的协议</p><ul><li>UDP 报文段可能会丢失</li><li>也可能会乱序</li></ul></li><li><p>无连接</p><ul><li>UDP 发送端和接收端不需要握手</li><li>每一个 UDP 数据段都是独立的，上下可能没有关系</li><li>只有 checkout 用于错误检验</li></ul></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要-udp">为什么需要 UDP？<a class="hash-link" href="#为什么需要-udp" title="标题的直接链接">​</a></h4><ol><li>无连接简历（可能会增加延迟）</li><li>简单，发送端和接收端不需要保存连接状态</li><li>没有拥塞控制，UDP 会尽可能快的送达</li></ol><p>应用场景：</p><p>流媒体 app</p><ul><li>低延迟</li><li>速度敏感</li></ul><p>如何在 UDP 上个构建可靠传输：在应用层上构建可靠性</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="udp-报文段格式">UDP 报文段格式<a class="hash-link" href="#udp-报文段格式" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+---------+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 源端口   | 目的端口 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 长度     | 校验和   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------+---------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 应用数据（消息）     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>长度：UDP 报文段的长度（包含 header）</li><li>数据：上层协议数据，例如 DNS，SNMP</li><li>checksum：错误检测（数学手段的冗余）</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="checksum-计算方法">checksum 计算方法<a class="hash-link" href="#checksum-计算方法" title="标题的直接链接">​</a></h4><p>将所有数据求和</p><ul><li>假如发送 5 bit 数据 (7, 11, 12, 0, 6), 实际会发送 (7, 11, 12, 0, 6, 36)</li><li>接收方重新计算数字之和，并与收到的比较</li><li>发送方法送的是实际数据的反码 (-36), 被称为 checkout</li></ul><p>问题</p><p>如何用 4 bit 表示 36 和 -36？</p><p>答：1s 补运算</p><ul><li><code>36 = 0001 0100</code></li><li><code>0100 + 0100 = 0110 = 6</code></li><li><code>+6 = 0100 -6 = 1001 取反得到 -6</code></li><li><code>-36 可以用 1001(9) 表示</code></li></ul><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> 1110 0110 0110 0110</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 1101 0101 0101 0101</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11011 1011 1011 1011</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 1011 1011 1011 1100</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-可靠传输">4. 可靠传输<a class="hash-link" href="#4-可靠传输" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="rdt">rdt<a class="hash-link" href="#rdt" title="标题的直接链接">​</a></h4><p>Rdt1.0:</p><ol><li>下层的 channel 是可靠的<ul><li>不会发生比特翻转</li><li>不会丢包</li></ul></li><li>为 sender，receiver 设置不同的 FSM<ul><li>sender 和 receiver 分别从下层的 channel 发送和接收数据</li></ul></li></ol><p>Rdt2.0:</p><ul><li>发送端发送数据</li><li>接收端接收数据，如果接收到的数据正确，返回 ACK，如果数据错误，返回 NAK。</li><li>发送端根据收到的是 ACK 还是 NAK，选择重传</li></ul><p>问题：</p><ol><li>出现比特翻转<ul><li>使用 checksum 检测错误</li><li>ack/nak 确认</li><li>重传</li></ul></li><li>如何从错误恢复：<ul><li>自动请求重传</li></ul></li><li>新的状态机<ul><li>sender 使用 udt_send 发送数据，发送完毕后等待接收 ACK。</li><li>如果接收到了 ACK，就是成功。</li><li>如果接收到了 NAK，就会重传。</li></ul></li></ol><p>缺点：</p><ol><li>如果接收方成功接收，但是返回失败，会导致消息不一致</li></ol><p>rdt2.1:</p><p>解决同步问题 和 ACK/NAK 出错：</p><ul><li>发送端发送的数据除了数据和 checksum 之外还有一个序列号</li><li>在接收端返回 ACK 或 NAK 是，还会返回序列号</li><li>发送端直到收到正确的序列化才会转换到下一个状态</li><li>是需要 0 和 1 两个状态其实就够了，区分新包和旧包</li></ul><p>rdt2.2:</p><p>去掉 NAK，都用 ACK 表示：</p><ul><li>发送方发送 ACK</li><li>接收方接收到数据，如果正确，返回原本的 ACK，如果错误，返回其他数据表示错误。</li><li>发送方检查 ACK，如果 ACK 相同，则切换到下一个状态</li></ul><p>rdt3.0:</p><ol><li>可能发送丢包<ul><li>发送端等待一段时间，可能是数据丢了 或者 ACK 丢了，无法区分，统一重传</li><li>等待多久，准本计数器，等待超时</li></ul></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pipelined-protocols-流水线">Pipelined protocols (流水线)<a class="hash-link" href="#pipelined-protocols-流水线" title="标题的直接链接">​</a></h4><p>提高效率，在发送端收到确认后可以发送更多数据</p><p>每次发送多份数据，当份数提高到一定程度，利用率就到 100%, 无法继续提高效率</p><ol><li>go-Back-N</li></ol><p>滑动窗口，重传很多</p><p>积累确认机制</p><ul><li><p>发送方发送 5 个数据包</p></li><li><p>假如第 3 个丢失，接收方会返回错误的序号</p></li><li><p>发送端从这里重新发送</p></li><li><p>在接收方</p></li><li><p>如果到达分组是按序到达，那么发送 ACK，发送方正常移动窗口</p></li><li><p>如果不是按序到达，那么接收方丢弃所有失序分组；丢弃一个正确接收的失序分组可能会导致更多的重传</p></li><li><p>如果某个确认丢失，后续的确认（只有发送端正确接收到了数据才可能会有后续的确认）也能使发送端正常移动窗口</p></li></ul><ol start="2"><li>selective repeat(选择重传)</li></ol><ul><li>接收方因为有 buffer，所以不用按序接收分组，失序的分组会被缓存</li><li>发送方的 buffer，每个数据包都有各自的计数器，不用重传多的数据包</li></ul><p>为了防止误判数据包</p><p>ACK 编号数量至少要 = 发送窗口 + 接收窗口</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp">TCP<a class="hash-link" href="#tcp" title="标题的直接链接">​</a></h3><p><img loading="lazy" src="/assets/images/a-f807a65ba374c5fe16a55e6b3f54c7ff.jpg" width="705" height="527" class="img_ev3q"></p><ul><li>源端口和目的端口字段：各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</li><li>序号字段：占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。</li><li>确认号字段：占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号。</li><li>数据偏移（即首部长度）：占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的单位是 32 位字（以 4 字节为计算单位）。</li><li>保留字段：占 6 位，保留为今后使用，但目前应置为 0。</li><li>紧急 URG：当 URG  1 时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送 (相当于高优先级的数据)。</li><li>确认 ACK：只有当 ACK  1 时确认号字段才有效。当 ACK  0 时，确认号无效。</li><li>推送 PSH (PuSH)：接收 TCP 收到 PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。</li><li>复位 RST (ReSeT) ：当 RST  1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。</li><li>同步 SYN：同步 SYN = 1 表示这是一个连接请求或连接接受报文。</li><li>终止 FIN (FINis) ：用来释放一个连接。FIN  1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。</li><li>窗口字段：占 2 字节，用来让对方设置发送窗口的依据，单位为字节。</li><li>检验和：占 2 字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。</li><li>紧急指针字段：占 16 位，指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。</li><li>选项字段：长度可变。TCP 最初只规定了一种选项，即最大报文段长度 MSS。MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节。</li></ul><p>TCP seq 序列号</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="tcp-feature">TCP Feature<a class="hash-link" href="#tcp-feature" title="标题的直接链接">​</a></h4><ul><li>Point to Point (单播，单发送者，单接收者)</li><li>reliable, in-order byte stream</li><li>pipelined（拥塞控制，流量控制）</li><li>send &amp; receive buffers</li><li>full deplex data(全双工，双向数据传输，MSS(最大报文长度))</li><li>connection-orinted(握手，初始化 sender 和 receiver 的状态)</li><li>flow controlled(发送端不能超过接收端的处理能力)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="flow-control">Flow Control<a class="hash-link" href="#flow-control" title="标题的直接链接">​</a></h3><p>为什么需要流量控制？</p><ul><li>发送者接收者的速率不一定匹配，如果发的快，可能产生消息堆积</li></ul><p>如何解决？</p><ul><li>接收端需要通知发送端自己的缓冲区大小，让它不要发送太多。对应的就是 TCP 协议中规定的 Receive Window (接收窗口) 字段</li></ul><blockquote><p>注意滑动窗口 (发送窗口)，接收窗口，以及之后的拥塞窗口的区别</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="congestion-control">Congestion Control<a class="hash-link" href="#congestion-control" title="标题的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="拥塞">拥塞<a class="hash-link" href="#拥塞" title="标题的直接链接">​</a></h4><ul><li>太多发送源发送了太多的数据，超过了网络的承载能力</li><li>对资源需求的总和 &gt; 可用资源</li><li>与流量控制不同</li><li>表现<ul><li>丢包</li><li>高延迟</li></ul></li><li>top-10 question!</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="解决方法">解决方法<a class="hash-link" href="#解决方法" title="标题的直接链接">​</a></h4><ol><li><p>端到端</p><ul><li>没有来自网络的明确反馈</li><li>端系统通过丢包和延迟推测出可能通过拥塞</li><li>TCP 采用这种方法</li></ul></li><li><p>网络层辅助</p><ul><li>路由主动反馈给端系统<ul><li>由 1 个 bit 指出网络存在拥塞(SNA, DECbit, TCP/IP ECN, ATM)</li><li>发送端需要以一个固定的速率发送数据</li></ul></li></ul></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="三大问题">三大问题<a class="hash-link" href="#三大问题" title="标题的直接链接">​</a></h4><ol><li><p>如何限制发送速度？</p><ul><li><p>Last Byte Sent(上一个发送的字节) - Last Byte Acked(最后确认的字节) &lt; CongWin(拥塞窗口)</p></li><li><p>rate(发送速率) = CongWIn / RTT B/s</p></li></ul></li><li><p>如何检测到拥塞？
loss event = timeout or 3 duplicate acks</p></li></ol><ol start="3"><li><p>应该发送多快？</p><ul><li><p>AIMD</p><ul><li>加法增加，乘法减小(additive increase, multiplicative decrease)</li><li>增加有一个单位（1 字节，1k），一般以 MSS 数量为单位</li><li>图像表现为锯齿状</li></ul></li><li><p>slow start</p><ul><li>连接开始时，CongWin 为 1MSS，<ul><li>每次接收到 ACK，CongWin 就会乘 2</li><li>慢启动其实并不慢，增加的速度很快</li></ul></li><li>速度增加有一定得阈值，当超过阈值后，到达新阶段，一般称为 "拥塞避免"，每次只会增加 1 个 MSS。</li></ul></li></ul></li></ol><ul><li><p>conservative after timeout events</p><ul><li>发生丢包后<ul><li>窗口掉回 1 MSS</li><li>线性增加</li></ul></li><li>收到 3 个重复的 ACK<ul><li>窗口砍半</li><li>线性增加</li><li>快速重传</li></ul></li><li>新的阈值都为上次阈值的一半<blockquote><p>丢包相对于 3 个重复的 ACK 更严重</p></blockquote></li></ul></li><li><p>TCP CUBIC</p><ul><li>窗口减半后，增加的速度改为 <code>x^3</code> 的曲线</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp-公平性">TCP 公平性<a class="hash-link" href="#tcp-公平性" title="标题的直接链接">​</a></h3><p>AIMD 具有较好的公平性，使得不同连接占有的带宽相等</p><blockquote><p>如果 TCP 和 UDP 同时竞争会怎样？TCP 会主动降低速度，UDP 则不管</p></blockquote><blockquote><p>想要可靠传输，不想要拥塞控制怎么办？在 UDP 的基础上自行实现可靠传输 (QUIC 就是这么干)</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-网络层">4. 网络层<a class="hash-link" href="#4-网络层" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="简介">简介<a class="hash-link" href="#简介" title="标题的直接链接">​</a></h3><ul><li>提供主机间的数据传输</li><li>发送端将段 (segments) 封装为数据报，接收端把 segments 发送到传输层</li><li>网络层协议在各个主机和路由间</li><li>router 会确认经过他的所有 IP 数据报的 header 字段</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="转发--路由">转发 &amp; 路由<a class="hash-link" href="#转发--路由" title="标题的直接链接">​</a></h3><p>路由：决定从发送源发送的 packets 到目的地的路径</p><ul><li>路由选择算法</li></ul><p>转发：把 packets 从路由的输入转发到合适的输出</p><ul><li>如何通过某一个交换机</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据平面控制平面">数据平面，控制平面<a class="hash-link" href="#数据平面控制平面" title="标题的直接链接">​</a></h3><ol><li><p>数据平面</p><ul><li>局部的</li></ul></li><li><p>控制平面</p><ul><li>全局的</li><li>Per-router control plane<ul><li>每一个路由设备单独实现路由算法</li></ul></li><li>Software-Defined Networking(SDN) control plane<ul><li>由一个集中式的计算机计算路由并向下发送了路由表</li></ul></li></ul></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="是否建立连接">是否建立连接<a class="hash-link" href="#是否建立连接" title="标题的直接链接">​</a></h3><ul><li>三种重要的网络架构<ul><li>ATM, frame relay, X.25</li></ul></li><li>在数据报流动前，两个主机以及它们之间的路由会建立虚拟连接</li><li>网络层和传输层连接的区别<ul><li>网络层：两个主机之间 (也可能包含之间的交换机)</li><li>传输层：两个进程之间</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="虚电路--数据报">虚电路 &amp; 数据报<a class="hash-link" href="#虚电路--数据报" title="标题的直接链接">​</a></h3><ul><li><p>虚电路</p><ul><li>有连接</li></ul></li><li><p>数据报</p><ul><li>无连接</li></ul></li></ul><blockquote><p>网络层应该是面向连接的还是无连接的？
在计算机通信中，可靠交付应该由谁来负责？是网络还是端系统？</p></blockquote><p>转发表的建立</p><p>对于虚电路，转发表会在建立连接时产生</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ip-地址">IP 地址<a class="hash-link" href="#ip-地址" title="标题的直接链接">​</a></h3><p><em>addressing, forwarding, routing</em></p><ul><li>地址块如何设计</li><li>对存储和转发的影响</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ip-地址的编址方法">IP 地址的编址方法<a class="hash-link" href="#ip-地址的编址方法" title="标题的直接链接">​</a></h4><ol><li>分类的 IP 地址<ul><li>每一类地址都由两个固定长度的字段组成<ul><li>网络号 net-id: 标志主机（或路由器）连接到的网络</li><li>主机号 host-id：标志该主机或路由器</li></ul></li><li>两级的 IP 地址可以记为：<code>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}</code><blockquote><p><code>::=</code> 表示 "定义为"</p></blockquote></li></ul></li></ol><table><thead><tr><th>网络类别</th><th>首部</th><th>地址范围</th></tr></thead><tbody><tr><td>A 类</td><td>0</td><td>1.0.0.0 - 127.255.255.255</td></tr><tr><td>B 类</td><td>10</td><td>128.0.0.0 - 191.255.255.255</td></tr><tr><td>C 类</td><td>110</td><td>192.0.0.0 - 223.255.255.255</td></tr><tr><td>D 类</td><td>1110</td><td>224.0.0.0 - 239.255.255.255</td></tr><tr><td>E 类</td><td>1111</td><td></td></tr></tbody></table><p>| 类别 | 最大网络数 | 第一个可用的网络号 | 最后一个可用的网络号 | 每个网络中的最大主技术 |
| A |  126(2^7 - 2)     | 1       | 126         | 16,777,214 |
| B | 16383(2^14 - 1)   | 128.1   | 191.255     | 65,534 |
| C | 2097151(2^21 - 1) | 192.0.1 | 223.255.255 | 254 |</p><ul><li><p>私有地址</p><ul><li>A：10.0.0.0 - 10.255.255.255(10.0.0.0/8 prefix)</li><li>B：172.16.0.0 - 172.31.255.255(172.16.0.0/12 prefix)</li><li>C：192.168.0.0 - 192.168.255.255(192.168.0.0/16 prefix)</li></ul></li><li><p>127.0.0.1: loopback</p></li><li><p>255.255.255.255:</p></li><li><p>0.0.0.0:</p></li></ul><ol start="2"><li><p>子网的划分</p></li><li><p>CIDR 方案</p></li></ol><ul><li>无分类的编制方法</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ip-地址的一些重要特点">IP 地址的一些重要特点<a class="hash-link" href="#ip-地址的一些重要特点" title="标题的直接链接">​</a></h4><ul><li>IP 地址是 "分等级" 的地质结构<ul><li>方便了 IP 管理：IP 管理机构分配 IP 时只分配网络号，剩下的交由单位自行管理</li><li>减小了路由表的大小：路由器仅根据网络号来转发路由（不用考虑目的主机号），减少了路由表项数，减小了存储空间。</li></ul></li><li>实际上 IP 地址标志一个主机和一条链路的接口<ul><li>当一个主机同时连接到两个网络上时，它必须同时有两个 IP 地址，并且 net-id 必须不同（称为多归属主机）</li><li>一个路由器至少要连接到两个网络，才能将 IP 数据报总一个网络转发到另一个网络。因此路由器至少有两个不同的 IP 地址</li></ul></li><li>用转发器或者网桥连接起来的若干局域网仍属以一个网络，这些局域网有相同的 net-id</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="分类-ip-地址的路由转发">分类 IP 地址的路由转发<a class="hash-link" href="#分类-ip-地址的路由转发" title="标题的直接链接">​</a></h4><ul><li>direct delivery 直接投递/交付</li><li>indirect delivery 间接投递/交付</li><li>Route based，基于路径（构建转发表困难，维护难度大）</li><li>Next hop based，基于下一跳（类似于 "路牌"）</li></ul><ol><li><p>如果多个源 IP 有相同的下一跳，他们的目的地址可以合并</p></li><li><p>Default routing（缺省（默认）路由）</p></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="划分子网和构造超网">划分子网和构造超网<a class="hash-link" href="#划分子网和构造超网" title="标题的直接链接">​</a></h4><ol><li><p>从两极 IP 到 三级 IP 地址
原因：</p><ul><li>IP 地址利用率低</li><li>为每一个物理网络分配一个网络号会使路由表变大，降低性能</li><li>两极 IP 地址不够灵活</li></ul></li><li><p>子网掩码</p></li></ol><p>子网掩码前一部分为 1，后一部分全为 0，将子网掩码与 IP 地址进行 "与" 运算，就能找到 IP 地址的子网部分。</p><p>可以用来区分 net-id 和 host-id 或者 subnet-id 和 host-id</p><p>不同的子网掩码可以得到相同的网络地址，但是不同的掩码的效果是不同的。如果使用，路由器给出目的的网络地址外，还必须同时给出该网络的子网掩码。</p><p>若一个路由器连接在两个子网上，他就有两个网络地址和子网掩码</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="无分类编址-cidr">无分类编址 CIDR<a class="hash-link" href="#无分类编址-cidr" title="标题的直接链接">​</a></h4><ol><li><p>CIDR 特点</p><ul><li>消除了 A，B，C 类地址，以及划分子网的概念</li><li>使用各种长度的 "网络前缀" 代替分类地址中的网络号和子网号。</li><li>从三级编制（取消子网掩码）变回二级编制</li></ul></li><li><p>无分类的两级编址</p><ul><li>IP 记法：<code>IP 地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}</code></li><li>CIDR 还是用斜线记法：在 IP 地址面加一个 <code>/</code>，后面跟上网络前缀所占的位数。（对应子网掩码中 1 的个数）</li><li>举例：128.14.32.0/20 <code>min: 128.14.32.0, max: 128.14.47.255</code></li><li>全 0 和全 1 一般不使用</li></ul></li><li><p>可变掩码长度向右移能划分为小块，向左移合并为大块</p></li><li><p>路由聚合减少了路由表的表项</p></li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust Quiz#1]]></title>
        <id>/draft/rust-quiz/01</id>
        <link href="https://trdthg.github.io/blog/draft/rust-quiz/01"/>
        <updated>2022-10-21T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[题目]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="题目">题目<a class="hash-link" href="#题目" title="标题的直接链接">​</a></h2><p>下面的 1 输出是什么？</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">macro_rules! m {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ($( $s:stmt )*) =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            { stringify!($s); 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        )&lt;&lt;*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fn main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    print!(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "{}{}{}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        m! { return || true },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        m! { (return) || true },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        m! { {return} || true },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol><li>The program exhibits undefined behavior</li><li>The program does not compile</li><li>The program is guaranteed to output: <!-- -->[ ]</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解答">解答<a class="hash-link" href="#解答" title="标题的直接链接">​</a></h2><p>122</p><p>这个问题围绕着 Rust 的语法边界设计。</p><blockquote><p>This question revolves around where the Rust grammar places statement
boundaries.</p></blockquote><p>宏的输入规则是 <code>$( $s:stmt )*</code>, 它能够匹配到 0 或多个 Rust 语句。该规则内部的 <code>$s: stmt</code>
是一个片段分类符，它能够匹配到一个符合 Rust 语法规范的表达式。被匹配到的语句可以在展开后的代码中作为 <code>$s</code> 。而外部的 <code>$(...)*</code>
部分表示一个重复，它可以重复匹配 0 或多次内容。</p><blockquote><p>The input rule of the macro m! is $($s:stmt)<em> which matches zero or more Rust
statements. The $(...)</em> part of the rule is a repetition which matches the
contents of the repetition zero or more times, and the $s:stmt is a fragment
specifier that matches a Rust statement (stmt) conforming to the rules of the
Rust grammar. The matched statements are available within the expanded code as
the fragment variable $s.</p></blockquote><p>语句是函数体中允许的最高级别的语法单位。下面所有的内容都是语句的例子。</p><blockquote><p>A statement is the top-level unit of syntax permitted within a function body.
All of the following are examples of statements.</p></blockquote><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Items are statements.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct S { x: u64 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Let-bindings are statements.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let mut s = S { x: 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Expressions are statements.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s.x + 1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>函数体的语法要求某些类型的语句后面有一个分号，但对于宏的语法而言，分号并不是语句的一部分。</p><blockquote><p>The grammar of function bodies requires that some types of statements are
followed by a semicolon, but the semicolon is not part of the statement for
the purpose of macro syntax.</p></blockquote><p>m! 将会展开为 0 或多个由 <code>&lt;&lt;</code> 分割的 <code>{ stringify!($s); 1 }</code>。<code>$(...)&lt;&lt;*</code> 部分表示重复语句之间使用 <code>&lt;&lt;</code>
作为分隔符</p><blockquote><p>The macro m! expands to zero or more copies of <code>{ stringify!($s); 1 }</code>
separated by the <code>&lt;&lt;</code> token. The <code>$(...)&lt;&lt;*</code> part of the rule is a repetition
using <code>&lt;&lt;</code> as the separator.</p></blockquote><p>在宏中使用 <code>&lt;&lt;</code> 作为分隔符非常不常见。最常用的分隔符是逗号，<code>$(...),*</code>，其他的单一符号也是允许的。重要的是，<code>macro_rules!</code> 把所有的 Rust 内置操作符都当成单 token</p><blockquote><p>Using <code>&lt;&lt;</code> as a separator in a repetition in a macro is highly unusual. The
most commmonly used separator is the comma, written as <code>$(...),*</code>, but any
other single token is allowed here. Crucially, macro_rules! treats all
built-in Rust operators as single tokens, even those that consist of multiple
characters like &lt;&lt;.</p></blockquote><p>The <code>{ stringify!($s); 1 }</code> is an expression whose value is always 1. The value
of <code>stringify!($s)</code> is discarded, so this is equivalent to the expression
<code>{ 1 }</code>. The reason for having <code>stringify!($s)</code> in there is to control the
number of times the repetition is repeated, which is determined by which
fragment variables are used within the repetition. Writing a repetition without
using any fragment variables inside of it would not be legal.</p><p>Suppose we call this macro with three of the statements shown above as input.</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">m! {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    struct S { x: u64 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let mut s = S { x: 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s.x + 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The macro expands to:</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{ stringify!(struct S { x: u64 }); 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;&lt; { stringify!(let mut s = S { x: 1 }); 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;&lt; { stringify!(s.x + 1); 1 }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Each of the stringifys expands to a string literal:
2</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{ "struct S { x: u64 }"; 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;&lt; { "let mut s = S { x: 1 }"; 1 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;&lt; { "s.x + 1"; 1 }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The values of the string literals are not used. In this case the expression is
equivalent to <code>{ 1 } &lt;&lt; { 1 } &lt;&lt; { 1 }</code>, which is equivalent to <code>1 &lt;&lt; 1 &lt;&lt; 1</code>.
The <code>&lt;&lt;</code> operator is left-associative; the numeric value of this expression
is 4.</p><p>Altogether, the relevant behavior of this macro is that it evaluates to
<code>1 &lt;&lt; 1 &lt;&lt; 1 &lt;&lt; ...</code> where the number of ones is equal to the number of Rust
statements in the input of the macro. In closed form, the numeric value is
<code>1 &lt;&lt; (n - 1)</code> where n is the number of statements, except in the case that n is
zero where the macro expands to nothing and we get a syntax error at the call
site.</p><p>It remains to determine how many statements are in the three invocations of m!
in the quiz code.</p><ol><li><code>return || true</code></li></ol><p>This is a return-expression that would return the closure <code>|| true</code>. It is
equivalent to return <code>(|| true)</code>. It is parsed as a single statement so the m!
invocation evaluates to</p><ol start="2"><li><code>(return) || true</code></li></ol><p>This is a logical-OR expression. The <code>||</code> is a binary operator, where the
left-hand side is the expression <code>(return)</code> (of diverging type <code>!</code>) and the
right-hand side is the expression <code>true</code>. This expression is a single statement
so m! again evaluates to 1.</p><ol start="3"><li><code>{return} || true</code></li></ol><p>This one is two statements! A block-statement <code>{return}</code> followed by a closure
expression <code>|| true</code>.</p><p>The Rust grammar distinguishes between expressions that require a semicolon in
order to stand alone as a statement, and expressions that can be statements even
without a semicolon. Consider two examples:</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// No trailing semicolon required.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for t in vec {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /* ... */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Trailing semicolon required.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">self.skip_whitespace()?;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The list of expression types that stand alone without a semicolon is defined
here in libsyntax. The distinction informs a few different early bail-out cases
where the parser decides to finish parsing the current expression.</p><p>Relevant to our case is that block expressions <code>{ /* ... */ }</code> terminate an
expression if doing so would be syntactically sensible. The parser does not
eagerly consume binary operators after a block expression. Thus one might write:</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fn f() -&gt; &amp;'static &amp;'static bool {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Block expression.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        println!("What a silly function.");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Reference to reference to true.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &amp;&amp;true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In order to parse a block followed by a binary operator, we would need to make
it syntactically insensible for the parser to terminate an expression at the
close curly brace. This would usually be done by wrapping in parentheses.</p><div class="language-rs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fn f() -&gt; bool {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ({ true } &amp;&amp; true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Anyhow, the output of the program is 112.</p><p>You have answered 2 of 33 questions correctly.</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对重请求 - 应对尾部延迟]]></title>
        <id>/2022/04/13/[译] tail_latency</id>
        <link href="https://trdthg.github.io/blog/2022/04/13/[译] tail_latency"/>
        <updated>2022-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hedged requests — Tackling tail latency]]></summary>
        <content type="html"><![CDATA[<p><a href="https://medium.com/swlh/hedged-requests-tackling-tail-latency-9cea0a05f577" target="_blank" rel="noopener noreferrer">Hedged requests — Tackling tail latency</a></p><p>通常出现在出现在分布式系统中，实现分布式系统有很多优缺点</p><p>使用分布式系统的常见原因：</p><ul><li>可用性</li><li>可扩展性</li><li>分区容错</li><li>独立部署</li><li>为不同目的使用不同的技术</li></ul><p>这些可能是分布式系统的问题：</p><ul><li>成本</li><li>复杂</li><li>一致性</li><li><strong>延迟</strong></li></ul><p>我们将重点关注延迟，更具体地说是尾部延迟。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="延迟">延迟<a class="hash-link" href="#延迟" title="标题的直接链接">​</a></h2><p>当我们使用分布式系统时，延迟会不可避免的增加。分布式系统中的每一跳都不是免费的，除了网络延迟还有其他成本，如果使用 HTTP
通信，我们还要处理消息、解析消息、验证身份令牌、以及我们想要添加到管道中的任何数据。这些是在设计分布式系统时需要考虑的问题。我们必须考虑是否有必要分发新的系统。</p><p>要回答这个问题，我们需要了解如何测量延迟。最简单的答案之一是使用百分比。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="百分比">百分比<a class="hash-link" href="#百分比" title="标题的直接链接">​</a></h2><p>首先是定义我们的观察组。对于延迟，最常见的观察组是给定请求类别的响应时间。计算的方式如下：</p><ol><li>获取请求的所有响应时间并排序。</li><li>取前 x% 的元素。</li><li>获取集合的最大（最长）值。</li></ol><p>以请求 <code>/hello-world</code> 接口为例</p><ol><li>获取请求的所有响应时间并排序。<ul><li>获取响应时间：23, 20, 21, 20, 23, 20, 45, 21, 25, 25</li><li>排序：20, 20, 20, 21, 21, 23, 23, 25, 25, 45</li></ul></li><li>取前 50% 元素： 20, 20, 20, 21, 21</li><li>得到最大值：21</li></ol><p>所以 P50 就是 21 ms，如果取前 90 % 元素，P90 就是 25 ms</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="尾部延迟">尾部延迟<a class="hash-link" href="#尾部延迟" title="标题的直接链接">​</a></h2><p>尾部延迟是百分位谱最末端的延迟。一般系统对 99% 的请求的响应都很快，但是对于剩下的 1% 可能非常差。
<img loading="lazy" src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202210071.png" class="img_ev3q">
对于一个每分钟接受数百万请求的系统来说，这 1% 就不是微不足道了</p><p>2013 年 Google 发表的论文介绍了一些解决方法</p><ul><li>Hedged requests</li><li>Tied requests</li><li>Micro partitions</li><li>Selective replication</li><li>Latency-induced probation</li><li>Good enough responses</li><li>Canary requests</li></ul><p>P99 = 140ms P95 = 70ms</p><p>剩下的 5% 请求占了总请求一半的延迟</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对冲请求">对冲请求<a class="hash-link" href="#对冲请求" title="标题的直接链接">​</a></h2><p>如果请求的时长超过 P95 还没有结果，那么就重发</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="模拟尾部延迟">模拟尾部延迟<a class="hash-link" href="#模拟尾部延迟" title="标题的直接链接">​</a></h2><p>下面的代码模拟了有 %4 的请求会等待 100ms</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"math/rand"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/gorilla/mux"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    router </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> mux</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewRouter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    router</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">HandleFunc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/ishealthy"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rd </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> rand</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">New</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">UnixNano</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        requestPercentile </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> rd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Intn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        waitTime </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> requestPercentile </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">96</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            waitTime </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Duration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">waitTime</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Millisecond</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        w</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">WriteHeader</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">StatusOK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        w</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token function" style="color:#d73a49">byte</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Healthy"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Methods</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">MethodGet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ListenAndServe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">":8080"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> router</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202241384.png" class="img_ev3q">
从图中可以看到</p><ul><li>p50 小于 20ms</li><li>p95 20ms 左右</li><li>p99 超过 115ms</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对重测试">对重测试<a class="hash-link" href="#对重测试" title="标题的直接链接">​</a></h2><p>新增两个接口</p><ul><li><code>/falout</code>：对于每个请求都转发出 3 个副本。应该能到达 P99 性能。但会发出 3 倍以上的请求。</li><li><code>/hedged</code>：在第一个未达到预期 P95 (21ms) 之后触发对冲请求。应该在 40 毫秒左右将尾部性能提高到 P99。最多只能多发出 5%
的请求。</li></ul><p><strong>falout</strong></p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">queryFanOut</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">urls </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ch </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">chan</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">urls</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> urls </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ch </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">executeQuery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain">ch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248476.png" class="img_ev3q"></p><p><strong>hedged</strong></p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">queryWithHedgedRequests</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">urls </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ch </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">chan</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">urls</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> urls </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> c </span><span class="token keyword" style="color:#00009f">chan</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            c </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">executeQuery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ch</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">select</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain">ch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">After</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">21</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Millisecond</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;-</span><span class="token plain">ch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248260.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a class="hash-link" href="#结论" title="标题的直接链接">​</a></h2><p>仅用几行代码，我们就可以大幅改善尾部延迟。在将其用作生产系统之前，该示例还有很多需要改进的地方，但核心实现与此没有太大区别。
该技术针对一个非常具体的问题，在用于实际生产应用之前应进行彻底分析。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[查询引擎：推送与拉取]]></title>
        <id>/2022/04/01/[译] search_engine</id>
        <link href="https://trdthg.github.io/blog/2022/04/01/[译] search_engine"/>
        <updated>2022-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Query Engines: Push vs. Pull]]></summary>
        <content type="html"><![CDATA[<p><a href="http://justinjaffray.com/query-engines-push-vs.-pull/" target="_blank" rel="noopener noreferrer">Query Engines: Push vs. Pull</a></p><p>考虑以下的 SQL 语句</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">DISTINCT</span><span class="token plain"> customer_first_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> customer_balance </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询优化器通常将这样的 SQL 查询编译成一系列离散运算符：
<img loading="lazy" src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202254060.png" class="img_ev3q"></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Distinct</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;- Map(customer_first_name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;- Select(customer_balance &gt; 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;- customer</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在基于 Pull 的系统中，消费者 <code>customers</code> 驱动系统。每个运算符运算后都会产生一个新行：用户将向根节点（Distinct）请求一行，这一行回向
Map 询问一行，接着向 Select 询问一行，依此类推。</p><p>在基于 Push 的系统中，生产者 <code>producers</code> 驱动系统。每个运算符，当他接收到数据时，就会告知下游的运算符，<code>customer</code>
作为查询基表回告诉 Select 自己的信息，接着是 Map、Distinct。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pull-based-查询引擎">Pull-Based 查询引擎<a class="hash-link" href="#pull-based-查询引擎" title="标题的直接链接">​</a></h3><p>基于拉取的查询引擎一般也被称为使用 Volcano 或 Iterator 模型。这是最古老和最著名的查询执行模型，并以 1994 年标准化其约定的论文命名。</p><p>首先我们有一个关系，我们通过 Scan 把它专为一个迭代器</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> customer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"justin"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"sissel"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"justin"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"smudge"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"smudge"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Scan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">coll</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> x </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> coll</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接下来为他实现一些操作符</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">p</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> x </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">p</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token known-class-name class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">f</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> x </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Distinct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> seen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> x </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">seen</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">has</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      seen</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>翻译我们的查询语句</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">DISTINCT</span><span class="token plain"> customer_first_name </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> customer </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> customer_balance </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function maybe-class-name" style="color:#d73a49">Distinct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token known-class-name class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">firstName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function maybe-class-name" style="color:#d73a49">Select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balance</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Scan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">customer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="push-based-查询引擎">Push-Based 查询引擎<a class="hash-link" href="#push-based-查询引擎" title="标题的直接链接">​</a></h2><p>基于推送的查询引擎，有时也称为 Reactive、Observer、Stream 或回调地狱模型，如您所料，与我们之前的示例类似，但它颠覆了它。让我们从定义
Scan 开始</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> customer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"justin"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"sissel"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"justin"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"smudge"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">firstName</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"smudge"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">balance</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Scan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">relation</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> relation</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">out</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们将“此运算符告诉下游运算符”构建为它需要调用的闭包。</p><p>剩下的运算符也是如此</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">p</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">p</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">out</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token known-class-name class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">f</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">out</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Distinct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> seen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">seen</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">has</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      seen</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">out</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查询语句建模：</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function maybe-class-name" style="color:#d73a49">Scan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  customer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function maybe-class-name" style="color:#d73a49">Select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">balance</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token known-class-name class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">firstName</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function maybe-class-name" style="color:#d73a49">Distinct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="区别">区别<a class="hash-link" href="#区别" title="标题的直接链接">​</a></h2><p>在基于 Pull 的系统中，所有的操作符都是惰性的，只有当数据需要时，操作符才会开始计算（yield）。这也意味着系统的行为和用户的行为紧密耦合。</p><p>再基于 Push 的系统中，系统开始处于空闲状态，直到他接受到一行数据。因此系统的工作和消费者是解耦的。</p><p>基于 Push 的系统还需要创建一个缓冲区，并将查询结果放到里面。这就是基于 Push 的系统给人的感觉。它会假设消费者不存在，当被请求时，能够立即作出响应。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dag-yo">DAG, yo<a class="hash-link" href="#dag-yo" title="标题的直接链接">​</a></h2><p>SQL 中有一个 With 结构，它允许在查询中多次引用同一个结果集：</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">WITH</span><span class="token plain"> foo </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">some</span><span class="token plain"> complex query</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> foo </span><span class="token keyword" style="color:#00009f">WHERE</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> foo1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">JOIN</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foo </span><span class="token keyword" style="color:#00009f">AS</span><span class="token plain"> foo2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">ON</span><span class="token plain"> foo1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> foo2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>基于 Push 的系统能够优化查询结构，复用结果集，而基于 Pull 的系统无法做到这一点。</p>]]></content>
    </entry>
</feed>