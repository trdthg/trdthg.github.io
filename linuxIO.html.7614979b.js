import{e as n}from"./app.d8e13d20.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="io-\u591A\u8DEF\u590D\u7528" tabindex="-1"><a class="header-anchor" href="#io-\u591A\u8DEF\u590D\u7528" aria-hidden="true">#</a> IO \u591A\u8DEF\u590D\u7528</h1><h2 id="rust-\u4F7F\u7528-epoll" tabindex="-1"><a class="header-anchor" href="#rust-\u4F7F\u7528-epoll" aria-hidden="true">#</a> Rust \u4F7F\u7528 Epoll</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">,</span>
    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">net<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">TcpListener</span><span class="token punctuation">,</span> <span class="token class-name">TcpStream</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">os<span class="token punctuation">::</span>unix<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AsRawFd</span><span class="token punctuation">,</span> <span class="token class-name">RawFd</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[allow(unused_macros)]</span>
<span class="token macro property">macro_rules!</span> syscall <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token variable">$fn</span><span class="token punctuation">:</span> <span class="token function">ident</span> <span class="token punctuation">(</span> $<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">:</span> expr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token variable">$fn</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">last_os_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">HTTP_RESP</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b&quot;HTTP/1.1 200 OK
content-type: text/html
content-length: 5

Hello&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">READ_FLAGS</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLONESHOT</span> <span class="token operator">|</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLIN</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">WRITE_FLAGS</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLONESHOT</span> <span class="token operator">|</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLOUT</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">RequestContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> stream<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> content_length<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> buf<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">RequestContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>stream<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            stream<span class="token punctuation">,</span>
            buf<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            content_length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">read_cb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> epoll_fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0u8</span><span class="token punctuation">;</span> <span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8FD9\u91CCstream\u5E94\u8BE5\u4E0D\u4F1A\u963B\u585E\uFF0C\u56E0\u4E3A\u6211\u4EEC\u662F\u5728\u88AB\u901A\u77E5\u540E\u624D\u8C03\u7528\u7684</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u5982\u679C\u8FD9\u6BB5\u6570\u636E\u662F\u5F00\u59CB\uFF0C\u5C31\u80FD\u8BBE\u7F6E Content-length.</span>
                    <span class="token comment">// \u5982\u679C\u662Fdata\u7684\u4E00\u90E8\u5206\uFF0C\u90A3\u5C31\u4EC0\u4E48\u4E5F\u4E0D\u505A\uFF0C\u5B89\u5FC3\u8BFB\u53D6\u5C31\u5B8C\u4E8B\u4E86</span>
                    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">parse_and_set_content_length</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">WouldBlock</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u628A\u4E34\u65F6\u7F13\u51B2\u533A\u7684\u5185\u5BB9\u8FFD\u52A0\u5230\u7ED3\u6784\u4F53\u4E0A\u4E0B\u6587\u91CC</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">extend_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u5224\u65AD\u4EE5\u4E0B\u8BFB\u6CA1\u8BFB\u5B8C\uFF0C\u5982\u679C\u6CA1\u6709\u8BFB\u5B8C\uFF0C\u5C31\u91CD\u65B0\u6CE8\u518C\u4E3A\u8BFB\uFF0C\u4E0B\u6B21\u63A5\u7740\u8BFB\u3002\u5426\u5219\u6CE8\u518C\u4E3A\u5199\uFF0C\u7ED9\u5BA2\u6237\u7AEF\u56DE\u590D</span>
        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content_length <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;got all data: {} bytes&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">modify_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">listener_write_event</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;read not end: {} bytes&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">modify_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">listener_read_event</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">parse_and_set_content_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>content_length<span class="token punctuation">)</span> <span class="token operator">=</span> data
                <span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x<span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token string">&quot;content-length: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token operator">=</span> content_length
                    <span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">strip_prefix</span><span class="token punctuation">(</span><span class="token string">&quot;content-length: &quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">self</span><span class="token punctuation">.</span>content_length <span class="token operator">=</span> len<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;content-length is valid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;set content length: {} bytes&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\u6CA1\u8BFB\u5230 Content-Length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\u4E0D\u662FHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">write_cb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> epoll_fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">HTTP_RESP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;answered from request {}&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;could not answer to request {}, {}&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">Shutdown</span><span class="token punctuation">::</span><span class="token class-name">Both</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> fd <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">remove_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;\u7ED1\u5B9A\u7AEF\u53E3\u5931\u8D25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BBE\u7F6E\u4E3A\u975E\u963B\u585E\u6A21\u5F0F</span>
    <span class="token comment">// \u5F53\u6211\u4EEC accept \u65F6\uFF0C\u5982\u679C socket \u6CA1\u6709\u51C6\u5907\u597D\uFF0C\u4F1A\u963B\u585E\u3002</span>
    <span class="token comment">// \u800C\u73B0\u5728\u4F1A\u76F4\u63A5\u8FD4\u56DE\u4E00\u4E2A io::ErrorKind::WouldBlock</span>
    listener
        <span class="token punctuation">.</span><span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;set non-block failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> listener_fd <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u521B\u5EFA\u4E00\u4E2Aepoll\uFF0C\u5E76\u8FD4\u56DE\u5B83\u7684fd</span>
    <span class="token comment">// \u6709\u4E86\u8FD9\u4E2Afd\uFF0C\u6211\u4EEC\u5C31\u80FD\u5BF9\u4E8B\u4EF6\u8FDB\u884C\u64CD\u4F5C\uFF0C\u5305\u62EC\u8BFB\u53D6\u3001\u6DFB\u52A0\u3001\u4FEE\u6539\u3001\u79FB\u9664\u3002</span>
    <span class="token keyword">let</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;\u521B\u5EFA epoll \u5931\u8D25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5411 epoll \u4E2D\u6CE8\u518C listener\uFF0C\u5E76\u8BBE\u7F6E\u6211\u4EEC\u611F\u5174\u8DA3\u7684\u4E8B\u4EF6\u662F\u8BFB</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> key <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">add_interst</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> listener_fd<span class="token punctuation">,</span> <span class="token function">listener_read_event</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// \u73B0\u5728\u6211\u4EEC\u6709\u4E86 epoll\uFF0C\u4E5F\u6CE8\u518C\u4E86\u4E8B\u4EF6\uFF0C\u4E0B\u4E00\u6B65\u5C31\u662F\u4E8B\u4EF6\u5FAA\u73AF</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> events<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> request_contexts<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">RequestContext</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        events<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// epoll_wait \u53D1\u751F\u963B\u585E\u7684\u6761\u4EF6\uFF1A</span>
        <span class="token comment">// - \u6709\u4E8B\u4EF6\u53D1\u751F</span>
        <span class="token comment">// - \u4FE1\u53F7\u628A\u5B83\u6253\u65AD</span>
        <span class="token comment">// - \u8D85\u65F6\u4E86</span>
        <span class="token comment">//      - \u6211\u4EEC\u53EF\u4EE5\u628A\u8D85\u65F6\u4E8B\u4EF6\u8BBE\u7F6E\u4E3A -1\uFF0C\u8FD9\u6837 epoll_wait \u4F1A\u4E00\u53EA\u963B\u585E\uFF0C\u76F4\u5230\u524D\u4E24\u79CD\u60C5\u51B5\u53D1\u751F</span>
        <span class="token comment">// \u5F53 epoll_wait \u8FD4\u56DE\u65F6\uFF0C\u5B83\u4F1A\u8FD4\u56DE\u4E8B\u4EF6\u7684\u6570\u91CF</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">epoll_wait</span><span class="token punctuation">(</span>
            epoll_fd<span class="token punctuation">,</span>
            events<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event<span class="token punctuation">,</span>
            <span class="token number">1024</span><span class="token punctuation">,</span>
            <span class="token number">1000</span> <span class="token keyword">as</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token comment">// \u8D85\u65F6\u65F6\u95F4\uFF0C\u6BEB\u79D2\u4E3A\u5355\u4F4D</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ok</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">,</span>
            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;\u5728\u7B49\u5F85 epoll \u65F6\u53D1\u751F\u9519\u8BEF\uFF1A{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// \u8BBE\u7F6E events \u7684\u5BB9\u91CF</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> events<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>res <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// \u5904\u7406\u8BF7\u6C42</span>
        <span class="token keyword">for</span> event <span class="token keyword">in</span> events<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u56E0\u4E3A\u6CA1\u6709fd\uFF0C\u6211\u4EEC\u9700\u8981\u901A\u8FC7 key \u53BB\u5224\u65AD\uFF0C\u8FD9\u4E2A\u4E8B\u4EF6\u662F\u90A3\u4E2A fd \u7684\u3002</span>
            <span class="token keyword">match</span> event<span class="token punctuation">.</span><span class="token keyword">u64</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u662F100\uFF0C\u5C31\u8BF4\u660E\u6211\u4EEC\u7684 server \u63A5\u6536\u5230\u4E86\u65B0\u7684\u8FDE\u63A5\u3002</span>
                <span class="token number">100</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">match</span> listener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            <span class="token comment">// \u5C06\u5BA2\u6237\u7AEF\u8BBE\u7F6E\u4E3A\u975E\u963B\u585E\u7684\uFF0C\u7ED9\u4ED6\u4E00\u4E2A key\uFF0C\u5E76\u6DFB\u52A0\u5230\u5230 epoll \u4E2D</span>
                            stream
                                <span class="token punctuation">.</span><span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;\u8FD9\u91CC\u5728\u6B64\u8BBE\u7F6E\u4E86 non-blocking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;new client: {}&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            key <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                            <span class="token function">add_interst</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> stream<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">listener_read_event</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;\u53D1\u751F\u4EC0\u4E48\u662F\u4E86\uFF0C\u5BA2\u6237\u7AEF\u88C2\u5F00\u4E86\uFF1F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">// \u8FD9\u91CC</span>
                            request_contexts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">RequestContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;couldn&#39;t accept: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// \u56E0\u4E3A\u6211\u4EEC\u4F7F\u7528\u7684\u662F ONESHORT \u4E8B\u4EF6\u76D1\u542C\u5668\uFF0C\u6240\u4EE5\u6211\u4EEC\u5FC5\u987B\u91CD\u65B0\u6CE8\u518C server</span>
                    <span class="token function">modify_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> listener_fd<span class="token punctuation">.</span><span class="token function">as_raw_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">listener_read_event</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;\u91CD\u7F6E server \u5931\u8D25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u5982\u679C\u4E0D\u662F key \u4E0D\u662F 100\uFF0C\u90A3\u5C31\u662F\u5176\u4ED6\u7684\u5BA2\u6237\u7AEF\u8FDE\u63A5\u3002</span>
                key <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u7528 hashmap \u53BB\u5339\u914D\u662F\u90A3\u4E2A\u8FDE\u63A5</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span> request_contexts<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">let</span> events <span class="token operator">=</span> event<span class="token punctuation">.</span>events<span class="token punctuation">;</span>
                        <span class="token keyword">match</span> events <span class="token punctuation">{</span>
                            <span class="token comment">// \u5982\u679C\u53EF\u8BFB\uFF0C\u5C31\u53BB\u8BFB\uFF0C\u5982\u679C\u6CA1\u8BFB\u5B8C\uFF0C\u5C31\u91CD\u65B0\u6CE8\u518C\u8BFB\uFF0C\u8BFB\u5B8C\u4E86\u5C06\u5174\u8DA3\u70B9\u6539\u4E3A\u5199</span>
                            v <span class="token keyword">if</span> v <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token operator">&amp;</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLIN</span> <span class="token operator">==</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLIN</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                <span class="token comment">// \u8BFB\u53D6\u6570\u636E</span>
                                context<span class="token punctuation">.</span><span class="token function">read_cb</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> epoll_fd<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token comment">// \u8FD4\u56DE\u6570\u636E\uFF0Cclose(fd), shutdown(stream), remove_interest(epoll_fd, fd)</span>
                            v <span class="token keyword">if</span> v <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token operator">&amp;</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLOUT</span> <span class="token operator">==</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLLOUT</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                context<span class="token punctuation">.</span><span class="token function">write_cb</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> epoll_fd<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
                                <span class="token comment">// \u540C\u65F6\u79FB\u51FA hashmap</span>
                                request_contexts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            v <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;unexpected events: {}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/// \u5411 epoll \u4E2D\u4F20\u5165\u4E00\u4E2A\u611F\u5174\u8DA3\u7684\u8FDE\u63A5</span>
<span class="token comment">///</span>
<span class="token comment">/// epoll_fd: epoll\u7684fd</span>
<span class="token comment">/// fd\uFF1A\u5C06\u8981\u88ABepoll\u7BA1\u7406\u7684fd</span>
<span class="token comment">/// event\uFF1A\u88AB\u901A\u77E5\u4E8B\u4EF6\u7C7B\u578B\u3002</span>
<span class="token comment">///</span>
<span class="token comment">/// \u5F53fd\u4E0A\u6709\u4E8B\u4EF6\u53D1\u751F\u65F6\uFF0C\u6BD4\u5982\u8BFB\u6216\u8005\u662F\u5199\uFF0C\u8FD9\u4E2A\u4E8B\u4EF6\u53D1\u751F\u540Eepoll\u5C31\u4F1A\u901A\u77E5\u6211\u4EEC\uFF0C\u5E76\u5C06fd\u4ECEepoll\u4E2D\u5220\u9664</span>
<span class="token comment">/// \u56E0\u6B64\u5982\u679C\u6211\u4EEC\u9700\u8981\u7EE7\u7EED\u8BFB\u53D6\uFF0C\u6211\u4EEC\u9700\u8981\u91CD\u65B0\u6CE8\u518C\u8FD9\u4E2Afd</span>
<span class="token keyword">fn</span> <span class="token function-definition function">add_interst</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">,</span> fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> event<span class="token punctuation">:</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLL_CTL_ADD</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">modify_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">,</span> fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> event<span class="token punctuation">:</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6539\u7528 EPOLL_CTL_MOD \u6807\u5FD7\uFF0C\u56E0\u4E3A\u4E4B\u524D\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u8FC7</span>
    <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLL_CTL_MOD</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">remove_interest</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">,</span> fd<span class="token punctuation">:</span> <span class="token class-name">RawFd</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6539\u7528 EPOLL_CTL_MOD \u6807\u5FD7\uFF0C\u56E0\u4E3A\u4E4B\u524D\u5DF2\u7ECF\u88AB\u6DFB\u52A0\u8FC7</span>
    <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">epoll_ctl</span><span class="token punctuation">(</span>
        epoll_fd<span class="token punctuation">,</span>
        <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">EPOLL_CTL_DEL</span><span class="token punctuation">,</span>
        fd<span class="token punctuation">,</span>
        <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/// \u751F\u6210\u4E00\u4E2A\u4E8B\u4EF6\u7C7B\u578B</span>
<span class="token comment">///</span>
<span class="token comment">/// key \u662F\u6211\u4EEC\u4E3A\u8BE5\u4E8B\u4EF6\u8BBE\u7F6E\u7684 id</span>
<span class="token comment">///</span>
<span class="token comment">/// \u5BF9\u4E8Elistener\uFF0C\u6211\u4EEC\u53EA\u5BF9\u8BFB\u4E8B\u4EF6\u611F\u5174\u8DA3\uFF0C\u56E0\u6B64\u8FD9\u91CC\u53EA\u6709 READ_FLAG</span>
<span class="token keyword">fn</span> <span class="token function-definition function">listener_read_event</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event <span class="token punctuation">{</span>
    <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event <span class="token punctuation">{</span>
        events<span class="token punctuation">:</span> <span class="token constant">READ_FLAGS</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
        <span class="token keyword">u64</span><span class="token punctuation">:</span> key<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">listener_write_event</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event <span class="token punctuation">{</span>
    <span class="token namespace">libc<span class="token punctuation">::</span></span>epoll_event <span class="token punctuation">{</span>
        events<span class="token punctuation">:</span> <span class="token constant">WRITE_FLAGS</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
        <span class="token keyword">u64</span><span class="token punctuation">:</span> key<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">epoll_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">RawFd</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> fd <span class="token operator">=</span> <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">epoll_create1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">F_GETFD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token macro property">syscall!</span><span class="token punctuation">(</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">F_SETFD</span><span class="token punctuation">,</span> flags <span class="token operator">|</span> <span class="token namespace">libc<span class="token punctuation">::</span></span><span class="token constant">FD_CLOEXEC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">test</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[test]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">dbg!</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br></div></div><h2 id="\u5176\u4ED6" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a> \u5176\u4ED6</h2><h3 id="errno-h" tabindex="-1"><a class="header-anchor" href="#errno-h" aria-hidden="true">#</a> errno.h</h3><h4 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> \u5B9A\u4E49</h4><p>\u8BE5\u5934\u6587\u4EF6\u5B9A\u4E49\u4E86\u4E00\u4E2Aint\u7C7B\u578B\u7684\u5DE6\u503C\uFF0Cerrno\uFF0C\u5305\u542B\u4E86\u4EFB\u4F55\u51FD\u6570\u4F7F\u7528errno\u529F\u80FD\u65F6\u4F1A\u4EA7\u751F\u7684\u9519\u8BEF\u7801</p><ul><li>EINTR\uFF1A \u8868\u793A\u88AB\u4E2D\u65AD\u7684\u7CFB\u7EDF\u8C03\u7528</li></ul><h4 id="\u4FEE\u6539errno\u7684\u503C" tabindex="-1"><a class="header-anchor" href="#\u4FEE\u6539errno\u7684\u503C" aria-hidden="true">#</a> \u4FEE\u6539errno\u7684\u503C</h4><p>errno\u7684\u9ED8\u8BA4\u503C\u4E3A0, \u5F53 \u8C03\u7528\u7CFB\u7EDF\u8C03\u7528\u65F6\uFF0C\u53EF\u80FD\u4F1A\u63A5\u53D7\u5230\u67D0\u4E2A\u4FE1\u53F7\u5BFC\u81F4\u8C03\u7528\u9000\u51FA\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u9519\u8BEF\u7801\uFF0C\u5E76\u4FEE\u6539errno\u7684\u503C\uFF0C\u53EF\u4EE5\u901A\u8FC7errno\u5224\u65AD\u7CFB\u7EDF\u8C03\u7528\u662F\u5426\u5931\u8D25\uFF0C</p><h4 id="\u9519\u8BEF\u7801\u5BF9\u4E0D\u540C\u51FD\u6570\u6709\u4E0D\u540C\u610F\u4E49" tabindex="-1"><a class="header-anchor" href="#\u9519\u8BEF\u7801\u5BF9\u4E0D\u540C\u51FD\u6570\u6709\u4E0D\u540C\u610F\u4E49" aria-hidden="true">#</a> \u9519\u8BEF\u7801\u5BF9\u4E0D\u540C\u51FD\u6570\u6709\u4E0D\u540C\u610F\u4E49</h4><ul><li><p>write: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\uFF0C\u6CA1\u5199\u6210\u529F\u4EFB\u4F55\u6570\u636E\u3002</p><blockquote><p>The call was interrupted by a signal before any data was written.</p></blockquote></li><li><p>read: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\uFF0C\u6CA1\u8BFB\u5230\u4EFB\u4F55\u6570\u636E\u3002</p><blockquote><p>The call was interrupted by a signal before any data was read.</p></blockquote></li><li><p>sem_wait: \u51FD\u6570\u8C03\u7528\u88AB\u4FE1\u53F7\u5904\u7406\u51FD\u6570\u4E2D\u65AD</p><blockquote><p>The call was interrupted by a signal handler.</p></blockquote></li><li><p>recv: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\u8FD4\u56DE\uFF0C\u6CA1\u6709\u4EFB\u4F55\u6570\u636E\u53EF\u7528\u3002</p><blockquote><p>function was interrupted by a signal that was caught, before any data was available.</p></blockquote></li></ul><h4 id="\u5982\u4F55\u5E94\u5BF9" tabindex="-1"><a class="header-anchor" href="#\u5982\u4F55\u5E94\u5BF9" aria-hidden="true">#</a> \u5982\u4F55\u5E94\u5BF9</h4><p>\u5F53\u78B0\u5230EINTR\u9519\u8BEF\u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u91C7\u53D6\u6709\u4E00\u4E9B\u53EF\u4EE5\u91CD\u542F\u7684\u7CFB\u7EDF\u8C03\u7528\u8981\u8FDB\u884C\u91CD\u542F\uFF0C\u800C\u5BF9\u4E8E\u6709\u4E00\u4E9B\u7CFB\u7EDF\u8C03\u7528\u662F\u4E0D\u80FD\u591F\u91CD\u542F\u7684\u3002\u4F8B\u5982\uFF1Aaccept\u3001read\u3001write\u3001select\u3001\u548Copen\u4E4B\u7C7B\u7684\u51FD\u6570\u6765\u8BF4\uFF0C\u662F\u53EF\u4EE5\u8FDB\u884C\u91CD\u542F\u7684\u3002\u4E0D\u8FC7\u5BF9\u4E8E\u5957\u63A5\u5B57\u7F16\u7A0B\u4E2D\u7684connect\u51FD\u6570\u6211\u4EEC\u662F\u4E0D\u80FD\u91CD\u542F\u7684\uFF0C\u82E5connect\u51FD\u6570\u8FD4\u56DE\u4E00\u4E2AEINTR\u9519\u8BEF\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u4E0D\u80FD\u518D\u6B21\u8C03\u7528\u5B83\uFF0C\u5426\u5219\u5C06\u7ACB\u5373\u8FD4\u56DE\u4E00\u4E2A\u9519\u8BEF\u3002\u9488\u5BF9connect\u4E0D\u80FD\u91CD\u542F\u7684\u5904\u7406\u65B9\u6CD5\u662F\uFF0C\u5FC5\u987B\u8C03\u7528select\u6765\u7B49\u5F85\u8FDE\u63A5\u5B8C\u6210\u3002</p><p>\u7CFB\u7EDF\u4E2D\u65AD\u4E0D\u4E00\u5B9A\u88AB\u5F53\u4F5C\u9519\u8BEF</p><ul><li><p>\u5982\u679C\u9519\u8BEF\u7801\u4E3AEINTR\u5219 <strong>\u91CD\u65B0\u8C03\u7528\u7CFB\u7EDF\u8C03\u7528</strong> ,\u4F8B\u5982Postgresql\u4E2D\u6709\u4E00\u6BB5\u4EE3\u7801:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>retry1<span class="token operator">:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>port<span class="token operator">-&gt;</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SSLok<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> retry1<span class="token punctuation">;</span> <span class="token comment">/* if interrupted, just retry */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>\u91CD\u65B0\u5B9A\u4E49\u7CFB\u7EDF\u8C03\u7528</strong>,\u5FFD\u7565\u9519\u8BEF\u7801\u4E3AEINTR\u7684\u60C5\u51B5.\u4F8B\u5982,Cherokee\u4E2D\u7684\u4E00\u6BB5\u4EE3\u7801:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cherokee_stat</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> re<span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
     re <span class="token operator">=</span> <span class="token function">stat</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>re <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> re<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h4 id="\u5982\u4F55\u4FDD\u8BC1\u7EBF-\u8FDB\u7A0B\u5B89\u5168" tabindex="-1"><a class="header-anchor" href="#\u5982\u4F55\u4FDD\u8BC1\u7EBF-\u8FDB\u7A0B\u5B89\u5168" aria-hidden="true">#</a> \u5982\u4F55\u4FDD\u8BC1\u7EBF/\u8FDB\u7A0B\u5B89\u5168</h4><blockquote><p>\u4E00\u822C\u800C\u8A00\uFF0C\u7F16\u8BD1\u5668\u4F1A\u81EA\u52A8\u4FDD\u8BC1 errno \u7684\u5B89\u5168\u6027\uFF0C\u4F46\u662F\u4E3A\u4E86\u59A5\u5584\u671F\u95F4\uFF0C\u6211\u4EEC\u5E0C\u671B\u5728\u5199 makefile \u7684\u65F6 \u5019\u628A _LIBC_REENTRANT \u5B8F\u5B9A\u4E49\uFF0C\u6BD4 \u5982\u6211\u4EEC\u5728\u68C0\u67E5 &lt;bits/errno.h&gt; \u6587\u4EF6\u4E2D\u53D1\u73B0\u5982\u4E0B\u7684\u5B9A\u4E49\uFF1A</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifndef</span> <span class="token expression">__ASSEMBLER__</span></span>
<span class="token comment">/* Function to get address of global \`errno&#39; variable. */</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">__errno_location</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__const__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>defined _LIBC <span class="token operator">||</span> defined _LIBC_REENTRANT</span></span>
<span class="token comment">/* When using threads, errno is a per-thread value. */</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">errno</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">__errno_location</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span> <span class="token comment">/* !__ASSEMBLER__ */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* _ERRNO_H */</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5728\u6CA1\u6709\u5B9A\u4E49 __LIBC \u6216\u8005\u5B9A\u4E49 _LIBC_REENTRANT \u7684\u65F6\u5019\uFF0C errno \u662F\u591A\u7EBF\u7A0B / \u8FDB\u7A0B\u5B89\u5168\u7684\u3002 \u4E00\u822C\u800C\u8A00\uFF0C <strong>ASSEMBLER</strong>, _LIBC \u548C _LIBC_REENTRANT \u90FD\u4E0D\u4F1A\u88AB\u7F16\u8BD1\u5668\u5B9A\u4E49\uFF0C\u4F46\u662F\u5982\u679C\u6211\u4EEC\u5B9A\u4E49 _LIBC_REENTRANT \u4E00\u6B21\u53C8\u4F55\u59A8\u90A3\uFF1F \u4E3A\u4E86\u68C0\u6D4B\u4E00\u4E0B\u4F60\u7F16\u8BD1\u5668\u662F\u5426\u5B9A\u4E49\u4E0A\u8FF0\u53D8\u91CF\uFF0C\u4E0D\u59A8\u4F7F\u7528\u4E0B\u9762\u4E00\u4E2A\u7B80\u5355\u7A0B\u5E8F\u3002</p></blockquote><p>\u5E0C\u671B\u8BFB\u8005\u5728\u8FDB\u884C\u79FB\u690D\u7684\u65F6\u5019\uFF0C\u8BFB\u4E00\u4E0B\u76F8\u5173\u7684 unix \u7248\u672C\u7684 &lt;bits/errno.h&gt; \u6587 \u4EF6\uFF0C\u6765\u786E\u5B9A\u5E94\u8BE5\u5B9A\u4E49\u4EC0\u4E48\u5B8F\u3002\u4E0D\u540C\u7684 unix \u7248\u672C\u53EF\u80FD\u5B58\u5728\u7740\u4E00\u4E9B\u5C0F\u7684\u5DEE\u522B\uFF01</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ASSEMBLER__</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine __ASSEMBLER__\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define __ASSEMBLER__\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LIBC</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine __LIBC\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define __LIBC\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_LIBC_REENTRANT</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine _LIBC_REENTRANT\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define _LIBC_REENTRANT\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u53C2\u8003\uFF1Ahttps://blog.csdn.net/hnlyyk/article/details/51444617</p>`,23);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
