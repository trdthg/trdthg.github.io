import{d as n}from"./app.87bd0483.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u6811" tabindex="-1"><a class="header-anchor" href="#\u6811" aria-hidden="true">#</a> \u6811</h1><h2 id="\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> \u4E8C\u53C9\u641C\u7D22\u6811</h2><h3 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> init<span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Tree<span class="token punctuation">;</span>

Node<span class="token operator">*</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">-&gt;</span> left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">-&gt;</span> right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">-&gt;</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Tree<span class="token operator">*</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    p<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u904D\u5386" aria-hidden="true">#</a> \u904D\u5386</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token keyword">void</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">levalorderTraversal</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> tree<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// i\u8BB0\u5F55\u5DF2\u7ECF\u52A0\u5165\u7684\u5143\u7D20\u6570, j\u8BB0\u5F55\u6700\u540E\u8F93\u51FA\u7684\u8282\u70B9</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \u8BB0\u5F55\u5B9E\u9645\u5143\u7D20\u4E2A\u6570</span>
    Node<span class="token operator">*</span> nodes<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> node <span class="token operator">=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d  &quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        size <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            size <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            size <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="crud" tabindex="-1"><a class="header-anchor" href="#crud" aria-hidden="true">#</a> CRUD</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>


Node<span class="token operator">*</span> <span class="token function">add</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> current <span class="token operator">=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span>
    tree<span class="token operator">-&gt;</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>init <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parent <span class="token operator">=</span> current<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;=</span> current<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


Node<span class="token operator">*</span> <span class="token function">findMax</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">findMax</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


Node<span class="token operator">*</span> <span class="token function">findMin</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">findMax</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>data <span class="token operator">==</span> data<span class="token punctuation">)</span> <span class="token keyword">return</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">,</span> Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token comment">// if (node == root &amp;&amp; data == root-&gt;data) {</span>
    <span class="token comment">//     return 0;</span>
    <span class="token comment">// }</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;=</span> parent<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">else</span> parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&gt;</span> parent<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span> <span class="token keyword">else</span> parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> parent<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span> <span class="token keyword">else</span> parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> innerparent <span class="token operator">=</span> node<span class="token punctuation">;</span>
            Node<span class="token operator">*</span> innernode <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>innernode<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                innerparent <span class="token operator">=</span> innernode<span class="token punctuation">;</span>
                innernode <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> innernode<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>innerparent <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> innernode<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                innerparent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> node<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br></div></div><h3 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> tree <span class="token operator">=</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">levalorderTraversal</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max: %d min: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">findMax</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token function">findMin</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;find 3: %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;delete: %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="avl\u6811-\u81EA\u5E73\u8861\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#avl\u6811-\u81EA\u5E73\u8861\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> AVL\u6811(\u81EA\u5E73\u8861\u4E8C\u53C9\u641C\u7D22\u6811)</h2><h3 id="\u521D\u59CB\u5316-1" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316-1" aria-hidden="true">#</a> \u521D\u59CB\u5316</h3><p>\u540C\u4E8C\u53C9\u641C\u7D22\u6811, \u53EA\u662F\u591A\u4E86\u4E00\u4E2Aheight\u5C5E\u6027</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Tree<span class="token operator">*</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    p<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Node<span class="token operator">*</span> <span class="token function">addCheck</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>init <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">removeChect</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>init <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">removeNode</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="\u65CB\u8F6C" tabindex="-1"><a class="header-anchor" href="#\u65CB\u8F6C" aria-hidden="true">#</a> \u65CB\u8F6C</h3><ol><li>\u53F3\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> res <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>\u5DE6\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> res <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// res-&gt;height = getHeight(res);</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">\u6CE8\u610F</p><p>\u5148\u65CB\u7684\u8282\u70B9\u662Fnode\u7684\u5B50\u8282\u70B9, \u4E0D\u662Fnode\u672C\u8EAB</p></div><ol start="3"><li>\u5148\u5DE6\u540E\u53F3</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="4"><li>\u5148\u53F3\u540E\u5DE6</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add</h3><p><strong>\u6CE8\u610F\u4E8B\u9879</strong></p><ol><li>\u76F8\u5BF9\u4E8E\u666E\u901A\u7684\u4E8C\u53C9\u641C\u7D22\u6811, AVL\u6811\u8981\u8BB0\u5F55\u5E76\u66F4\u65B0height, \u5FC5\u987B\u7528\u9012\u5F52\u624D\u80FD\u5728\u6DFB\u52A0\u8282\u70B9\u540E\u91CD\u56DE\u8001\u8DEF, \u66F4\u65B0\u8D70\u8FC7\u7684\u7684\u8282\u70B9</li><li>\u5728\u5224\u65AD\u662F\u5426\u5E73\u8861\u65F6\u9700\u8981\u786E\u4FDDheight\u53CA\u65F6\u88AB\u66F4\u65B0</li><li>\u5224\u65AD\u65CB\u8F6C\u65B9\u5F0F\u7684\u6761\u4EF6</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">add</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>right  <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove</h3><p><strong>\u6CE8\u610F\u4E8B\u9879</strong><br> 4. \u6CE8\u610F\u65CB\u8F6C\u6761\u4EF6</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">reHeightRight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>value <span class="token operator">=</span> newNode<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span>
            node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> newNode<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="\u5DE5\u5177\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u65B9\u6CD5" aria-hidden="true">#</a> \u5DE5\u5177\u65B9\u6CD5</h3><ol><li>getHeight</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> hl<span class="token punctuation">,</span> hr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hl <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        hr <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>hl<span class="token punctuation">,</span> hr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="2"><li>reHeight<br> \u914D\u5408remove\u4F7F\u7528, \u4FDD\u8BC1\u5F53\u6709\u4E24\u4E2A\u5B50\u8282\u70B9\u7684node\u88ABremove\u540E, node.right\u7684min\u88AB\u5220\u9664\u540E, node.right\u7684height\u88AB\u66F4\u65B0</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">reHeightRight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">reHeightRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li>getBalanceFactor<br> \u83B7\u53D6\u5E73\u8861\u56E0\u5B50</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u83B7\u53D6\u5E73\u8861\u56E0\u5B50(\u5DE6\u5B50\u6811-\u53F3\u5B50\u6811, \u6CE8\u610F\u4FDD\u7559\u8D1F\u53F7)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="\u5DF2\u77E5\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u5DF2\u77E5\u95EE\u9898" aria-hidden="true">#</a> \u5DF2\u77E5\u95EE\u9898</h3><ol><li>\u65CB\u8F6C\u6761\u4EF6\u6709\u5F85\u786E\u8BA4</li><li>\u5F53\u6839\u8282\u70B9\u88AB\u65CB\u8F6C\u65F6, tree.root\u65E0\u6CD5\u53CA\u65F6\u66F4\u65B0<br> \u5DF2\u89E3\u51B3: remove\u65B9\u6CD5\u591A\u4F20\u4E00\u4E2ATree* tree, \u5224\u65ADnode==tree-&gt;root, \u5982\u679C\u662F,\u5219tree-&gt;root = temp</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getBalanceFactor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="\u7EA2\u9ED1\u6811" tabindex="-1"><a class="header-anchor" href="#\u7EA2\u9ED1\u6811" aria-hidden="true">#</a> \u7EA2\u9ED1\u6811</h2><div class="custom-container tip"><p class="custom-container-title">\u5EFA\u8BAE</p><p>\u4E0D\u5EFA\u8BAE\u7528\u9012\u5F52, \u5EFA\u8BAE\u7528while\u5FAA\u73AF\u5B9E\u73B0, \u4E0D\u662F\u987A\u5E8F\u56DE\u9000, \u800C\u662F\u8DF3\u8FDE\u7684</p></div><p><img src="https://rbtree.phpisfuture.com/" alt="\u7EA2\u9ED1\u6811\u5728\u7EBF\u6F14\u793A"></p><h3 id="\u7B2C\u4E8C\u7248" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E8C\u7248" aria-hidden="true">#</a> \u7B2C\u4E8C\u7248</h3><h3 id="\u521D\u59CB\u5316-2" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316-2" aria-hidden="true">#</a> \u521D\u59CB\u5316</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">int</span> color<span class="token punctuation">;</span> <span class="token comment">// \u7EA2\u4E3A1, \u9ED1\u4E3A0</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> init<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Tree<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s &quot;</span><span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> node<span class="token operator">-&gt;</span>color <span class="token operator">?</span> <span class="token string">&quot;r&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Node<span class="token operator">*</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Tree<span class="token operator">*</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    p<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="\u65CB\u8F6C-1" tabindex="-1"><a class="header-anchor" href="#\u65CB\u8F6C-1" aria-hidden="true">#</a> \u65CB\u8F6C</h3><div class="custom-container tip"><p class="custom-container-title">\u6CE8\u610F</p><p>\u5DE6/\u53F3\u65CB\u4E0E\u53D8\u8272\u662F\u5206\u5F00\u7684, \u8FD9\u91CC\u53EA\u6709\u65CB\u8F6C, \u53D8\u8272\u9700\u8981\u5728\u8C03\u7528\u524D\u5B9E\u73B0 \u5DE6\u53F3/\u53F3\u5DE6\u65CB\u7684\u7B2C\u4E00\u6B21\u4E0D\u9700\u8981\u53D8\u8272, \u7B2C\u4E8C\u6B21\u65CB\u8F6C\u524D\u7684\u53D8\u8272\u5DF2\u7ECF\u5D4C\u5165\u4E24\u6B21\u65CB\u8F6C\u4E4B\u95F4</p></div><ol><li>\u53F3\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> res <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> res<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        res<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> 
            node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> res<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token comment">// if (node == tree-&gt;root) {</span>
    <span class="token comment">//     tree-&gt;root = res;</span>
    <span class="token comment">// }</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ol start="2"><li>\u5DE6\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> res <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> res<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
        res<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
    res<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>   
    res<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> 
            node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> res<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token comment">// if (node == tree-&gt;root) {</span>
    <span class="token comment">//     tree-&gt;root = res;</span>
    <span class="token comment">// }</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ol start="3"><li>\u5DE6\u53F3\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
    <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="4"><li>\u53F3\u5DE6\u65CB</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
    node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
    <span class="token function">LeftRotation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="add-1" tabindex="-1"><a class="header-anchor" href="#add-1" aria-hidden="true">#</a> add</h3><p>\u8FD9\u91CC\u53EA\u9700\u8981\u627E\u5230\u6B63\u786E\u7684\u4F4D\u7F6E\u63D2\u5165\u5373\u53EF, fixUp()\u4F20\u5165\u7684\u662F\u65B0\u63D2\u5165\u7684node</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">put</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNode<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span> newNode<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 1.\u6DFB\u52A0\u65B0\u8282\u70B9</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">putCheck</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>init <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>color <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">fixUp</span><span class="token punctuation">(</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="remove-1" tabindex="-1"><a class="header-anchor" href="#remove-1" aria-hidden="true">#</a> remove</h4><p>\u5220\u9664\u8F83\u4E3A\u590D\u6742, \u8FD9\u91CC\u5148\u628A\u4EE3\u7801\u4E00\u8282\u4E24\u534A, \u4EE5\u4E0B\u4E3A\u6587\u5B57\u53D9\u8FF0:</p><ol><li>while\u5FAA\u73AF\u76EE\u7684\u662F\u627E\u5230\u8981\u5220\u9664\u7684\u70B9</li></ol><h4 id="\u7B2C\u4E00\u90E8\u5206-\u82E5\u6709\u4E24\u4E2A\u5B50\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E00\u90E8\u5206-\u82E5\u6709\u4E24\u4E2A\u5B50\u8282\u70B9" aria-hidden="true">#</a> \u7B2C\u4E00\u90E8\u5206, \u82E5\u6709\u4E24\u4E2A\u5B50\u8282\u70B9</h4><ol><li>\u628A\u70B9\u8FDB\u884C\u5BF9\u63A5, \u4E00\u5171\u53EF\u4EE5\u62C6\u5206\u4E3A4\u5757</li><li>\u82E5\u88AB\u5220\u9664\u7684\u70B9\u662F\u9ED1\u8272\u5219\u8FDBfixUp(), \u4F20\u5165\u7684\u662F\u88AB\u5220\u53BB\u8282\u70B9\u7684\u53F3\u5B50\u6811\u7684\u6700\u5C0F\u8282\u70B9\u53F3\u8282\u70B9</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">removes</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// \u8FD9\u4E2Aparent\u662F\u6307replace\u7684parent</span>
    Node<span class="token operator">*</span> child <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> replace <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> color<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u627E\u5230\u4E86\u90A3\u4E2A\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u4E24\u4E2A\u5B50\u8282\u70B9\u90FD\u4E0D\u4E3A\u7A7A</span>
            <span class="token comment">/*
            *\u5171\u6709\u56DB\u6B21\u5BF9\u63A5\u8FC7\u7A0B
            * 1. replace(\u79FB\u52A8\u540E)\u548C replace.father
            * 2. replace(\u79FB\u52A8\u524D).right \u548C replace.father
            * 3. replace(\u79FB\u52A8\u540E) \u548C node.right
            * 4. replace(\u79FB\u52A8\u524D) \u548C node.left
            */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                replace <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>replace<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    replace <span class="token operator">=</span> replace<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 1.1 </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> 
                child <span class="token operator">=</span> replace<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                parent <span class="token operator">=</span> replace<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
                color <span class="token operator">=</span> replace<span class="token operator">-&gt;</span>color<span class="token punctuation">;</span>
                <span class="token comment">// 2.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u88AB\u66FF\u6362\u7684\u8282\u70B9\u7684\u5144\u5F1F\u8282\u70B9\u8981\u88AB\u63A5\u5230replace.parent\u4E0A</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>child<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span>
                    parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> child<span class="token punctuation">;</span>
                    <span class="token comment">// 3.</span>
                    replace<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
                    node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 1.2</span>
                replace<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
                replace<span class="token operator">-&gt;</span>color <span class="token operator">=</span> node<span class="token operator">-&gt;</span>color<span class="token punctuation">;</span>
                <span class="token comment">// 4.</span>
                replace<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
                node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> replace<span class="token punctuation">;</span>
                
                <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> black<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">fixUp</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">fixUp</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><h4 id="\u7B2C\u4E8C\u90E8\u5206-\u82E5\u6700\u591A\u6709\u4E00\u4E2A\u5B50\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E8C\u90E8\u5206-\u82E5\u6700\u591A\u6709\u4E00\u4E2A\u5B50\u8282\u70B9" aria-hidden="true">#</a> \u7B2C\u4E8C\u90E8\u5206, \u82E5\u6700\u591A\u6709\u4E00\u4E2A\u5B50\u8282\u70B9</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>            <span class="token comment">// \u83B7\u53D6node\u7684\u5B50\u8282\u70B9</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                child <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                child<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
            color <span class="token operator">=</span> node<span class="token operator">-&gt;</span>color<span class="token punctuation">;</span>
            <span class="token comment">// node.\u5B50\u8282\u70B9\u8981\u88AB\u63A5\u5230node.parent\u4E0A</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>left <span class="token operator">=</span> child<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>right <span class="token operator">=</span> child<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u7279\u6B8A\u5904\u7406\u82E5\u53BB\u6389\u7684\u8282\u70B9\u662F\u6839\u8282\u70B9</span>
                tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> child<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u82E5\u679C\u5220\u53BB\u7684\u70B9\u662F\u9ED1\u8272\u7684, \u9700\u8981\u4FEE\u590D</span>
            node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">fixUp</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">fixUp</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u7EE7\u7EED\u627E\u5230\u8981\u53BB\u9664\u7684\u70B9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="fixup" tabindex="-1"><a class="header-anchor" href="#fixup" aria-hidden="true">#</a> fixUp</h3><p>\u8FD9\u91CC\u662F\u6838\u5FC3: \u6CE8\u610F\u56DE\u9000\u7684\u8DF3\u8DC3\u6027</p><ol><li>\u82E5\u53EA\u662F\u53D8\u8272, \u5219node = grandparent</li><li>\u82E5\u53EA\u662F\u5DE6\u65CB\u6216\u53F3\u65CB, \u5219node = parent</li><li>\u82E5\u662F\u5DE6\u53F3\u65CB\u6216\u53F3\u5DE6\u65CB, \u5219node = grandparent</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">fixUp</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> grandparent<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> uncle<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>parent<span class="token operator">-&gt;</span>color <span class="token operator">==</span> red<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
        grandparent <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grandparent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> grandparent<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            uncle <span class="token operator">=</span> grandparent<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            uncle <span class="token operator">=</span> grandparent<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uncle <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> uncle<span class="token operator">-&gt;</span>color <span class="token operator">==</span> red<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            uncle<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
            parent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
            grandparent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
            node <span class="token operator">=</span> grandparent<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>uncle <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> uncle<span class="token operator">-&gt;</span>color <span class="token operator">==</span> black<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>grandparent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
                    grandparent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
                    <span class="token function">RightRotation</span><span class="token punctuation">(</span>grandparent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>grandparent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>left <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>grandparent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    parent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
                    grandparent<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
                    <span class="token function">RightRotation</span><span class="token punctuation">(</span>grandparent<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="\u6D4B\u8BD5\u6837\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u6D4B\u8BD5\u6837\u4F8B" aria-hidden="true">#</a> \u6D4B\u8BD5\u6837\u4F8B</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> tree <span class="token operator">=</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.\u5355\u53F3\u65CB</span>
    <span class="token comment">// putCheck(tree, 10);</span>
    <span class="token comment">// putCheck(tree, 5);</span>
    <span class="token comment">// 2.\u5DE6\u53F3\u65CB</span>
    <span class="token comment">// putCheck(tree, 5); putCheck(tree, 11);</span>
    <span class="token comment">// 3.\u53F3\u5DE6\u65CB</span>
    <span class="token comment">// putCheck(tree, 30);</span>
    <span class="token comment">// putCheck(tree, 25);</span>
    <span class="token comment">// 4.\u7EA2\u7EA2</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. \u6682\u65F6\u5C31\u8FD9\u6837\u4E86, \u660E\u5929\u518D\u8BF4</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6. \u8D1F\u8F7D\u6D4B\u8BD5</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putCheck</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5220\u9664</span>
    <span class="token function">removeChect</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><img src="https://www.cnblogs.com/skywang12345/p/3624343.html" alt="\u53C2\u8003\u6587\u7AE0"></p><h3 id="\u5931\u8D25\u7684\u5199\u4E86\u4E00\u534A\u7B2C\u4E00\u7248" tabindex="-1"><a class="header-anchor" href="#\u5931\u8D25\u7684\u5199\u4E86\u4E00\u534A\u7B2C\u4E00\u7248" aria-hidden="true">#</a> \u5931\u8D25\u7684\u5199\u4E86\u4E00\u534A\u7B2C\u4E00\u7248</h3><h4 id="\u521D\u59CB\u5316-3" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316-3" aria-hidden="true">#</a> \u521D\u59CB\u5316</h4><ol><li>\u76F8\u6BD4\u4E8EAVL\u6811, \u7EA2\u9ED1\u6811\u4E0D\u518D\u5F3A\u8C03\u9AD8\u5EA6, \u8F6C\u4E3A\u7531\u7EA2\u9ED1\u5224\u65AD\u662F\u5426\u65CB\u8F6C\u6216\u53D8\u8272</li><li>\u56E0\u4E3A\u9AD8\u5EA6\u4E0D\u7528\u6539\u53D8, \u6240\u4EE5\u7528while\u5FAA\u73AF\u4EE3\u66FF\u9012\u5F52\u4F1A\u66F4\u597D\u66F4\u5BB9\u6613</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token keyword">int</span> color<span class="token punctuation">;</span> <span class="token comment">// \u7EA2\u4E3A1, \u9ED1\u4E3A0</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Node<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Tree</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> init<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Tree<span class="token punctuation">;</span>

Node<span class="token operator">*</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Tree<span class="token operator">*</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Tree<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Tree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    p<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="add-2" tabindex="-1"><a class="header-anchor" href="#add-2" aria-hidden="true">#</a> add</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">add</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5224\u65AD\u662F\u5426\u9012\u5F52\u5230nil, \u5E76\u521B\u5EFA\u65B0\u8282\u70B9</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">initNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u{1F448}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5224\u65AD\u662F\u5426\u53D1\u751F\u65CB\u8F6C, \u82E5\u679C\u65CB\u8F6C\u4E86\u5219\u9012\u5F52\u7684node\u4E0EnewNode\u7236\u5B50\u5173\u7CFB\u4F1A\u53D1\u751F\u6539\u53D8, \u8981\u5224\u65AD\u5E76\u53CA\u65F6\u7EE7\u7EED\u56DE\u9000, \u77E5\u9053\u7236\u5B50\u5173\u7CFB\u6B63\u5E38</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode <span class="token operator">==</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u82E5\u7236\u5B50\u5173\u7CFB\u6B63\u5E38, \u5219\u7EA0\u6B63\u7236\u5B50\u5173\u7CFB, \u597D\u50CF\u53EA\u5728\u65B0\u5EFA\u65B0\u5B50\u8282\u70B9\u65F6\u771F\u6B63\u53D1\u6325\u4F5C\u7528, \u5F85\u8BC1\u5B9E,</span>
        <span class="token comment">// \u7528\u9012\u5F52\u5199\u771F\u96BE\u53D7</span>
        newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token comment">// \u5224\u65AD\u662F\u5426\u9700\u8981\u65CB\u8F6C\u6216\u53D8\u8272</span>
        <span class="token comment">// \u7236\u8282\u70B9\u4E3A\u7EA2\u8272 </span>
        <span class="token comment">// node-&gt;parent != tree-&gt;root \u8FD9\u4E2A\u5F85\u5927\u91CF\u6D4B\u8BD5</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>color <span class="token operator">!=</span> black <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> tree<span class="token operator">-&gt;</span>root  <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>parent <span class="token operator">!=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">reNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> leftdirctction<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5982\u679C\u53EA\u6362\u989C\u8272\u5219\u7ED3\u6784\u6CA1\u6709\u8C03\u6574, \u6309\u6B63\u5E38\u9012\u5F52\u8D70</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span>
            <span class="token comment">// \u5224\u65AD\u6839\u662F\u5426\u88AB\u8F6C\u8D70\u4E86</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token operator">-&gt;</span>right <span class="token operator">==</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                newNode<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
                tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u53EA\u8981\u8FDB\u4E86\u8239, \u5C31\u4E0D\u8D70\u5BFB\u5E38\u8DEF</span>
                <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u{1F449}</span>
        Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode <span class="token operator">==</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>parent <span class="token operator">==</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> node<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>color <span class="token operator">!=</span> black <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">reNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rightdirctction<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span> 
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token operator">-&gt;</span>right <span class="token operator">==</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                newNode<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                newNode<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
                tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>



Node<span class="token operator">*</span> <span class="token function">addCheck</span><span class="token punctuation">(</span>Tree<span class="token operator">*</span> tree<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>init <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tree<span class="token operator">-&gt;</span>init <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        tree<span class="token operator">-&gt;</span>root<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
        <span class="token keyword">return</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root<span class="token punctuation">,</span> value<span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h4 id="renode" tabindex="-1"><a class="header-anchor" href="#renode" aria-hidden="true">#</a> reNode</h4><p>\u7528\u4E8E\u65CB\u8F6C\u6216\u53D8\u8272, \u914D\u5408\u56FE\u7247\u914C\u60C5\u89C2\u770B(\uFF1E\uFE4F\uFF1C)</p><ol><li>\u5355\u65CB\u7684\u60C5\u51B5</li></ol><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>Node<span class="token operator">*</span> <span class="token function">reNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> isleftdirection<span class="token punctuation">,</span> Tree<span class="token operator">*</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// \u58F0\u660E\u8FD4\u56DE\u503C</span>
    <span class="token comment">// \u627E\u5230\u9700\u8981\u7528\u5F97\u5230\u7684\u8282\u70B9, father(node) \u548C gradfather</span>
    Node<span class="token operator">*</span> grandfather <span class="token operator">=</span> node<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> brother <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// isleft \u7236\u8282\u70B9\u662F\u4E0D\u662F\u7237\u8282\u70B9\u7684\u5DE6\u652F, isleftdirection \u5B50\u8282\u70B9\u662F\u4E0D\u662F\u7236\u8282\u70B9\u7684\u5DE6\u652F</span>
    <span class="token keyword">int</span> isleft <span class="token operator">=</span> node<span class="token operator">-&gt;</span>value <span class="token operator">&lt;</span> grandfather<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isleft<span class="token punctuation">)</span> brother <span class="token operator">=</span> grandfather<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span> <span class="token keyword">else</span> brother <span class="token operator">=</span> grandfather<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>
    <span class="token comment">// \u82E5\u5144\u5F1F\u8282\u70B9\u4E3A\u7EA2\u8272\u5219\u53EA\u6362\u989C\u8272</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>brother <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> brother<span class="token operator">-&gt;</span>color <span class="token operator">==</span> red<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        brother<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
        node<span class="token operator">-&gt;</span>color <span class="token operator">=</span> black<span class="token punctuation">;</span>
        grandfather<span class="token operator">-&gt;</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u82E5\u7237\u8282\u70B9\u548C\u7236\u8282\u70B9\u5747\u4E3A\u7EA2\u8272, \u9700\u8981\u628A\u5F53\u524D\u8282\u70B9\u8BBE\u4E3A\u7237\u8282\u70B9, \u8FD9\u91CC\u7528while\u5FAA\u73AF\u4F1A\u65B9\u4FBF\u5F97\u591A, \u5728\u6B64\u5904\u6682\u65F6\u53EA\u5904\u7406\u7236\u8282\u70B9\u548C\u7237\u8282\u70B9\u540C\u4E3A\u7EA2\u8272, \u5982\u679C\u518D\u6709\u66F4\u9AD8\u8F88\u7684\u8282\u70B9, \u8FD9\u91CC\u4E0D\u5199\u4E86</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grandfather<span class="token operator">-&gt;</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grandfather<span class="token operator">-&gt;</span>color <span class="token operator">==</span> red<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            grandfather <span class="token operator">=</span> grandfather<span class="token operator">-&gt;</span>parent<span class="token punctuation">;</span>
            <span class="token comment">// \u5355\u65CB\u5C31\u884C</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isleft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isleftdirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5DE6\u5DE6 \u53F3\u65CB</span>
                    res <span class="token operator">=</span> <span class="token function">RightRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// \u5DE6\u53F3 \u5DE6\u53F3\u65CB</span>
                    res <span class="token operator">=</span> <span class="token function">LeftRightRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isleftdirection<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u53F3\u53F3 \u5DE6\u65CB</span>
                    res <span class="token operator">=</span> <span class="token function">RightLeftRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u53F3\u5DE6 \u53F3\u5DE6\u65CB</span>
                    res <span class="token operator">=</span> <span class="token function">LeftRotation</span><span class="token punctuation">(</span>grandfather<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="\u5F85\u7EED" tabindex="-1"><a class="header-anchor" href="#\u5F85\u7EED" aria-hidden="true">#</a> \u5F85\u7EED...</h2>`,86);function t(e,o){return p}var r=s(a,[["render",t]]);export{r as default};
