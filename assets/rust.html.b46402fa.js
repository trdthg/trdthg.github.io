import{r as p,o as t,c as e,a as n,b as o,F as c,d as s,e as l}from"./app.ee4b3cc2.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=s(`<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><h2 id="_1-\u751F\u547D\u5468\u671F" tabindex="-1"><a class="header-anchor" href="#_1-\u751F\u547D\u5468\u671F" aria-hidden="true">#</a> 1. \u751F\u547D\u5468\u671F</h2><h3 id="\u81EA\u52A8\u5904\u7406\u751F\u547D\u5468\u671F" tabindex="-1"><a class="header-anchor" href="#\u81EA\u52A8\u5904\u7406\u751F\u547D\u5468\u671F" aria-hidden="true">#</a> \u81EA\u52A8\u5904\u7406\u751F\u547D\u5468\u671F</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// Only one reference in input, so the output must be derived from that input</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">B</span><span class="token punctuation">;</span> <span class="token comment">// sugar for:</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">B</span><span class="token punctuation">;</span>

<span class="token comment">// Many inputs, assume they&#39;re all independent</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sugar for:</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;b</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;c</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;b</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;c</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Methods, assume all output lifetimes are derived from \`self\`</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">D</span><span class="token punctuation">;</span> <span class="token comment">// sugar for:</span>
<span class="token keyword">fn</span> <span class="token function-definition function">foo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;b</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">&#39;c</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;b</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;c</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">D</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2-\u667A\u80FD\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#_2-\u667A\u80FD\u6307\u9488" aria-hidden="true">#</a> 2. \u667A\u80FD\u6307\u9488</h2><h3 id="\u57FA\u672C\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u6982\u5FF5" aria-hidden="true">#</a> \u57FA\u672C\u6982\u5FF5</h3><p>\u5B9E\u73B0\u4E86Deref Trait \u548C Drop Trait\u7684\u5C31\u662F\u667A\u80FD\u6307\u9488</p><ol><li>Deref Trait: \u5177\u6709\u6307\u9488\u8BED\u4E49</li><li>Drop Trait\uFF1A\u62E5\u6709\u5185\u5B58\u81EA\u52A8\u7BA1\u7406\u7684\u673A\u5236</li></ol><p>\u770B\u4E00\u773CBox\u7684\u5B9E\u73B0</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[stable(feature = <span class="token string">&quot;rust1&quot;</span>, since = <span class="token string">&quot;1.0.0&quot;</span>)]</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token class-name">Allocator</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">self</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="\u7B80\u5355\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u5B9E\u73B0" aria-hidden="true">#</a> \u7B80\u5355\u5B9E\u73B0</h3><p>\u6211\u4EEC\u5B9E\u73B0\u4E00\u4E2A\u667A\u80FD\u6307\u9488\uFF08\u53EA\u5B9E\u73B0\u4E86Deref Trait\uFF09</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MySmartPointer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MySmartPointer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">MySmartPointer</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MySmartPointer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Target</span> <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u8C03\u7528*x \u5176\u5B9E\u5C31\u662F\u8C03\u7528 *x.deref()</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">MySmartPointer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="\u81EA\u52A8\u89E3\u5F15\u7528\u7684\u65F6\u673A" tabindex="-1"><a class="header-anchor" href="#\u81EA\u52A8\u89E3\u5F15\u7528\u7684\u65F6\u673A" aria-hidden="true">#</a> \u81EA\u52A8\u89E3\u5F15\u7528\u7684\u65F6\u673A</h3><ul><li><p>\u9047\u5230*\u8FD0\u7B97\u7B26\u81EA\u52A8\u63A5\u5F15\u7528</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>\u9047\u5230 . \u8FD0\u7B97\u7B26\u63A5\u5F15\u7528\u8C03\u7528\u65B9\u6CD5</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>\u53C2\u6570\u4F20\u9012\u81EA\u52A8\u89E3\u5F15\u7528</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">take_str</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">take_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[stable(feature = <span class="token string">&quot;rust1&quot;</span>, since = <span class="token string">&quot;1.0.0&quot;</span>)]</span>
<span class="token keyword">impl</span> <span class="token namespace">ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token keyword">str</span><span class="token punctuation">;</span>

    <span class="token attribute attr-name">#[inline]</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token keyword">str</span><span class="token punctuation">::</span><span class="token function">from_utf8_unchecked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>vec<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="\u81EA\u52A8\u7BA1\u7406\u5185\u5B58" tabindex="-1"><a class="header-anchor" href="#\u81EA\u52A8\u7BA1\u7406\u5185\u5B58" aria-hidden="true">#</a> \u81EA\u52A8\u7BA1\u7406\u5185\u5B58</h3><p>\u81EA\u52A8\u5316\u7BA1\u7406\u5185\u5B58(drop, \u4F5C\u7528\u57DF\u5916\u81EA\u52A8\u91CA\u653E\u5185\u5B58)</p><h2 id="_2-atomic\u5728rust\u4E2D\u7684\u5B9E\u8DF5" tabindex="-1"><a class="header-anchor" href="#_2-atomic\u5728rust\u4E2D\u7684\u5B9E\u8DF5" aria-hidden="true">#</a> 2. Atomic\u5728rust\u4E2D\u7684\u5B9E\u8DF5</h2>`,18),k={href:"https://www.youtube.com/watch?v=rMGWeSjctlY",target:"_blank",rel:"noopener noreferrer"},m=l("Crust of Rust: Atomics and Memory Ordering"),b=s(`<h3 id="\u4F7F\u7528atomic\u5B9E\u73B0\u7B80\u5355\u7684mutex" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528atomic\u5B9E\u73B0\u7B80\u5355\u7684mutex" aria-hidden="true">#</a> \u4F7F\u7528Atomic\u5B9E\u73B0\u7B80\u5355\u7684Mutex</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">sync<span class="token punctuation">::</span>atomic<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AtomicBool</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">,</span> <span class="token class-name">AtomicUsize</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> spawn<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">UnsafeCell</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">UNLOCKED</span><span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">LOCKED</span><span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    locked<span class="token punctuation">:</span> <span class="token class-name">AtomicBool</span><span class="token punctuation">,</span>
    v<span class="token punctuation">:</span> <span class="token class-name">UnsafeCell</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">unsafe</span> <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Sync</span> <span class="token keyword">for</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Send</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            locked<span class="token punctuation">:</span> <span class="token class-name">AtomicBool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token constant">UNLOCKED</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            v<span class="token punctuation">:</span> <span class="token class-name">UnsafeCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// \u66B4\u9732\u4E00\u4E2A\u53EF\u53D8\u5F15\u7528\u51FA\u53BB</span>
    <span class="token comment">///</span>
    <span class="token comment">/// \u5F53\u7EBF\u7A0BA\u548C\u7EBF\u7A0BB\u540C\u65F6\u6267\u884C\u65F6\uFF0CA\uFF0CB\u53EF\u80FD\u540C\u65F6\u62FF\u5230\u{1F513}\uFF0C\u5E76\u540C\u65F6\u4E0A\u9501\uFF0C\u8FD9\u4E24\u4E2A\u7EBF\u7A0B\u5E76\u6CA1\u6709\`\u770B\u5230\`\u5BF9\u65B9\u9875\u62FF\u5230\u4E86\u9501</span>
    <span class="token comment">/// \u6240\u4EE5\u5C31\u51FA\u5148\u4E86\uFF0C \u7EBF\u7A0BA\u548CB\u540C\u65F6\u4ECE\u5BC4\u5B58\u5668\u62FF\u5230\u503C1\uFF0C\u6539\u4E3A\u4E862, \u7136\u540E\u590D\u5236\u5230\u5BC4\u5B58\u5668\u5185\uFF0C\u540E\u4FEE\u6539\u7684\u4F1A\u8986\u76D6\u524D\u4E00\u6B21\u4FEE\u6539</span>
    <span class="token comment">/// \u4E3A\u4E86\u89E3\u51B3\u4E0A\u8FF0\u95EE\u9898\uFF0C\u4E0B\u9762\u662F\u4E00\u4E9B\u89E3\u51B3\u65B9\u6CD5</span>
    <span class="token comment">///</span>
    <span class="token comment">/// \u65B9\u68481, \u4F7F\u7528\`compare_exchange\`\u5408\u5E76\u52A0\u9501\u4E0A\u9501\u8FC7\u7A0B</span>
    <span class="token comment">/// while self.locked.compare_exchange(UNLOCKED, LOCKED, Ordering::Relaxed, Ordering::Relaxed).is_err() {}</span>
    <span class="token comment">///</span>
    <span class="token comment">/// #1 compare_exchange\u662F\u4F4E\u6548\u7684\uFF0C\u5982\u679C\u662F\u591A\u6838\u90FD\u5728\u540C\u65F6\u4E89\u593A\u9501\uFF0C8\u4E2A\u6838\u4E2D\u6709\u4E00\u4E2A\u548C\u5148\u62FF\u5230\u4E86\u9501</span>
    <span class="token comment">/// \u90A3\u4E48\u5269\u4E0B\u76847\u4E2A\u6838\u4F9D\u7136\u4F1A\u4E92\u76F8\u7ADE\u4E89\uFF0C\u8FD9\u4E2A\u53D8\u91CF\u7684\u5185\u5B58\u5C31\u4F1A\u5728\u591A\u4E2A\u6838\u4E2D\u4E0D\u65AD\u62F7\u8D1D</span>
    <span class="token comment">/// #2 \u76F8\u6BD4\u4E8Emutex\uFF0Cmutex\u62FF\u4E0D\u5230\u9501\u5C31\u4F1A\u963B\u585E\u7EBF\u7A0B\uFF0C\u800Ccompare_exchange\u62FF\u4E0D\u5230\u5C31\u4F1A\u8FD4\u56DE\u4E00\u4E2AErr</span>
    <span class="token comment">/// #3 rust\u4E2D\u8FD8\u63D0\u4F9B\u4E86compare_and_exchange_weak, \u6700\u5927\u7684\u533A\u522B\u662F</span>
    <span class="token comment">///     compare_and_exchange\u53EA\u5141\u8BB8\u5728\u5224\u65ADCurrent v alue\u548C\u4F20\u5165\u7684\u503C\u4E0D\u4E00\u6837\u65F6\u8FD4\u56DEErr</span>
    <span class="token comment">///     compare_and_exchange_weak\u5373\u4F7F\u5728\u4E00\u6837\u7684\u65F6\u5019\u4E5F\u53EF\u80FD\u4F1A\u8FD4\u56DEErr\uFF0C\u8FD9\u79CD\u7EC6\u5C0F\u7684\u5DEE\u522B\u80FD\u591F\u7528\u4E8E\u67D0\u4E9B\u573A\u666F\uFF0C\u8BA9\u6027\u80FD\u66F4\u597D</span>
    <span class="token comment">///     \u539F\u56E0\u662F\u7531\u4E8E\u5728\u4E0D\u540C\u5E73\u53F0\u4E0A\u7684\u5B9E\u73B0\u4E0D\u540C</span>
    <span class="token comment">///         x86: compare_and_swap</span>
    <span class="token comment">///         ARM: LDREX STREX</span>
    <span class="token comment">///     \u5728x86\u4E0Aweak\u4E0E\u666E\u901A\u7684\u76F8\u540C\uFF0C</span>
    <span class="token comment">///     \u5728ARM\u4E0A\uFF1A</span>
    <span class="token comment">///         compare_and_exchange: impl using a loop of LDREX and STREX</span>
    <span class="token comment">///         compare_and_exchange_weak: LDREX and STREX with no loop, it may be fake</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">with_lock</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u62FF\u{1F513} \u4E0A\u{1F513}</span>
        <span class="token comment">// while self.locked.load(Ordering::Relaxed) != UNLOCKED {}</span>
        <span class="token comment">// self.locked.store(LOCKED, Ordering::Relaxed);</span>

        <span class="token comment">// \u65B9\u68481</span>
        <span class="token comment">// while self.locked.compare_exchange(UNLOCKED, LOCKED, Ordering::Relaxed, Ordering::Relaxed).is_err() {}</span>

        <span class="token comment">// \u65B9\u68482 \u5728arm\u4E0B\u6709\u66F4\u597D\u7684\u6027\u80FD</span>
        <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">compare_exchange_weak</span><span class="token punctuation">(</span><span class="token constant">UNLOCKED</span><span class="token punctuation">,</span> <span class="token constant">LOCKED</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5047\u5982\u73B0\u5728current value\u5C31\u662FUNLOCKED\u72B6\u6001\uFF0C\u5DF2\u7ECF\u4FEE\u6539\u4E3ALOCKED\u72B6\u6001\uFF0C\u90A3\u4E48\u5C31\u5DF2\u7ECF\u62FF\u5230\u4E86\u6240\u6709\u6743</span>
            <span class="token comment">// \u52A0\u5165\u73B0\u5728\u8FD8\u6CA1\u6709\u4FEE\u6539\u5B8C\u6210\uFF0Ccurrent value\u4F9D\u7136\u662FUNLOCKED\u72B6\u6001\uFF0C\u5F53\u524D\u7EBF\u7A0B\u5C31\u4F1A\u5361\u4F4F\uFF0C\u76F4\u5230\u6709\u522B\u7684\u7EBF\u7A0B\u6210\u529F\u62FF\u5230\u4E86\u6240\u6709\u6743</span>
            <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">LOCKED</span> <span class="token punctuation">{</span>
                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">yield_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">yield_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u66B4\u9732\u6570\u636E</span>
        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">.</span>v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u89E3\u{1F513}</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token constant">UNLOCKED</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> l<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> handles<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1000</span> <span class="token punctuation">{</span>
                l<span class="token punctuation">.</span><span class="token function">with_lock</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
                    <span class="token operator">*</span>v <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8FD9\u91CC\u4F9D\u7136\u4F1A\u62A5\u9519</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">with_lock</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><h3 id="acquire\u4E0Erelease" tabindex="-1"><a class="header-anchor" href="#acquire\u4E0Erelease" aria-hidden="true">#</a> Acquire\u4E0ERelease</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// \u4F46\u662F\u5373\u4F7F\u7528\u4E86\u4E0A\u9762\u7684\u4E1C\u897F\u4E5F\u6709\u53EF\u80FD\u4F1A\u51FA\u95EE\u9898\uFF0C\u867D\u7136\u5728X86 64\u4F4D\u7CFB\u7EDF\u4E0A\u6CA1\u6709\u51FA\u73B0\u95EE\u9898\uFF0C\u8FD9\u662F\u56E0\u4E3A\u4ED6\u4E0D\u652F\u6301\uFF01\uFF0C\u4ED6\u53EA\u652F\u6301Seq\u7684\uFF0C\u4E0D\u8FC7\u8FD8\u662F\u8981\u8BF4\u660E\u95EE\u9898</span>
<span class="token comment">/// \u56E0\u4E3A\u4E0B\u9762\u5BF9\u53D8\u91CFv\u7684\u4FEE\u6539\u548C\u4E0A\u9501\u91CA\u653E\u9501\u7684\u8FC7\u7A0B\u6BEB\u4E0D\u76F8\u5173\uFF0C</span>
<span class="token comment">/// \u6240\u4EE5\u4E0B\u4E00\u884C\u53EF\u80FD\u88AB\u91CD\u65B0\u6392\u5217\u5728\u52A0\u9501\u4E4B\u524D\uFF0C\u6216\u8005\u89E3\u9501\u4E4B\u540E\uFF0C\u8FD9\u4E24\u79CD\u90FD\u662F\u4E0D\u5141\u8BB8\u7684\uFF0C\u4F46\u662Fcpu\u548C\u7F16\u8BD1\u5668\u5C31\u53EF\u80FD\u8FD9\u6837\u505A</span>
<span class="token comment">///</span>
<span class="token comment">/// \u5BF9\u6B64\u9700\u8981\u4F7F\u7528Acquire \u548C Release</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">with_lock2</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4EFB\u4F55\u4E4B\u540E\u7684\u8BFB\u5199\u64CD\u4F5C\u4E0D\u4F1A\u88AB\u91CD\u6392\u5230Acquire\u4E4B\u524D</span>
    <span class="token comment">// \u522B\u7684\u7EBF\u7A0B\u4E2D\u7684\u5199\u64CD\u4F5C\uFF0C\u5BF9\u4E8E\u8FD9\u91CC\u7684Acquire\u90FD\u662F\u53EF\u89C1\u7684</span>
    <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">compare_exchange_weak</span><span class="token punctuation">(</span><span class="token constant">UNLOCKED</span><span class="token punctuation">,</span> <span class="token constant">LOCKED</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">LOCKED</span> <span class="token punctuation">{</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">yield_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">yield_now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">.</span>v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u4EFB\u4F55\u4E4B\u524D\u7684\u8BFB\u5199\u64CD\u4F5C\u4E0D\u4F1A\u88AB\u91CD\u6392\u5230Release\u4E4B\u540E</span>
    <span class="token comment">// \u8FD9\u4E2A\u7EBF\u7A0B\u91CC\u7684\u6240\u6709\u5199\u64CD\u4F5C\u5BF9\u522B\u7684\u7EBF\u7A0B\u4E2D\u7684Acquire\u90FD\u662F\u53EF\u89C1\u7684</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>locked<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token constant">UNLOCKED</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="\u5FC5\u9700\u7528seq\u7684\u573A\u666F" tabindex="-1"><a class="header-anchor" href="#\u5FC5\u9700\u7528seq\u7684\u573A\u666F" aria-hidden="true">#</a> \u5FC5\u9700\u7528Seq\u7684\u573A\u666F</h3><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">seq_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fetch_add always succeed</span>

    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicBool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicBool</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> z<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicUsize</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// \uFF01\uFF01\uFF01</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ty <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        y<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token operator">!</span>x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> y<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            z<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token operator">!</span>y<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                    <span class="token comment">// \u8FD9\u884C\u548C\u4E0B\u9762\u4E00\u884C\u53EF\u80FD\u91CD\u6392(\u6216\u8005\u8BF4\u4E0D\u662F\u91CD\u6392\uFF0C\u5355\u7EAF\u65F6\u53EF\u89C1\u6027\u7684\u95EE\u9898\uFF0C\u4E0B\u9762\u7684x\u5C31\u662F\u770B\u5230\u4E86x\u662Ffalse)</span>
        <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">// \uFF01\uFF01\uFF01 x\u4E3Afalse\uFF0C\u5F53x\u88AB\u4FEE\u6539\u4E3Atrue\u540E\uFF0C\u4E5F\u4E0D\u4F1A\u53D1\u751F\u6539\u53D8</span>
            z<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> z<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// What are the possibles for z?</span>
    <span class="token comment">// - is 0 possibly ?</span>
    <span class="token comment">//   \u7ECF\u8FC7\u5224\u65AD\uFF0C\u81F3\u5C11\u6709\u4E0B\u9762\u7684\u6761\u4EF6</span>
    <span class="token comment">//     t1 must run after tx</span>
    <span class="token comment">//     t2 must run after ty</span>
    <span class="token comment">//   \u51E0\u79CD\u6392\u5217\u7EC4\u5408\u5E94\u8BE5\u662F1\u62162,\u6CA1\u67090</span>
    <span class="token comment">//   \u4F46\u662F0\u8FD8\u662F\u53EF\u80FD\u7684\uFF0C</span>
    <span class="token comment">//           t2    t1,t2</span>
    <span class="token comment">//   MO(x)  false  true</span>
    <span class="token comment">//           t1    t1,t2</span>
    <span class="token comment">//   MO(y)  false  true</span>
    <span class="token comment">// - is 1 possibly ?</span>
    <span class="token comment">//   Yes: tx -&gt; t1 -&gt; ty -&gt; t2</span>
    <span class="token comment">// - is 2 possibly ?</span>
    <span class="token comment">//   Yes: tx -&gt; ty -&gt; t1 -&gt; t2</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="_3-\u5E38\u7528-trait" tabindex="-1"><a class="header-anchor" href="#_3-\u5E38\u7528-trait" aria-hidden="true">#</a> 3. \u5E38\u7528 Trait</h2><h3 id="_3-1-read" tabindex="-1"><a class="header-anchor" href="#_3-1-read" aria-hidden="true">#</a> 3.1 Read</h3><p>Read Trait\u7684\u529F\u80FD\u662F\uFF1A\u4ECE\u6570\u636E\u6E90\u62C9\u53D6(Pull)\u4E00\u5B9A\u6570\u636E\u5230\u6307\u5B9A\u7684\u7F13\u51B2\u533A\uFF0C\u8FD4\u56DE\u8BFB\u53D6\u7684\u5B57\u8282\u6570\u3002</p><p><strong>\u5173\u4E8E\u963B\u585E\uFF1A</strong> read\u51FD\u6570\u4E0D\u4FDD\u8BC1Read\u662F\u5426\u4F1A\u5904\u4E8E\u963B\u585E\u72B6\u6001\uFF0C\u5982\u679C\u4E00\u4E2Aread\u8FC7\u7A0B\u963B\u585E\u4E86\u800C\u4E14\u7B49\u5F85\u5931\u8D25\uFF0C\u90A3\u4ED6\u5C31\u4F1A\u8FD4\u56DE\u4E00\u4E2A [<code>Err</code>] \u6807\u8BB0\u3002</p><p><strong>\u5173\u4E8E\u8FD4\u56DE\u503C\uFF1A</strong> \u5982\u679C<code>read()</code>\u8FD4\u56DE\u7684\u662F [<code>OK(n)</code>] , \u5B83\u7684\u5B9E\u73B0\u5C31\u5FC5\u987B\u4FDD\u8BC1<code>0 &lt;- n &lt; buf.len()</code>\u3002 \u5982\u679C<code>n == 0</code>\uFF0C\u90A3\u53EF\u80FD\u6709\u4E24\u79CD\u60C5\u51B5\uFF1A</p><ol><li>reader\u5DF2\u7ECF\u5230\u8FBE\u4E86<code>the end of file</code>\uFF0C\u800C\u4E14\u8FD9\u4E2A<code>file</code>\u53EF\u80FD\u4E0D\u4F1A\u5728\u4EA7\u751F\u65B0\u6570\u636E\u3002 \u6CE8\u610F\uFF0C\u8FD9\u91CC\u53EA\u662Flikely\uFF0C\u6BD4\u5982\uFF1A\u5728linux\u7CFB\u7EDF\u4E2D\uFF0Cread\u53EF\u80FD\u5BF9\u4E00\u4E2A [<code>TcpStream</code>] \u8C03\u7528\u4E86<code>recv</code>\u7CFB\u7EDF\u8C03\u7528\uFF0C0\u4EE3\u8868\u8FD9\u4E2A\u8FDE\u63A5\u5DF2\u7ECF\u88AB\u6210\u529F\u5173\u95ED\uFF0C\u5982\u679C\u662F\u5BF9 [<code>File</code>] , \u90A3\u5C31\u53EF\u80FD\u610F\u5473\u7740\u786E\u5B9E\u8BFB\u53D6\u5230\u4E86\u6587\u4EF6\u7684\u672B\u5C3E\uFF0C\u4F46\u662F\u5982\u679C\u6709\u66F4\u591A\u7684\u6570\u636E\u88AB\u8FFD\u52A0(append)\u5230\u6587\u4EF6\u672B\u5C3E\uFF0C\u90A3\u4E48\u672A\u6765\u7684read\u64CD\u4F5C\u4F9D\u7136\u80FD\u591F\u6B63\u5E38\u8FD4\u56DE\u88AB\u8FFD\u52A0\u7684\u6570\u636E</li><li>\u7F13\u51B2\u533A(buffer)\u5927\u5C0F\u786E\u5B9E\u5C31\u662F0</li></ol><p><code>n</code> \u53EA\u8981\u5C0F\u4E8E\u7F13\u51B2\u533A\u7684\u957F\u5EA6\u4E00\u822C\u5C31\u4E0D\u662F\u4E2A\u9519\u8BEF\uFF0C\u5373\u4F7F\u6587\u4EF6\u8FD8\u6CA1\u6709\u88AB\u8BFB\u53D6\u5B8C\uFF0C\u8FD9\u79CD\u60C5\u51B5\u53EF\u80FD\u4F1A\u53D1\u751F\u5728\uFF0C\u5F53\u524D\u53EA\u6709\u4E00\u90E8\u5206\u6570\u636E\u662F\u53EF\u7528\u7684\uFF0C\u6216\u8005\u662Fread\u64CD\u4F5C\u88AB\u4E00\u4E2A\u4FE1\u53F7\u6253\u65AD\u4E86</p><p><strong>\u5173\u4E8E\u5B89\u5168\u6027\uFF1A</strong></p><ul><li><p>\u56E0\u4E3A\u5B9E\u73B0\u8FD9\u4E2ATrait\u662F\u5B89\u5168\u7684\uFF0C\u8C03\u7528\u8005\u4E0D\u80FD\u7528 <code>n &lt; buf.len()</code> \u53BB\u786E\u4FDD\u5B89\u5168\uFF0C\u4F7F\u7528unsafe\u662F\u66F4\u8981\u5C0F\u5FC3\u786E\u4FDD\u8BF8\u5982\u8D8A\u754C\u95EE\u9898\u662F\u5426\u4F1A\u53D1\u751F\u3002</p></li><li><p>read\u4E0D\u4FDD\u8BC1buf\u91CC\u7684\u6570\u636E\u662F\u5BF9\u7684\uFF0C\u6240\u4EE5\u4E0D\u63A8\u8350\u8BFB\u53D6\u7F13\u51B2\u533A\u91CC\u7684\u6570\u636E\uFF0C\u53EA\u63A8\u8350\u5411\u7F13\u51B2\u533A\u91CC\u5199\u5165\u6570\u636E</p></li><li><p>\u76F8\u5E94\u7684\uFF0C\u8C03\u7528\u8005\u4E0D\u80FD\u6709\u4EFB\u4F55\u5047\u8BBE\uFF0C\u8FD9\u4E2Abuf\u4F1A\u88ABread\u600E\u4E48\u4F7F\u7528\uFF0Cread\u51FD\u6570\u4E5F\u53EF\u80FD\u4F1A\u4ECE\u4E2D\u8BFB\u53D6\u5185\u5BB9\u3002\u6240\u4EE5\u6211\u4EEC\u9700\u8981\u4FDD\u8BC1\u5728\u8C03\u7528read\u524D\uFF0C\u8FD9\u4E2Abuf\u5DF2\u7ECF\u88AB\u521D\u59CB\u5316\u8FC7\u4E86\uFF0C\u8C03\u7528\u6CA1\u6709\u88AB\u521D\u59CB\u5316\u7684buf\u662F\u4E0D\u5B89\u5168\u7684\uFF0C\u53EF\u80FD\u4F1A\u5BFC\u81F4\u672A\u5B9A\u4E49\u7684\u884C\u4E3A</p></li></ul><p>*<strong>\u5173\u4E8E\u9519\u8BEF\uFF1A</strong> \u5982\u679C\u9047\u5230\u4E86Error\uFF0C\u90A3\u5C31\u5FC5\u987B\u4FDD\u8BC1\u6CA1\u6709\u8BFB\u53D6\u8FC7\u4EFB\u4F55\u5B57\u8282\uFF0C\u5982\u679C\u9047\u5230\u4E86<code>ErrorKind::Interrupted</code>\uFF0C\u800C\u4E14\u4E0D\u80FD\u4F5C\u522B\u7684\u4E8B\u65F6, \u8BFB\u53D6\u8FC7\u7A0B\u5C31\u5FC5\u987B\u88AB\u56DE\u6EDA</p><p>\u4E0B\u9762\u662F\u4E00\u4E2A\u6765\u81EAdoc\u7684\u4F8B\u5B50</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// read up to 10 bytes</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The bytes: {:?}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_3-2-write" tabindex="-1"><a class="header-anchor" href="#_3-2-write" aria-hidden="true">#</a> 3.2 Write</h3><p>Write\u7684\u57FA\u672C\u529F\u80FD\u5C31\u662F\u5411writer\u4E2D\u5199\u5165\u4E00\u6BB5buf\uFF0C\u8FD4\u56DE\u5199\u5165\u7684\u5B57\u8282\u6570 <strong>\u5173\u4E8E\u963B\u585E\uFF1A</strong> write\u4F1A\u5C1D\u8BD5\u5411writer\u4E2D\u5199\u5165\u6574\u4E2Abuf\u91CC\u7684\u5185\u5BB9\uFF0C\u4F46\u662F\u5199\u5165\u53EF\u80FD\u4E0D\u6210\u529F\uFF0C\u6216\u8005\u5199\u5165\u65F6\u4EA7\u751F\u4E86\u4E00\u4E2A\u9519\u8BEF\uFF0C\u8C03\u7528\u4E00\u6B21write\u610F\u5473\u7740\u6700\u591A\u4E00\u6B21\u5C1D\u8BD5\u5199\u5165 write\u51FD\u6570\u540C\u6837\u4E0D\u4FDD\u8BC1Write\u662F\u5426\u5904\u4E8E\u963B\u585E\u72B6\u6001\u4EE5\u7B49\u5F85\u6570\u636E\u88AB\u5199\u5165\uFF0C\u5982\u679C\u4E00\u6B21\u5199\u5165\u963B\u585E\u4E86\uFF0C\u4ED6\u53EF\u80FD\u4F1A\u8FD4\u56DE\u4E00\u4E2A [<code>Err</code>]\u3002</p><p><strong>\u5173\u4E8E\u8FD4\u56DE\u503C\uFF1A</strong> \u5982\u679C<code>write()</code>\u8FD4\u56DE\u7684\u662F [<code>OK(n)</code>] , \u5B83\u7684\u5B9E\u73B0\u5C31\u5FC5\u987B\u4FDD\u8BC1<code>0 &lt;- n &lt; buf.len()</code>\u3002 \u5982\u679C<code>n == 0</code>\uFF0C\u90A3\u53EF\u80FD\u6709\u4E24\u79CD\u60C5\u51B5\uFF1A</p><ol><li>\u88AB\u5199\u5165\u7684\u4E1C\u897F\u5DF2\u7ECF\u4E0D\u4F1A\u63A5\u53D7\u65B0\u6570\u636E\u4E86\uFF0C\u4E4B\u540E\u4E5F\u4E0D\u4E00\u5B9A\u4F1A</li><li>\u7F13\u51B2\u533A(buffer)\u5927\u5C0F\u786E\u5B9E\u5C31\u662F0</li></ol><p><code>n</code> \u53EA\u8981\u5C0F\u4E8E\u7F13\u51B2\u533A\u7684\u957F\u5EA6\u4E00\u822C\u5C31\u4E0D\u662F\u4E2A\u9519\u8BEF\uFF0C\u5373\u4F7F\u6587\u4EF6\u8FD8\u6CA1\u6709\u88AB\u8BFB\u53D6\u5B8C\uFF0C\u8FD9\u79CD\u60C5\u51B5\u53EF\u80FD\u4F1A\u53D1\u751F\u5728\uFF0C\u5F53\u524D\u53EA\u6709\u4E00\u90E8\u5206\u6570\u636E\u662F\u53EF\u7528\u7684\uFF0C\u6216\u8005\u662Fread\u64CD\u4F5C\u88AB\u4E00\u4E2A\u4FE1\u53F7\u6253\u65AD\u4E86</p><p>*<strong>\u5173\u4E8E\u9519\u8BEF\uFF1A</strong> \u5982\u679C\u9047\u5230\u4E86Error\uFF0C\u90A3\u5C31\u5FC5\u987B\u4FDD\u8BC1\u6CA1\u6709\u4EFB\u4F55\u5B57\u8282\u88AB\u6210\u529F\u5199\u5165 \u8FD4\u56DE\u503C\u5C0F\u4E8Ebuf\u7684\u957F\u5EA6\u4E0D\u88AB\u5F53\u6210\u662F\u9519\u8BEF \u5982\u679C\u9047\u5230\u4E86<code>ErrorKind::Interrupted</code>\uFF0C\u800C\u4E14\u4E0D\u80FD\u4F5C\u522B\u7684\u4E8B\u65F6, \u5199\u5165\u8FC7\u7A0B\u5C31\u5FC5\u987B\u88AB\u56DE\u6EDA</p><p>\u540C\u6837\u662F\u5B98\u65B9\u7684demo</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// Writes some prefix of the byte string, not necessarily all of it.</span>
    buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">b&quot;some bytes&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-3-seek-bufreader-bufwriter" tabindex="-1"><a class="header-anchor" href="#_3-3-seek-bufreader-bufwriter" aria-hidden="true">#</a> 3.3 Seek &amp; BufReader &amp; BufWriter</h3><p>[<code>Read</code>]\u548C[<code>Write</code>]\u662F\u6700\u91CD\u8981\u7684\u4E24\u4E2ATrait\uFF0C\u9664\u6B64\u4E4B\u5916\u8FD8\u6709\u4E24\u4E2A\u91CD\u8981\u7684Trait[<code>Seek</code>]\u548C[<code>BufRead</code>], \u8FD9\u4E24\u4E2A\u90FD\u5EFA\u7ACB\u5728reader\u53EA\u4E0A\uFF0C\u7528\u6765\u63A7\u5236read\u7684\u8FC7\u7A0B\u3002</p><p>[<code>Seek</code>]\u8BA9\u4F60\u63A7\u5236\u4E0B\u4E00\u4E2A\u5B57\u8282\u5C06\u8981\u8BFB\u53D6\u7684\u6765\u81EA\u54EA\u91CC</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">SeekFrom</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// skip to the last 10 bytes of the file</span>
    f<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token class-name">SeekFrom</span><span class="token punctuation">::</span><span class="token class-name">End</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// read up to 10 bytes</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The bytes: {:?}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u57FA\u4E8Ebyte\u7684\u63A5\u53E3\u6027\u80FD\u4E0D\u4F73\uFF0C\u6240\u4EE5\u63D0\u4F9B\u4E86\u5F88\u591A\u57FA\u4E8Ebuffer\u7684\u63A5\u53E3 [<code>BufRead</code>]\u5C31\u63D0\u4F9B\u4E86\u66F4\u591ARead\u76F8\u5173\u7684API</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> reader <span class="token operator">=</span> <span class="token class-name">BufReader</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// read a line into buffer</span>
reader<span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>[<code>BufWriter</code>]\u6CA1\u6709\u63D0\u4F9B\u66F4\u591A\u5199\u5165\u7684\u65B9\u6CD5\uFF0C\u4ED6\u53EA\u662F\u7F13\u51B2\u4E86\u6BCF\u6B21\u8C03\u7528</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> writer <span class="token operator">=</span> <span class="token class-name">BufWriter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// write a byte to the buffer</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span> <span class="token comment">// the buffer is flushed once writer goes out of scope</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4-\u5176\u4ED6" tabindex="-1"><a class="header-anchor" href="#_4-\u5176\u4ED6" aria-hidden="true">#</a> 4. \u5176\u4ED6</h2><h3 id="_2-rc-arc" tabindex="-1"><a class="header-anchor" href="#_2-rc-arc" aria-hidden="true">#</a> 2. Rc &amp; Arc</h3><h4 id="\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u4ECB\u7ECD" aria-hidden="true">#</a> \u4ECB\u7ECD</h4><blockquote><p>The key to our design is the RefCell type. The heart of RefCell is a pair of methods:</p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">borrow</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">borrow_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">RefMut</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>Introducing inherited mutability roots to shared types Shared smart pointer types, including Rc and Arc, provide containers that can be cloned and shared between multiple parties. Because the contained values may be multiply-aliased, they can only be borrowed as shared references, not mutable references. Without cells it would be impossible to mutate data inside of shared boxes at all!</p></blockquote><blockquote><p>It&#39;s very common then to put a RefCell inside shared pointer types to reintroduce mutability:</p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> shared_map<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_map<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;africa&quot;</span><span class="token punctuation">,</span> <span class="token number">92388</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_map<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;kyoto&quot;</span><span class="token punctuation">,</span> <span class="token number">11837</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_map<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;piccadilly&quot;</span><span class="token punctuation">,</span> <span class="token number">11826</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_map<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;marbles&quot;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>Note that this example uses Rc and not Arc. RefCells are for single-threaded scenarios. Consider using Mutex if you need shared mutability in a multi-threaded situation</p></blockquote><h4 id="try-unwrap" tabindex="-1"><a class="header-anchor" href="#try-unwrap" aria-hidden="true">#</a> try_unwrap()</h4><blockquote><p>Get T from Rc&lt;T&gt; try to use <code>try_unwrap()</code>, which moves out the contents of an Rc if its refcount is 1</p></blockquote><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>unwrap on Result requires that you can debug-print the error case. RefCell only implements Debug if T does. Node doesn&#39;t implement Debug. try: Rc::try_unwrap(old_head).ok().unwrap().into_inner().elem</p></div><h3 id="_4-cell-refcell" tabindex="-1"><a class="header-anchor" href="#_4-cell-refcell" aria-hidden="true">#</a> 4. Cell &amp; RefCell</h3><blockquote><p>Shareable mutable containers.</p><p>Values of the Cell and RefCell types may be mutated through shared references (i.e. the common &amp;T type), whereas most Rust types can only be mutated through unique (&amp;mut T) references. We say that Cell and RefCell provide &#39;interior mutability&#39;, in contrast with typical Rust types that exhibit &#39;inherited mutability&#39;.</p><p>Cell types come in two flavors: Cell and RefCell. Cell provides get and set methods that change the interior value with a single method call. Cell though is only compatible with types that implement Copy. For other types, one must use the RefCell type, acquiring a write lock before mutating.</p><p>RefCell uses Rust&#39;s lifetimes to implement &#39;dynamic borrowing&#39;, a process whereby one can claim temporary, exclusive, mutable access to the inner value. Borrows for RefCells are tracked &#39;at runtime&#39;, unlike Rust&#39;s native reference types which are entirely tracked statically, at compile time. Because RefCell borrows are dynamic it is possible to attempt to borrow a value that is already mutably borrowed; when this happens it results in thread panic.</p></blockquote><h3 id="_5-ref-refmut" tabindex="-1"><a class="header-anchor" href="#_5-ref-refmut" aria-hidden="true">#</a> 5. Ref &amp; RefMut</h3><h4 id="ref-map" tabindex="-1"><a class="header-anchor" href="#ref-map" aria-hidden="true">#</a> Ref::map()</h4><ol><li>example1</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">U</span><span class="token operator">&gt;</span>
<span class="token comment">// Get Ref&lt;T&gt; from Ref&lt;Node&lt;T&gt;&gt;</span>
<span class="token comment">// my example</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">peek_front</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>node<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">Ref</span><span class="token punctuation">::</span><span class="token function">map</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>node<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">&amp;</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>example2</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// Makes a new Ref for a component of the borrowed data.</span>

<span class="token comment">// The RefCell is already immutably borrowed, so this cannot fail.</span>

<span class="token comment">// This is an associated function that needs to be used as Ref::map(...). A method would interfere with methods of the same name on the contents of a RefCell used through Deref.</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">RefCell</span><span class="token punctuation">,</span> <span class="token class-name">Ref</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b1<span class="token punctuation">:</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b2<span class="token punctuation">:</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Ref</span><span class="token punctuation">::</span><span class="token function">map</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>t<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">&amp;</span>t<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token operator">*</span>b2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,54);function d(f,y){const a=p("ExternalLinkIcon");return t(),e(c,null,[i,n("p",null,[n("a",k,[m,o(a)])]),b],64)}var g=u(r,[["render",d]]);export{g as default};
