import{e as n}from"./app.0374563d.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="print-\u5B8F\u8BE6\u89E3" tabindex="-1"><a class="header-anchor" href="#print-\u5B8F\u8BE6\u89E3" aria-hidden="true">#</a> <code>print!</code> \u5B8F\u8BE6\u89E3</h1><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_1-print-\u5B8F" tabindex="-1"><a class="header-anchor" href="#_1-print-\u5B8F" aria-hidden="true">#</a> 1. <code>print!</code> \u5B8F</h2><p><code>print!</code> \u5B8F\u4F1A\u8C03\u7528 <code>format_args!</code> \u5C06<code>&quot;{}&quot;, &amp;a</code>\u8F6C\u6362\u4E3A\u4E00\u4E2A <code>Arguments</code> \u7ED3\u6784\u4F53\uFF0C\u63A5\u7740\u4F5C\u4E3A\u53C2\u6570\u4F20\u5165 <code>_print</code> \u51FD\u6570</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">macro_rules!</span> print <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">tt</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token variable">$crate</span><span class="token punctuation">::</span><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token variable">$crate</span><span class="token punctuation">::</span><span class="token macro property">format_args!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2-format-args" tabindex="-1"><a class="header-anchor" href="#_2-format-args" aria-hidden="true">#</a> 2. <code>format_args!</code></h2><p><code>format_args!</code> \u7684\u5B9E\u73B0\u9700\u8981\u7F16\u8BD1\u5668\u4ECB\u5165 (\u8FD9\u91CC\u6709\u61C2\u7684\u5927\u4F6C\u53EF\u4EE5\u5E2E\u5FD9\u89E3\u7B54)</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token macro property">macro_rules!</span> format_args <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token variable">$fmt</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token comment">/* compiler built-in */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token variable">$fmt</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> $<span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">tt</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token comment">/* compiler built-in */</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token macro property">format_args!</span><span class="token punctuation">(</span><span class="token string">&quot;hello {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>
<span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;hello {}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Arguements \u7ED3\u6784\u4F53\u7B7E\u540D\u5982\u4E0B\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Arguments</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5B57\u7B26\u4E32</span>
    pieces<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">// \u53C2\u6570\u5217\u8868</span>
    <span class="token comment">// \`ArgumentV1\` \u7ED3\u6784\u4F53\u5305\u542B\u53C2\u6570\u7684\u503C\uFF0C\u4EE5\u53CA\u5B83\u5BF9\u5E94\u7684\u683C\u5F0F\u5316\u65B9\u5F0F\uFF08\u901A\u8FC7 {} {:p} \u6307\u5B9A\uFF09</span>
    args<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token punctuation">[</span><span class="token class-name">ArgumentV1</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">// \u5177\u4F53\u7684\u683C\u5F0F\u5316\u4FE1\u606F\u3002</span>
    <span class="token comment">// Arguement \u7ED3\u6784\u4F53\u4E2D\u4FDD\u5B58\u4E86 \u5BF9\u5E94\u7684\u53C2\u6570\u5728 args \u4E2D\u7684\u7D22\u5F15</span>
    <span class="token comment">// \u8FD8\u6709\u989D\u5916\u7684\u683C\u5F0F\u5316\u4FE1\u606F\uFF0C\u6BD4\u5982\u53C2\u6570\u4F4D\u7F6E\uFF0C\u5BBD\u5EA6\uFF0C\u586B\u5145\u5B57\u7B26\u7B49</span>
    fmt<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token punctuation">[</span><span class="token namespace">rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Argument</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u4EE5\u4E0B\u9762\u7684\u4EE3\u7801\u4E3A\u4F8B\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;hello{}aa{0}too{:p}ohmygod{:p}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>\u5B57\u7B26\u4E32\u7247\u6BB5\u6709 4 \u4E2A\uFF0C\u6240\u4EE5 pieces \u7684\u503C\u4E3A [&quot;hello&quot;, &quot;aa&quot;, &quot;too&quot;, &quot;ohmygod&quot;]</li><li>\u5982\u679C\u6709\u4E24\u4E2A\u8FDE\u7EED\u7684 <code>{}</code>, \u5B83\u4EEC\u4E2D\u95F4\u76F8\u5F53\u4E8E\u88AB\u63D2\u5165\u4E86\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32\u3002</li><li>\u53C2\u6570\u53EA\u6709\u4E09\u4E2A\uFF0C\u6240\u4EE5 <code>arg</code> \u53EA\u6709\u4E09\u4E2A\u5143\u7D20\u3002</li><li>\u7531\u4E8E\u540E\u4E24\u4E2A\u90FD\u662F\u4F7F\u7528 <code>{:p}</code> \u6253\u5370\u5730\u5740\uFF0C\u6240\u4EE5 <code>args[1]</code> \u548C <code>args[2]</code> \u7684 <code>formatter</code> \u7684\u503C\u76F8\u540C</li><li>\u6709\u56DB\u4E2A\u4F4D\u7F6E\u9700\u8981\u586B\u5145\u53C2\u6570\uFF0C\u6240\u4EE5 fmt \u6709 4 \u4E2A\u5143\u7D20\u3002</li></ul><p>\u751F\u6210\u7684 Arguements \u7ED3\u6784\u4F53\u5982\u56FE\u6240\u793A\uFF1A</p><p><img src="https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202205221334215.jpg" alt=""></p><p>\u4E0B\u9762\u662F cargo expand \u5C55\u5F00\u540E\u7684\u7ED3\u679C\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![feature(prelude_import)]</span>
<span class="token attribute attr-name">#[prelude_import]</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span>rust_2021<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#[macro_use]</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">std</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">::</span><span class="token function">new_v1_formatted</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;too&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ohmygod&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new_display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new_pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new_pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Argument</span> <span class="token punctuation">{</span>
                position<span class="token punctuation">:</span> <span class="token number">0usize</span><span class="token punctuation">,</span>
                format<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">FormatSpec</span> <span class="token punctuation">{</span>
                    fill<span class="token punctuation">:</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span>
                    align<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Alignment</span><span class="token punctuation">::</span><span class="token class-name">Unknown</span><span class="token punctuation">,</span>
                    flags<span class="token punctuation">:</span> <span class="token number">0u32</span><span class="token punctuation">,</span>
                    precision<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                    width<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Argument</span> <span class="token punctuation">{</span>
                position<span class="token punctuation">:</span> <span class="token number">0usize</span><span class="token punctuation">,</span>
                format<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">FormatSpec</span> <span class="token punctuation">{</span>
                    fill<span class="token punctuation">:</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span>
                    align<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Alignment</span><span class="token punctuation">::</span><span class="token class-name">Unknown</span><span class="token punctuation">,</span>
                    flags<span class="token punctuation">:</span> <span class="token number">0u32</span><span class="token punctuation">,</span>
                    precision<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                    width<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Argument</span> <span class="token punctuation">{</span>
                position<span class="token punctuation">:</span> <span class="token number">1usize</span><span class="token punctuation">,</span>
                format<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">FormatSpec</span> <span class="token punctuation">{</span>
                    fill<span class="token punctuation">:</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span>
                    align<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Alignment</span><span class="token punctuation">::</span><span class="token class-name">Unknown</span><span class="token punctuation">,</span>
                    flags<span class="token punctuation">:</span> <span class="token number">0u32</span><span class="token punctuation">,</span>
                    precision<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                    width<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Argument</span> <span class="token punctuation">{</span>
                position<span class="token punctuation">:</span> <span class="token number">2usize</span><span class="token punctuation">,</span>
                format<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">FormatSpec</span> <span class="token punctuation">{</span>
                    fill<span class="token punctuation">:</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span>
                    align<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Alignment</span><span class="token punctuation">::</span><span class="token class-name">Unknown</span><span class="token punctuation">,</span>
                    flags<span class="token punctuation">:</span> <span class="token number">0u32</span><span class="token punctuation">,</span>
                    precision<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                    width<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span>rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Count</span><span class="token punctuation">::</span><span class="token class-name">Implied</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">UnsafeArg</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">::</span><span class="token function">new_v1</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new_display</span><span class="token punctuation">(</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><h2 id="_3-print" tabindex="-1"><a class="header-anchor" href="#_3-print" aria-hidden="true">#</a> 3. _print()</h2><p>\u53EA\u662F\u7B80\u5355\u7684\u8C03\u7528\u4E86 <code>print_to</code>, \u6307\u5B9A\u4E86\u8F93\u51FA\u5230 <code>stdout</code></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">_print</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print_to</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>print_to \u51FD\u6570\u5177\u4F53\u5185\u5BB9\u5982\u4E0B\uFF0C\u4E3B\u8981\u5C31\u662F\u8C03\u7528\u4E86\u7F13\u51B2\u533A\u7684 <code>write_fmt</code> \u65B9\u6CD5</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">print_to</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> global_s<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span>
<span class="token keyword">where</span>
    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Write</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u5C1D\u8BD5\u62FF\u5230\u8F93\u51FA\u7684\u7F13\u51B2\u533A w</span>
    <span class="token keyword">if</span> <span class="token constant">OUTPUT_CAPTURE_USED</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">OUTPUT_CAPTURE</span><span class="token punctuation">.</span><span class="token function">try_with</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>s<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>w<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> <span class="token comment">// w: Arc&lt;Mutex&lt;Vec&lt;u8&gt;&gt;&gt;</span>
                <span class="token comment">// \u8C03\u7528 write_fmt \u65B9\u6CD5</span>
                <span class="token keyword">let</span> _ <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write_fmt</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Successfully wrote to capture buffer.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">global_s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write_fmt</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;failed printing to {label}: {e}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="_4-w-write-fmt-args" tabindex="-1"><a class="header-anchor" href="#_4-w-write-fmt-args" aria-hidden="true">#</a> 4. <code>w.write_fmt(args)</code></h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">write_fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> fmt<span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u521B\u5EFA\u4E00\u4E2A Adapter \u5C06 fmt \u8F6C\u5316\u4E3A\u4E00\u4E2A impl Write\uFF0C\u987A\u4FBF\u50A8\u5B58\u9519\u8BEF\u4FE1\u606F</span>
    <span class="token keyword">struct</span> <span class="token type-definition class-name">Adapter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token class-name">Sized</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        inner<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
        error<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8FD9\u4E2A write_str \u5B9E\u9645\u4E0A\u5C31\u662F\u8C03\u7528\u4E86 Vec&lt;u8&gt; \u7684 write_all() \u65B9\u6CD5</span>
    <span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Write</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span><span class="token operator">&gt;</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Write</span> <span class="token keyword">for</span> <span class="token class-name">Adapter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">fn</span> <span class="token function-definition function">write_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span>
            <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">...</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> output <span class="token operator">=</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span> inner<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> error<span class="token punctuation">:</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> output<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_5-\u6700\u540E\u662F-fmt-write-mut-output-fmt" tabindex="-1"><a class="header-anchor" href="#_5-\u6700\u540E\u662F-fmt-write-mut-output-fmt" aria-hidden="true">#</a> 5.\u6700\u540E\u662F fmt::write(&amp;mut output, fmt)</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">dyn</span> <span class="token class-name">Write</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> <span class="token class-name">Arguments</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> formatter <span class="token operator">=</span> <span class="token class-name">Formatter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> args<span class="token punctuation">.</span>fmt <span class="token punctuation">{</span>
        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u6CA1\u6709\u683C\u5F0F\u5316\u65B9\u6CD5\uFF0C\u6211\u4EEC\u5C31\u4F7F\u7528\u9ED8\u8BA4\u7684\u683C\u5F0F\u5316\u65B9\u6CD5\u3002</span>
            <span class="token comment">// \u904D\u5386\u6240\u6709\`\u53C2\u6570\`\uFF0C\u6BCF\u6B21\u5148\u8F93\u51FA\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u518D\u4F7F\u7528\u683C\u5F0F\u5316\u65B9\u6CD5\u8F93\u51FA\u4E00\u4E2A\u53C2\u6570</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token keyword">in</span> args<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5B89\u5168\u6027: args.args \u548C args.pieces \u6765\u81EA\u540C\u4E00\u4E2A\u7ED3\u6784\u4F53\uFF0C\u8FD9\u91CC\u7684 get_unchecked \u662F\u5B89\u5168\u7684</span>
                <span class="token keyword">let</span> piece <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> args<span class="token punctuation">.</span>pieces<span class="token punctuation">.</span><span class="token function">get_unchecked</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token operator">!</span>piece<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u8FD9\u91CC\u7684 formatter \u5C31\u662F\u4E4B\u524D\u7684 Adapter,</span>
                    <span class="token comment">// write_str \u5C31\u662F\u8C03\u7528 Vec&lt;u8&gt; \u5BF9\u5E94\u7684\u5B9E\u73B0</span>
                    formatter<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">write_str</span><span class="token punctuation">(</span><span class="token operator">*</span>piece<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>formatter<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> formatter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
                idx <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6BCF\u4E2A\u683C\u5F0F\u5316\u65B9\u6CD5\u90FD\u6709\u4E00\u4E2A\u5BF9\u5E94\u7684\u53C2\u6570\u3002\u6BCF\u6B21\u8F93\u51FA\u53C2\u6570\u524D\uFF0C\u90FD\u8F93\u51FA\u4E00\u4E2A\u5B57\u7B26\u4E32\u7247\u6BB5</span>
            <span class="token comment">// \u6CE8\u610F\uFF1A\u8FD9\u91CC\u662F\u5BF9 fmt \u8FDB\u884C\u904D\u5386\uFF0C\u56E0\u4E3A\u53C2\u6570\u6570\u91CF\u548C\u9700\u8981\u586B\u5145\u6570\u91CF\u4E0D\u662F\u4E00\u4E00\u5BF9\u5E94</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token keyword">in</span> fmt<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">...</span>\u540C\u4E0A
                <span class="token comment">// \u8FD9\u91CC\u7684 run \u8FD8\u662F\u4F1A\u8C03\u7528</span>
                <span class="token comment">// (arg.formatter)(arg.value, &amp;mut formatter)?;</span>
                <span class="token comment">// \u53EA\u4E0D\u8FC7\u4F1A\u4E3A formatter \u6DFB\u52A0\u4E00\u4E9B\u989D\u5916\u4FE1\u606F</span>
                <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> formatter<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> args<span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">;</span>
                idx <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6253\u5370\u672B\u5C3E\u591A\u4F59\u7684\u5B57\u7B26\u4E32</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>piece<span class="token punctuation">)</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>pieces<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatter<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">write_str</span><span class="token punctuation">(</span><span class="token operator">*</span>piece<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>\u81F3\u6B64\uFF0C\u4E00\u4E2A <code>print!</code> \u7684\u5927\u4F53\u6D41\u7A0B\u5C31\u7ED3\u675F\u4E86</p><h2 id="_6-\u4E3A\u4EC0\u4E48-print-a-\u65E0\u6CD5\u6253\u5370\u51FA\u5730\u5740" tabindex="-1"><a class="header-anchor" href="#_6-\u4E3A\u4EC0\u4E48-print-a-\u65E0\u6CD5\u6253\u5370\u51FA\u5730\u5740" aria-hidden="true">#</a> 6. \u4E3A\u4EC0\u4E48 <code>print!(&quot;{}&quot;, &amp;a)</code> \u65E0\u6CD5\u6253\u5370\u51FA\u5730\u5740</h2><p>\u901A\u8FC7\u4E0A\u9762\u7684\u8BB2\u89E3\uFF0C\u6253\u5370\u7684\u5173\u952E\u5C31\u5728\u4E8E\u4E0B\u9762\u8FD9\u884C\u4EE3\u7801\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// arg\uFF1AArgumentV1</span>
<span class="token punctuation">(</span>arg<span class="token punctuation">.</span>formatter<span class="token punctuation">)</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> formatter<span class="token punctuation">)</span><span class="token operator">?</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>formatter</code> \u5B9E\u9645\u4E0A\u662F\u4E00\u4E2A\u51FD\u6570\u6307\u9488\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// This struct represents the generic &quot;argument&quot; which is taken by the Xprintf family of functions. It contains a function to format the given value.</span>
<span class="token comment">// At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.</span>

<span class="token comment">// \u8BE5\u7ED3\u6784\u8868\u793A Xprintf \u7CFB\u5217\u51FD\u6570\u91C7\u7528\u7684\u901A\u7528\u201C\u53C2\u6570\u201D\u3002 \u5B83\u5305\u542B\u4E00\u4E2A\u683C\u5F0F\u5316\u7ED9\u5B9A\u503C\u7684\u51FD\u6570\u3002</span>
<span class="token comment">// \u5728\u7F16\u8BD1\u65F6\uFF0C\u786E\u4FDD\u51FD\u6570\u548C\u503C\u5177\u6709\u6B63\u786E\u7684\u7C7B\u578B\uFF0C\u7136\u540E\u4F7F\u7528\u6B64\u7ED3\u6784\u5C06\u53C2\u6570\u89C4\u8303\u5316\u4E3A\u4E00\u79CD\u7C7B\u578B\u3002</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ArgumentV1</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">Opaque</span><span class="token punctuation">,</span>
    formatter<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">Opaque</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// NB. Argument is essentially an optimized partially applied formatting function,</span>
<span class="token comment">// equivalent to \`exists T.(&amp;T, fn(&amp;T, &amp;mut Formatter&lt;&#39;_&gt;) -&gt; Result\`.</span>
<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Opaque</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    flags<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
    fill<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">,</span>
    align<span class="token punctuation">:</span> <span class="token namespace">rt<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token class-name">Alignment</span><span class="token punctuation">,</span>
    width<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    precision<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    buf<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token punctuation">(</span><span class="token keyword">dyn</span> <span class="token class-name">Write</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u4E0B\u9762\u662F stackoverflow \u4E0A\u7684\u89E3\u7B54</p><p><code>print!</code>, <code>println!</code>, <code>eprint!</code>, <code>eprintln!</code>, <code>write!</code>, <code>writeln!</code> and <code>format!</code> \u8FD9\u4E9B\u5B8F\u4F1A\u9690\u5F0F\u7684\u62FF\u8D70\u53C2\u6570\u7684\u5F15\u7528</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5728 nightly \u7684\u7F16\u8BD1\u5668\u4E0A\u4F7F\u7528 <code>rustc -Z unstable-options --pretty</code> \u5C55\u5F00\u4E0A\u9762\u7684\u4EE3\u7801\uFF1A</p><blockquote><p>\u6216\u8005\u662F <code>cargo expand</code></p></blockquote><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![feature(prelude_import)]</span>
<span class="token attribute attr-name">#[prelude_import]</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span>v1<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#[macro_use]</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">std</span><span class="token punctuation">;</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">::</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">::</span><span class="token function">new_v1</span><span class="token punctuation">(</span>
            <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span><span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">(</span>arg0<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
                    arg0<span class="token punctuation">,</span>
                    <span class="token punctuation">::</span><span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">::</span>fmt<span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>\u6574\u7406\u4E4B\u540E\u5C31\u662F\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>fmt<span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">::</span><span class="token function">new_v1</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">ArgumentV1</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">::</span>fmt<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">//                     ^^</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u6CE8\u610F <code>&amp;x</code>.</p><p>\u5982\u679C\u4F60\u5199\u7684\u662F <code>println!(&quot;{}&quot;, &amp;x)</code>\uFF0CRust \u7F16\u8BD1\u5668\u4F9D\u7136\u80FD\u591F\u5E2E\u4F60\u5904\u7406\u8FD9\u4E24\u5C42\u5F15\u7528;</p><p>\u56E0\u4E3A Rust \u4E3A &amp;T(T: Display) \u4E5F\u5B9E\u73B0\u4E86 Display</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// \u6709\u70B9\u50CF\u667A\u80FD\u6307\u9488\u7684 Deref</span>
<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">T</span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token operator">?</span><span class="token class-name">Sized</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,44);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
