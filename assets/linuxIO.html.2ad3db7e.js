import{d as n}from"./app.87bd0483.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="linux-io-\u591A\u8DEF\u590D\u7528" tabindex="-1"><a class="header-anchor" href="#linux-io-\u591A\u8DEF\u590D\u7528" aria-hidden="true">#</a> Linux IO \u591A\u8DEF\u590D\u7528</h1><h2 id="_1-errno-h" tabindex="-1"><a class="header-anchor" href="#_1-errno-h" aria-hidden="true">#</a> 1. errno.h</h2><p><strong>1. \u5B9A\u4E49</strong></p><p>\u8BE5\u5934\u6587\u4EF6\u5B9A\u4E49\u4E86\u4E00\u4E2Aint\u7C7B\u578B\u7684\u5DE6\u503C\uFF0Cerrno\uFF0C\u5305\u542B\u4E86\u4EFB\u4F55\u51FD\u6570\u4F7F\u7528errno\u529F\u80FD\u65F6\u4F1A\u4EA7\u751F\u7684\u9519\u8BEF\u7801</p><ul><li>EINTR\uFF1A \u8868\u793A\u88AB\u4E2D\u65AD\u7684\u7CFB\u7EDF\u8C03\u7528</li></ul><p><strong>2. \u4FEE\u6539errno\u7684\u503C</strong></p><p>errno\u7684\u9ED8\u8BA4\u503C\u4E3A0, \u5F53 \u8C03\u7528\u7CFB\u7EDF\u8C03\u7528\u65F6\uFF0C\u53EF\u80FD\u4F1A\u63A5\u53D7\u5230\u67D0\u4E2A\u4FE1\u53F7\u5BFC\u81F4\u8C03\u7528\u9000\u51FA\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u9519\u8BEF\u7801\uFF0C\u5E76\u4FEE\u6539errno\u7684\u503C\uFF0C\u53EF\u4EE5\u901A\u8FC7errno\u5224\u65AD\u7CFB\u7EDF\u8C03\u7528\u662F\u5426\u5931\u8D25\uFF0C</p><p><strong>3. \u9519\u8BEF\u7801\u5BF9\u4E0D\u540C\u51FD\u6570\u6709\u4E0D\u540C\u610F\u4E49</strong></p><ul><li><p>write: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\uFF0C\u6CA1\u5199\u6210\u529F\u4EFB\u4F55\u6570\u636E\u3002</p><blockquote><p>The call was interrupted by a signal before any data was written.</p></blockquote></li><li><p>read: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\uFF0C\u6CA1\u8BFB\u5230\u4EFB\u4F55\u6570\u636E\u3002</p><blockquote><p>The call was interrupted by a signal before any data was read.</p></blockquote></li><li><p>sem_wait: \u51FD\u6570\u8C03\u7528\u88AB\u4FE1\u53F7\u5904\u7406\u51FD\u6570\u4E2D\u65AD</p><blockquote><p>The call was interrupted by a signal handler.</p></blockquote></li><li><p>recv: \u7531\u4E8E\u4FE1\u53F7\u4E2D\u65AD\u8FD4\u56DE\uFF0C\u6CA1\u6709\u4EFB\u4F55\u6570\u636E\u53EF\u7528\u3002</p><blockquote><p>function was interrupted by a signal that was caught, before any data was available.</p></blockquote></li></ul><p><strong>4. \u5982\u4F55\u5E94\u5BF9</strong></p><p>\u5F53\u78B0\u5230EINTR\u9519\u8BEF\u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u91C7\u53D6\u6709\u4E00\u4E9B\u53EF\u4EE5\u91CD\u542F\u7684\u7CFB\u7EDF\u8C03\u7528\u8981\u8FDB\u884C\u91CD\u542F\uFF0C\u800C\u5BF9\u4E8E\u6709\u4E00\u4E9B\u7CFB\u7EDF\u8C03\u7528\u662F\u4E0D\u80FD\u591F\u91CD\u542F\u7684\u3002\u4F8B\u5982\uFF1Aaccept\u3001read\u3001write\u3001select\u3001\u548Copen\u4E4B\u7C7B\u7684\u51FD\u6570\u6765\u8BF4\uFF0C\u662F\u53EF\u4EE5\u8FDB\u884C\u91CD\u542F\u7684\u3002\u4E0D\u8FC7\u5BF9\u4E8E\u5957\u63A5\u5B57\u7F16\u7A0B\u4E2D\u7684connect\u51FD\u6570\u6211\u4EEC\u662F\u4E0D\u80FD\u91CD\u542F\u7684\uFF0C\u82E5connect\u51FD\u6570\u8FD4\u56DE\u4E00\u4E2AEINTR\u9519\u8BEF\u7684\u65F6\u5019\uFF0C\u6211\u4EEC\u4E0D\u80FD\u518D\u6B21\u8C03\u7528\u5B83\uFF0C\u5426\u5219\u5C06\u7ACB\u5373\u8FD4\u56DE\u4E00\u4E2A\u9519\u8BEF\u3002\u9488\u5BF9connect\u4E0D\u80FD\u91CD\u542F\u7684\u5904\u7406\u65B9\u6CD5\u662F\uFF0C\u5FC5\u987B\u8C03\u7528select\u6765\u7B49\u5F85\u8FDE\u63A5\u5B8C\u6210\u3002</p><p>\u7CFB\u7EDF\u4E2D\u65AD\u4E0D\u4E00\u5B9A\u88AB\u5F53\u4F5C\u9519\u8BEF</p><ul><li><p>\u5982\u679C\u9519\u8BEF\u7801\u4E3AEINTR\u5219 <strong>\u91CD\u65B0\u8C03\u7528\u7CFB\u7EDF\u8C03\u7528</strong> ,\u4F8B\u5982Postgresql\u4E2D\u6709\u4E00\u6BB5\u4EE3\u7801:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>retry1<span class="token operator">:</span> 
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>port<span class="token operator">-&gt;</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SSLok<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> 
        <span class="token keyword">goto</span> retry1<span class="token punctuation">;</span> <span class="token comment">/* if interrupted, just retry */</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>\u91CD\u65B0\u5B9A\u4E49\u7CFB\u7EDF\u8C03\u7528</strong>,\u5FFD\u7565\u9519\u8BEF\u7801\u4E3AEINTR\u7684\u60C5\u51B5.\u4F8B\u5982,Cherokee\u4E2D\u7684\u4E00\u6BB5\u4EE3\u7801:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cherokee_stat</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>restrict path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
  <span class="token keyword">int</span> re<span class="token punctuation">;</span> 
  <span class="token keyword">do</span> <span class="token punctuation">{</span> 
     re <span class="token operator">=</span> <span class="token function">stat</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>re <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">return</span> re<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p><strong>5. \u5982\u4F55\u4FDD\u8BC1\u7EBF/\u8FDB\u7A0B\u5B89\u5168</strong></p><blockquote><p>\u4E00\u822C\u800C\u8A00\uFF0C\u7F16\u8BD1\u5668\u4F1A\u81EA\u52A8\u4FDD\u8BC1 errno \u7684\u5B89\u5168\u6027\uFF0C\u4F46\u662F\u4E3A\u4E86\u59A5\u5584\u671F\u95F4\uFF0C\u6211\u4EEC\u5E0C\u671B\u5728\u5199 makefile \u7684\u65F6 \u5019\u628A _LIBC_REENTRANT \u5B8F\u5B9A\u4E49\uFF0C\u6BD4 \u5982\u6211\u4EEC\u5728\u68C0\u67E5 &lt;bits/errno.h&gt; \u6587\u4EF6\u4E2D\u53D1\u73B0\u5982\u4E0B\u7684\u5B9A\u4E49\uFF1A</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifndef</span> <span class="token expression">__ASSEMBLER__ </span></span>
<span class="token comment">/* Function to get address of global \`errno&#39; variable. */</span> 
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">__errno_location</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__const__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
 
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>defined _LIBC <span class="token operator">||</span> defined _LIBC_REENTRANT </span></span>
<span class="token comment">/* When using threads, errno is a per-thread value. */</span> 
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">errno</span> <span class="token expression"><span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">__errno_location</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span> <span class="token comment">/* !__ASSEMBLER__ */</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* _ERRNO_H */</span> </span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5728\u6CA1\u6709\u5B9A\u4E49 __LIBC \u6216\u8005\u5B9A\u4E49 _LIBC_REENTRANT \u7684\u65F6\u5019\uFF0C errno \u662F\u591A\u7EBF\u7A0B / \u8FDB\u7A0B\u5B89\u5168\u7684\u3002 \u4E00\u822C\u800C\u8A00\uFF0C <strong>ASSEMBLER</strong>, _LIBC \u548C _LIBC_REENTRANT \u90FD\u4E0D\u4F1A\u88AB\u7F16\u8BD1\u5668\u5B9A\u4E49\uFF0C\u4F46\u662F\u5982\u679C\u6211\u4EEC\u5B9A\u4E49 _LIBC_REENTRANT \u4E00\u6B21\u53C8\u4F55\u59A8\u90A3\uFF1F \u4E3A\u4E86\u68C0\u6D4B\u4E00\u4E0B\u4F60\u7F16\u8BD1\u5668\u662F\u5426\u5B9A\u4E49\u4E0A\u8FF0\u53D8\u91CF\uFF0C\u4E0D\u59A8\u4F7F\u7528\u4E0B\u9762\u4E00\u4E2A\u7B80\u5355\u7A0B\u5E8F\u3002</p></blockquote><p>\u5E0C\u671B\u8BFB\u8005\u5728\u8FDB\u884C\u79FB\u690D\u7684\u65F6\u5019\uFF0C\u8BFB\u4E00\u4E0B\u76F8\u5173\u7684 unix \u7248\u672C\u7684 &lt;bits/errno.h&gt; \u6587 \u4EF6\uFF0C\u6765\u786E\u5B9A\u5E94\u8BE5\u5B9A\u4E49\u4EC0\u4E48\u5B8F\u3002\u4E0D\u540C\u7684 unix \u7248\u672C\u53EF\u80FD\u5B58\u5728\u7740\u4E00\u4E9B\u5C0F\u7684\u5DEE\u522B\uFF01</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span> </span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ASSEMBLER__ </span></span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine __ASSEMBLER__\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define __ASSEMBLER__\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LIBC </span></span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine __LIBC\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define __LIBC\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_LIBC_REENTRANT </span></span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Undefine _LIBC_REENTRANT\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> </span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;define _LIBC_REENTRANT\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>
 
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u53C2\u8003\uFF1Ahttps://blog.csdn.net/hnlyyk/article/details/51444617</p><h2 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2.</h2>`,21);function e(t,o){return p}var l=s(a,[["render",e]]);export{l as default};
