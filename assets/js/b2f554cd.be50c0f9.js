"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/2023/01/03/[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde","metadata":{"permalink":"/blog/2023/01/03/[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde","source":"@site/blog/2023-01-03-[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde.md","title":"[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde","description":"\u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2021/11/14/abusing-serde/","date":"2023-01-03T00:00:00.000Z","formattedDate":"2023\u5e741\u67083\u65e5","tags":[],"readingTime":15.225,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86","permalink":"/blog/2023/01/02/[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86"}},"content":"> \u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2021/11/14/abusing-serde/\\n>\\n> **\u7ffb\u8bd1\uff1a[trdthg](https://github.com/trdthg)**\\n>\\n> \u9009\u9898\uff1a[trdthg](https://github.com/trdthg)\\n>\\n> \u672c\u6587\u7531 [Rustt](https://Rustt.org) \u7ffb\u8bd1\uff0c[StudyRust](https://studyrust.org) \u8363\u8a89\u63a8\u51fa\\n\\n# Rust \u5192\u9669\uff1a\u6ee5\u7528 Serde\\n\\n\u5f53\u4f60\u8ba9\u4e00\u4e2a Rust \u7a0b\u5e8f\u5458\u6307\u51fa\u81ea\u5df1\u6700\u559c\u6b22\u7684\u4e1c\u897f\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5f88\u5feb\u7684\u6307\u51fa serde \u662f\u4e00\u4e2a\u8ba9\u5de5\u4f5c\u6109\u5feb\u597d\u5e2e\u624b\u3002serde \u662f\u4e00\u4e2a Rust\\n\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u6846\u67b6\u3002\u5b83\u7684\u683c\u5f0f\u76f8\u5bf9\u72ec\u7acb\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5904\u7406 JSON\uff0cYAML \u4ee5\u53ca\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u683c\u5f0f\u3002\\n\\n\u9664\u4e86\u4e0a\u9762\u7684\u4e4b\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u7528 serve \u5b8c\u6210\u3002\u6211\u8ba4\u4e3a\u6709\u4e00\u4e9b\u7528\u4f8b\u76f8\u5f53\u6709\u8da3\uff0c\u503c\u5f97\u5206\u4eab\u3002\\n\\n## \u6ee5\u7528\u5e8f\u5217\u5316\\n\\n_Abusing Serialization_\\n\\n\u5176\u4e2d\u4e00\u4e2a\u6709\u8da3\u7684\u7528\u4f8b\u662f\u7528 serde \u4f5c\u4e3a\u67d0\u79cd\u5f62\u5f0f\u7684\u53cd\u5c04\u6846\u67b6\uff0c\u5c06\u7ed3\u6784\u4f53\u66b4\u9732\u7ed9\u5176\u4ed6\u7684\u4e0d\u80fd\u539f\u751f\u652f\u6301 Rust\\n\u7ed3\u6784\u4f53\u7684\u73af\u5883\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5f00\u53d1\u8005\uff0c\u4f60\u5e8f\u5217\u5316\u4e86\u4e00\u4e2a\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\uff0c\u63a5\u7740\u7acb\u5373\u4ee5\u67d0\u79cd\u7a0d\u5fae\u4e0d\u540c\u7684\u683c\u5f0f\u518d\u6b21\u53cd\u5e8f\u5217\u5316\u5b83\u3002\u76f8\u6bd4\u4e8e\u53cd\u5e8f\u5217\u5316\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7528\u6765\\n\'\u6355\u83b7\' \u5e8f\u5217\u5316\u7684\u8c03\u7528\u3002\u8fd9\u662f\u5728 IPC\uff0c\u6a21\u677f\u5f15\u64ce\u4e0a\u4e0b\u6587\u3001\u683c\u5f0f\u8f6c\u6362\u4e2d\u5e38\u7528\u7684\u6a21\u5f0f\u3002\\n\\n\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5927\u6982\u662f\u4ec0\u4e48\u6837\u5462\uff1f\u8ba9\u6211\u4eec\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u770b\u4e00\u4e0b\u6211\u5199\u7684 [MiniJinja](https://github.com/mitsuhiko/minijinja)\\n\u6a21\u677f\u5f15\u64ce\u3002MiniJinja \u4f7f\u7528 serde \u4f5c\u4e3a\u6838\u5fc3\u6570\u636e\u6a21\u578b\uff0c\u5c06\u7ed3\u6784\u5316\u7684\u6570\u636e\u4f20\u9012\u7ed9\u6a21\u677f\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u8bc4\u4f30\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u7ed9\u5f00\u53d1\u8005\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\\n\\n```rs\\n#[derive(Serialize, Debug)]\\npub struct User {\\n    name: String,\\n}\\n\\nfn main() {\\n    let mut env = Environment::new();\\n    env.add_template(\\"hello.txt\\", \\"Hello {{ user.name }}!\\")\\n        .unwrap();\\n    let template = env.get_template(\\"hello.txt\\").unwrap();\\n    let user = User {\\n        name: \\"John\\".into(),\\n    };\\n    println!(\\"{}\\", template.render(context!(user)).unwrap());\\n}\\n```\\n\\n\u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb User \u7684\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684 Serialize \u5b9e\u73b0\u5c06\u5b83\u5e8f\u5217\u5316\u3002\u8fd9\u4e2a\u5bf9\u8c61\u63a5\u7740\u88ab\u4f20\u9012\u5230\\n`context!()`\u3002`context!()` \u6240\u505a\u7684\u5c31\u662f\u521b\u5efa\u4e86\u4e00\u4e2a map\uff0c\u7136\u540e\u5c06\u4e00\u4e2a\u952e\u8bbe\u4e3a\\nuser\uff0c\u63a5\u7740\u8bbe\u7f6e\u4e3a\u8be5\u53d8\u91cf\u7684\u503c\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5141\u8bb8\u6a21\u677f\u5f15\u64ce\u8bbf\u95ee\u5230 user \u7684 \'\u5c5e\u6027\'\uff0c\u4f8b\u5982 name\u3002Rust\\n\u4e0d\u662f\u52a8\u6001\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u505a\u8fd9\u6837\u7684\u4e8b\u60c5\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4f46\u662f\u7531\u4e8e serde \u4e3a User \u5b9e\u73b0\u4e86\\nSeralize\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff08\u4f2a\u4ee3\u7801\uff09\uff1a\\n\\n```rs\\nimpl Serialize for User {\\n    fn serialize(&self, serializer: S) -> Result<S::Ok, S::Error>\\n        where S: Serializer\\n    {\\n        let s = serializer.serialize_struct(\\"User\\", 1);\\n        s.serialize_field(\\"name\\", &self.name)?;\\n        s.end()\\n    }\\n}\\n```\\n\\n\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0cserializer \u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e JSON \u5e8f\u5217\u5316\u5668\u7684\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f53\u5199\u5165\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u662f\u6587\u4ef6\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u628a\u5b83\u7f16\u7801\u4e3a JSON\u3002\u4f46\u662f\\nserde \u63d0\u4f9b\u7684\u63a5\u53e3\u5e76\u4e0d\u8981\u6c42\u7528\u6237\u5fc5\u987b\u8fd9\u6837\u3002\u5b9e\u9645\u4e0a\uff0cMiniJinja \u76f4\u63a5\u5c06\u7ed3\u6784\u4f53\u7f16\u7801\u4e3a\u4e00\u4e2a\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\uff0c\u6a21\u677f\u5f15\u64ce\u53ef\u4ee5\u89e3\u6790\u5b83\u3002\\n\\n\u8fd9\u79cd\u6a21\u5f0f\u5e76\u4e0d\u65b0\u9896\uff0cserde \u672c\u8eab\u5176\u5b9e\u4e5f\u6709\u4f7f\u7528\u3002\u5f53\u4f60\u4f7f\u7528 serde \u7684 flatter \u529f\u80fd\u65f6\uff0cserde \u4f1a\u542f\u7528\u4e00\u4e2a\u5185\u90e8\u7f13\u51b2\u6a21\u5f0f\uff0c\u6570\u636e\u4f1a\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a\u5185\u90e8\u7684\\nContext \u7c7b\u578b\u4e2d\uff0cContext \u7c7b\u578b\u53ef\u4ee5\u8868\u793a serde \u6570\u636e\u6a21\u578b\u7684\u5168\u90e8\u5185\u5bb9\u3002\u7136\u540e\u8fd9\u4e2a context \u53ef\u4ee5\u88ab\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u4e2d\u3002\\n\\n\u6211\u4e0d\u4ec5\u5728 MiniJinja\uff0c\u540c\u65f6\u4e5f\u5728 [insta](https://insta.rs/)\\n\uff08\u4e00\u4e2a\u5feb\u7167\u6d4b\u8bd5\u5de5\u5177\uff09\u4f7f\u7528\u5230\u8fd9\u79cd\u6a21\u5f0f\u3002\u4e3a\u4e86\u907f\u514d\u7531\u4e8e\u975e\u786e\u5b9a\u6027\u6570\u636e\u5bfc\u81f4\u7684\u6d4b\u8bd5\u5feb\u7167\u7684\u4e0d\u7a33\u5b9a\u6027\uff0c\u6211\u9996\u5148\u5c06\u5176\u5e8f\u5217\u5316\u4e3a\u4e00\u79cd\u5185\u90e8\u7684\u683c\u5f0f\uff0c\u63a5\u7740\u5728\u8be5\u683c\u5f0f\u4e0a\u8fdb\u884c\u4e00\u4e2a\u518d\u52a0\u5de5\uff0c\u6700\u540e\u518d\u5c06\u5176\u5e8f\u5217\u5316\u4e3a\u6700\u7ec8\u7684\u683c\u5f0f\uff08\u4f8b\u5982\\nYAML\uff09\u3002\\n\\n## TLS \u6076\u4f5c\u5267\\n\\n_TLS Shenanigans_\\n\\n> TLS\uff1aThread Local Storage\uff0cShenanigans\uff1a\u6076\u4f5c\u5267\\n\\n\u7136\u800c\uff0cMiniJinja \u5728\u6b64\u5904\u4f7f\u7528 serde \u7684\u6709\u8da3\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u5141\u8bb8\u5728\u5e8f\u5217\u5316\u548c\u5e8f\u5217\u5316\u5668\u4e4b\u95f4\u4f20\u9012\u4e0d\u517c\u5bb9\u7684\u6570\u636e\u3002\u5982\u524d\u6240\u8ff0\uff0cserde\\n\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\uff0c\u4e0d\u7b26\u5408\u8be5\u6570\u636e\u6a21\u578b\u7684\u4e1c\u897f\u90fd\u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u4f8b\u5982\uff0cserde \u53ef\u4ee5\u7f16\u7801\u7684\u6700\u5927\u6574\u578b\u662f\\ni128\u3002\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u4efb\u610f\u7cbe\u5ea6\u7684\u6574\u578b\uff0c\u90a3\u5c31\u4e0d\u8d70\u8fd0\u4e86\u3002\u4f46\u662f\u8fd8\u662f\u6709\u529e\u6cd5\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\\n[\u5e26\u5185\u4fe1\u4ee4\uff08in-band signalling\uff09](https://en.wikipedia.org/wiki/In-band_signaling)\u4f20\u9012\u989d\u5916\u6570\u636e\u3002\u4f8b\u5982\uff0cserde\\nJSON \u5e8f\u5217\u5316\u5668\u80fd\u591f\u8868\u793a\u4efb\u610f\u7cbe\u5ea6\u6574\u578b\uff0c\u56e0\u4e3a\u5b83\u5728\u5355\u503c\u5bf9\u8c61\u4e2d\u4fdd\u7559\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u952e\uff0c\u5e76\u7528\u5b83\u53bb\u6307\u793a JSON \u5e8f\u5217\u5316 /\\n\u53cd\u5e8f\u5217\u5316\u5668\u7ec4\u5408\uff0c\u51b3\u5b9a\u8fd9\u4e2a\u4efb\u610f\u7cbe\u5ea6\u7684\u6574\u578b\u662f\u5426\u8981\u88ab\u5e8f\u5217\u5316\u3002\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\\n\\n```json\\n{ \\"$serde_json::private::Number\\": \\"value\\" }\\n```\\n\\n\u4f46\u662f\u4f60\u5e94\u8be5\u80fd\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u7ed9\u51fa\u4e86\u8fd9\u6837\u7684 JSON \u6587\u6863\uff0cserde JSON \u4f1a\u628a\u5b83\u5f53\u4f5c\u4efb\u610f\u7cbe\u5ea6\u7684\u6574\u5f62\u53bb\u89e3\u6790\uff0c\u8fd9\u610f\u5473\u7740 \'value\' \u90e8\u5206\u672c\u8eab\u4e5f\u9700\u8981\u4e8e\\nserde \u517c\u5bb9\u3002\u5bf9\u4e8e\u4efb\u610f\u7cbe\u5ea6\u7684\u6574\u578b\uff0c\u8fd9\u6ca1\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u8868\u793a\u3002\u4f46\u662f\u5047\u5982\u4f60\u60f3\u5728\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e2d\u4f20\u9012\u7684\u4e1c\u897f\u6839\u672c\u4e0d\u80fd\u5e8f\u5217\u5316\u5462\uff1f\\n\\n\u8fd9\u65f6\uff0c\u5de7\u5999\u5730\u5229\u7528 **thread local** \u5c31\u662f\u4e00\u79cd\u53d8\u901a\u65b9\u6cd5\u3002\\n\\n\u5728 MiniJinja \u4e2d\uff0c\u8fd0\u884c\u65f6\u503c\u7684\u5185\u90e8\u8868\u793a\u662f\u4e00\u4e2a\u53eb\u505a `Value`\\n\u7684\u7ed3\u6784\u4f53\u3002\u6b63\u5982\u4f60\u6240\u671f\u671b\u7684\uff0c\u5b83\u53ef\u4ee5\u5bb9\u7eb3\u6574\u578b\uff0c\u6d6e\u70b9\u6570\uff0c\u5b57\u7b26\u4e32\uff0c\u5217\u8868\uff0c\u5bf9\u8c61\u7b49\u7b49\u3002\u7136\u800c\uff0c\u4ed6\u4e5f\u53ef\u4ee5\u5bb9\u7eb3\u4e00\u4e9b serde\\n\u5b8c\u5168\u65e0\u6cd5\u89e3\u6790\u7684\u7c7b\u578b\u3002\u7279\u522b\u662f\u5b83\u53ef\u4ee5\u4fdd\u5b58\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u79f0\u4e3a `\'safe\' string`, \u5b83\u662f\u4e00\u4e2a\u5b58\u50a8\u4e86\u5b89\u5168\u7684 HTML\\n\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u9700\u8981\u8f6c\u4e49\uff0c\u4e5f\u4e0d\u9700\u8981\u6240\u8c13\u7684 \'\u52a8\u6001\u503c\'\u3002\u540e\u8005\u7279\u522b\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u88ab\u5e8f\u5217\u5316\u3002\\n\\n\u4ec0\u4e48\u662f\u52a8\u6001\u503c\uff1f\u5b83\u5b9e\u9645\u4e0a\u662f\u5177\u6709\u72b6\u6001\u7684\u5bf9\u8c61\u7684\u53e5\u67c4\uff0c\u5e94\u8be5\u76f4\u63a5\u4f20\u9012\u7ed9\u6a21\u677f\u3002\u8fd9\u91cc\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f MiniJinja \u4e2d\u7684 loop \u53d8\u91cf\uff1a\\n\\n```rs\\n<ul>\\n{% for item in seq %}\\n    <li>{{ loop.index }}: {{ item }}</li>\\n{% endfor %}\\n</ul>\\n```\\n\\nMiniJinja\uff08\u7c7b\u4f3c\u4e8e Jinja2\uff09\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684 loop \u53d8\u91cf\u53ef\u4ee5\u8bbf\u95ee\u5faa\u73af\u7684\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 `loop.index`\\n\u6765\u83b7\u53d6\u5f53\u524d\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570\u3002\u5728 MiniJinja \u7684\u5de5\u4f5c\u539f\u7406\u4e2d\uff0c\'\u5faa\u73af\u63a7\u5236\u5668\' \u672c\u8eab\u4f1a\u88ab\u76f4\u63a5\u4f20\u9012\u7ed9\u6a21\u677f\uff0c\u5e76\u4e14\u628a\u503c\u672c\u8eab\u5f53\u4f5c\u5f15\u7528\u8ba1\u6570\u5b58\u8fdb\u53bb\u3002\\n\\n```rs\\npub struct LoopState {\\n    len: AtomicUsize,\\n    idx: AtomicUsize,\\n}\\n\\nlet controller = Rc::new(LoopState {\\n    idx: AtomicUsize::new(!0usize),\\n    len: AtomicUsize::new(len),\\n});\\n```\\n\\n\u5f53\u5faa\u73af\u8fed\u4ee3\u65f6\uff0c\u63a7\u5236\u5668\u4e0a\u7684\u7d22\u5f15\u4f1a +1\u3002\\n\\n```rs\\ncontroller.idx.fetch_add(1, Ordering::Relaxed);\\n```\\n\\n\u63a7\u5236\u5668\u672c\u8eab\u4f1a\u88ab\u76f4\u63a5\u6dfb\u52a0\u5230\u4e0a\u4e0b\u6587\u4e2d\uff1a\\n\\n```rs\\nlet template_side_controller = Value::from_object(controller);\\n```\\n\\n\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u63a7\u5236\u5668\u9700\u8981\u5b9e\u73b0 MiniJinja \u5185\u90e8\u7684 `Object` \u7279\u5f81\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u6700\u5c0f\u5b9e\u73b0\uff1a\\n\\n```rs\\nimpl Object for LoopState {\\n    fn attributes(&self) -> &[&str] {\\n        &[\\"index\\", \\"length\\"][..]\\n    }\\n\\n    fn get_attr(&self, name: &str) -> Option<Value> {\\n        let idx = self.idx.load(Ordering::Relaxed) as u64;\\n        let len = self.len.load(Ordering::Relaxed) as u64;\\n        match name {\\n            \\"index\\" => Some(Value::from(idx + 1)),\\n            \\"length\\" => Some(Value::from(len)),\\n            _ => None,\\n        }\\n    }\\n}\\n```\\n\\n\u5728\u6a21\u677f\u5f15\u64ce\u90a3\u4e00\u8fb9\uff0c\u7cfb\u7edf\u77e5\u9053\u5f53 `index` \u5c5e\u6027\u88ab\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u8c03\u7528 `get_attr()` \u65b9\u6cd5\u3002\\n\\n\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u6240\u8bf4\u7684\u90fd\u662f\u7406\u8bba\uff0cserde \u7a76\u7adf\u662f\u5982\u4f55\u505a\u7684\u5462\uff1f\u5f53 `Value::from_object` \u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u503c\u4f1a\u88ab `move` \u5230 value\\n\u5bf9\u8c61\u91cc\u3002\u8fd9\u6837\u505a\u4e0d\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u7279\u522b\u662f\u7531\u4e8e\u5df2\u7ecf\u4f7f\u7528\u4e86\u5f15\u7528\u8ba1\u6570\u3002\u4f46\u662f\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5bf9\u4e8e\u50cf `LoopState` \u8fd9\u6837\u672c\u8eab\u6ca1\u6709\u5b9e\u73b0 `Serialize`\\n\u7684\u4e1c\u897f\uff0c\u5b83\u7684\u503c\u662f\u5982\u4f55\u88ab\u5e8f\u5217\u5316\u7684\uff1f\u7b54\u6848\u662f\u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\uff08thread local storage\uff09\u548c\u4e00\u4e2a\u5408\u4f5c\u7684\uff08co-operating\uff09\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u5668\u3002\\n\\n## \u8d8a\u8fc7\u8fb9\u754c\u7684 State\\n\\n_Out of Bound State_\\n\\n\u9690\u85cf\u5728 MiniJinja \u7684 Value \u5b9e\u73b0\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\\n\\n```rs\\nconst VALUE_HANDLE_MARKER: &str = \\"\\\\x01__minijinja_ValueHandle\\";\\nthread_local! {\\n     static INTERNAL_SERIALIZATION: AtomicBool = AtomicBool::new(false);\\n     static LAST_VALUE_HANDLE: AtomicUsize = AtomicUsize::new(0);\\n     static VALUE_HANDLES: RefCell<BTreeMap<usize, Value>> = RefCell::new(BTreeMap::new());\\n }\\n\\nfn in_internal_serialization() -> bool {\\n    INTERNAL_SERIALIZATION.with(|flag| flag.load(atomic::Ordering::Relaxed))\\n}\\n```\\n\\n\u5b83\u4eec\u7684\u7528\u5904\u662f\uff0cValue\\n\u81ea\u8eab\u80fd\u591f\u611f\u77e5\u5230\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u5185\u90e8\u5e8f\u5217\u5316\u7684\u7279\u6b8a\u5f62\u5f0f\u3002\u8fd9\u79cd\u5185\u90e8\u5e8f\u5217\u5316\u662f\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\u5e8f\u5217\u5316\uff0c\u6211\u4eec\u660e\u786e\u77e5\u9053\u6211\u4eec\u7684\u5e8f\u5217\u5316\u6570\u636e\u7684\u63a5\u6536\u8005\u662f\u4e00\u4e2a\u53ef\u4ee5\u7406\u89e3\u8be5\u6570\u636e\u7684\u53cd\u5e8f\u5217\u5316\u5668\u3002\u6211\u4eec\u6ca1\u6709\u76f4\u63a5\u5bf9\u6570\u636e\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u800c\u662f\u5c06\u5176\u5b58\u5165\u5230\\nTLS \u4e2d\uff0c\u7136\u540e\u628a\u6570\u636e\u7684\u53e5\u67c4\u5e8f\u5217\u5316\u5230 serde \u5e8f\u5217\u5316\u5668\u4e2d\u3002\u53cd\u5e8f\u5217\u5316\u5668\u4f1a\u5148\u53cd\u5e8f\u5217\u5316\u53e5\u67c4\uff0c\u63a5\u7740\u518d\u4ece TLS \u4e2d\u63d0\u53d6\u503c\u3002\\n\\n\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u5faa\u73af\u63a7\u5236\u5668\u5e8f\u5217\u5316\u7684\u5b9e\u73b0\u5927\u81f4\u5982\u4e0b\uff1a\\n\\n```rs\\nimpl Serialize for Value {\\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\\n    where\\n        S: Serializer,\\n    {\\n        // enable round tripping of values\\n        if in_internal_serialization() {\\n            use serde::ser::SerializeStruct;\\n            let handle = LAST_VALUE_HANDLE.with(|x| x.fetch_add(1, atomic::Ordering::Relaxed));\\n            VALUE_HANDLES.with(|handles| handles.borrow_mut().insert(handle, self.clone()));\\n            let mut s = serializer.serialize_struct(VALUE_HANDLE_MARKER, 1)?;\\n            s.serialize_field(\\"handle\\", &handle)?;\\n            return s.end();\\n        }\\n\\n        // ... here follows implementation for serializing to JSON etc.\\n    }\\n}\\n```\\n\\n\u5982\u679c\u5b83\u88ab\u5e8f\u5217\u5316\u4e3a JSON\uff0c\u6211\u4eec\u5927\u81f4\u80fd\u770b\u5230\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\\n\\n```json\\n{ \\"\\\\u0001__minijinja_ValueHandle\\": 1 }\\n```\\n\\n\u800c\u771f\u6b63\u7684\u5faa\u73af\u63a7\u5236\u5668\u5c06\u88ab\u5b58\u50a8\u5728 `VALUE_HANDLES` \u4e2d\u53e5\u67c4\u4e3a 1 \u5904\u3002\u73b0\u5728\u6211\u4eec\u5982\u4f55\u4ece\u91cc\u9762\u7684\u5230\u6570\u503c\u5462\uff1f\u5728 MiniJinja\\n\u4e2d\uff0c\u53cd\u5e8f\u5217\u5316\u5176\u5b9e\u4ece\u672a\u53d1\u751f\uff0c\u53ea\u6709\u5e8f\u5217\u5316\u3002\u800c\u4e14\u5e8f\u5217\u5316\u4e5f\u53ea\u662f\u5c06\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u7ec4\u88c5\u8d77\u6765\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u5e8f\u5217\u5316\u5668\u7406\u89e3\u5e26\u5185\u4fe1\u4ee4\u5982\u4f55\u5904\u7406\uff0c\u5e76\u4ee5\u6b64\u627e\u5230\u5e26\u5916\u7684\u503c\u3002\\n\\n```rs\\nimpl ser::SerializeStruct for SerializeStruct {\\n    type Ok = Value;\\n    type Error = Error;\\n\\n    fn serialize_field<T: ?Sized>(&mut self, key: &\'static str, value: &T) -> Result<(), Error>\\n    where\\n        T: Serialize,\\n    {\\n        let value = value.serialize(ValueSerializer)?;\\n        self.fields.insert(key, value);\\n        Ok(())\\n    }\\n\\n    fn end(self) -> Result<Value, Error> {\\n        match self.name {\\n            VALUE_HANDLE_MARKER => {\\n                let handle_id = self.fields[\\"handle\\"].as_usize();\\n                Ok(VALUE_HANDLES.with(|handles| {\\n                    let mut handles = handles.borrow_mut();\\n                    handles\\n                        .remove(&handle_id)\\n                        .expect(\\"value handle not in registry\\")\\n                }))\\n            }\\n            _ => /* regular struct code */\\n        }\\n    }\\n}\\n```\\n\\n## Ser-to-De\\n\\n\u4e0a\u9762\u7684\u4f8b\u5b50\u662f\u4f60\u53ef\u4ee5\u6ee5\u7528\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u540c\u6837\u7684\u6a21\u5f0f\u5728\u771f\u5b9e\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e2d\u4e5f\u53ef\u4ee5\u7528\u5230\u3002\u5728 MiniJinja\\n\u4e2d\uff0c\u6211\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5e8f\u5217\u5316\uff0c\u56e0\u4e3a\u6211\u6709\u6548\u5730\u5229\u7528\u4e86\u5e8f\u5217\u5316\u4ee3\u7801\uff0c\u4ece\u4e00\u79cd\u5185\u5b58\u683c\u5f0f\u8f6c\u6362\u5230\u53e6\u4e00\u79cd\u5185\u5b58\u683c\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u5728\u8fdb\u7a0b\u95f4\u4f20\u9012\u6570\u636e\uff0c\u60c5\u51b5\u5c31\u4f1a\u53d8\u5f97\u68d8\u624b\u4e00\u4e9b\uff0c\u5b9e\u9645\u7684\u5e8f\u5217\u5316\u5c31\u662f\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u4f60\u60f3\u5efa\u7acb\u4e00\u4e2a\\nIPC\\n\u7cfb\u7edf\uff0c\u5728\u8fdb\u7a0b\u4e4b\u95f4\u4ea4\u6362\u6570\u636e\uff0c\u8fd9\u91cc\u7684\u6311\u6218\u662f\uff0c\u51fa\u4e8e\u6027\u80fd\u7684\u8003\u8651\uff0c\u5bf9\u4e8e\u6bd4\u8f83\u5927\u7684\u5185\u5b58\u6bb5\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u5171\u4eab\u5185\u5b58\uff0c\u6216\u8005\u662f\u4ee5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5f62\u5f0f\u4f20\u9012\u6253\u5f00\u7684\u6587\u4ef6\uff08\u56e0\u4e3a\u8fd9\u4e9b\u6587\u4ef6\u6709\u53ef\u80fd\u662f\\nsocket\uff09\u3002\u5728\u6211\u7684\u5b9e\u9a8c\u6027 [unix-ipc](https://github.com/mitsuhiko/unix-ipc) crate\\n\u4e2d\uff0c\u6211\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\\n\\n\u6211\u5728\u8fd9\u91cc\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e8c\u7ea7\u7f13\u51b2\u533a\uff0c\u5b83\u53ef\u4ee5\u653e\u7f6e\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u540c\u6837\uff0c\u8fd9\u91cc\u5fc5\u987b\u4f7f\u7528 TLS\u3002\\n\\nAPI \u5927\u81f4\u5982\u4e0b\uff1a\\n\\n```rs\\npub fn serialize<S: Serialize>(s: S) -> io::Result<(Vec<u8>, Vec<RawFd>)> {\\n    let mut fds = Vec::new();\\n    let mut out = Vec::new();\\n    enter_ipc_mode(|| bincode::serialize_into(&mut out, &s), &mut fds)\\n        .map_err(bincode_to_io_error)?;\\n    Ok((out, fds))\\n}\\n```\\n\\n\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u4e9b\u90fd\u662f\u900f\u660e\u7684\u3002\u5f53\u4e00\u4e2a Serailize \u5b9e\u73b0\u9047\u5230\u4e86\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\u65f6\uff0c\u5b83\u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u5e94\u8be5\u4f7f\u7528 IPC \u7684\u5e8f\u5217\u5316\uff0c\u5982\u679c\u662f\uff0c\u5b83\u53ef\u4ee5\u628a FD\\n\u5b58\u8d77\u6765\uff0c`enter_ipc_mode` \u57fa\u672c\u4e0a\u5c06 fds \u7ed1\u5b9a\u5230\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u91cc\uff0c\u63a5\u7740\u8c03\u7528 `register_fd`\\n\u6ce8\u518c\u5b83\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u5c55\u793a\u4e86\u5185\u90e8\u53e5\u67c4\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff1a\\n\\n```rs\\nimpl<F: IntoRawFd> Serialize for Handle<F> {\\n    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\\n    where\\n        S: ser::Serializer,\\n    {\\n        if is_ipc_mode() {\\n            // effectively a weird version of `into_raw_fd` that does\\n            // consume\\n            let fd = self.extract_raw_fd();\\n            let idx = register_fd(fd);\\n            idx.serialize(serializer)\\n        } else {\\n            Err(ser::Error::custom(\\"can only serialize in ipc mode\\"))\\n        }\\n    }\\n}\\n```\\n\\n\u7136\u540e\u662f\u53cd\u5e8f\u5217\u5316\uff1a\\n\\n```rs\\nimpl<\'de, F: FromRawFd + IntoRawFd> Deserialize<\'de> for Handle<F> {\\n    fn deserialize<D>(deserializer: D) -> Result<Handle<F>, D::Error>\\n    where\\n        D: de::Deserializer<\'de>,\\n    {\\n        if is_ipc_mode() {\\n            let idx = u32::deserialize(deserializer)?;\\n            let fd = lookup_fd(idx).ok_or_else(|| de::Error::custom(\\"fd not found in mapping\\"))?;\\n            unsafe { Ok(Handle(Mutex::new(Some(FromRawFd::from_raw_fd(fd))))) }\\n        } else {\\n            Err(de::Error::custom(\\"can only deserialize in ipc mode\\"))\\n        }\\n    }\\n}\\n```\\n\\n\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ed6\u53ea\u9700\u8981\u901a\u8fc7 IPC channel \u4f20\u9012\u4e00\u4e2a `Handle::new(my_file)` \u5c31\u80fd\u5b9e\u73b0\u3002\\n\\n## Serde \u7684\u73b0\u72b6\\n\\n_State of Serde_\\n\\n\u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u6240\u6709\u7684\u4e1c\u897f\u90fd\u4f9d\u8d56\u7ebf\u7a0b\u672c\u5730\u53d8\u91cf\u548c\u5bf9\u5185\u4fe1\u4ee4\u3002\u6574\u4f53\u4e0a\u90fd\u4e0d\u662f\u5f88\u597d\uff0c\u5982\u679c\u6709\u4e00\u5929\u51fa\u4e86 serde 2.0\uff0c\u6211\u5e0c\u671b\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e0a\u9762\u7684\u5185\u5bb9\u3002\\n\\n\u5b9e\u9645\u4e0a\uff0c\u73b0\u5728\u7684 serde \u4ecd\u7136\u6709\u4e0d\u5c11\u95ee\u9898\u548c\u4e0a\u8ff0\u7684 Hack \u884c\u4e3a\u76f8\u5173\u3002\\n\\n- [serde requires in-band signalling](https://github.com/serde-rs/serde/issues/1463)\\n- [Internal buffering disrupts format-specific deserialization features](https://github.com/serde-rs/serde/issues/1183)\\n- [serde_json\'s arbitrary precision feature incompatible with flatten](https://github.com/serde-rs/json/issues/721)\\n\\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u5728\u6211\u4eec\u9700\u8981\u91cd\u5199 serde \u4e4b\u524d\uff0c\u80af\u5b9a\u8fd8\u6709\u8fdb\u4e00\u6b65\u53ef\u4ee5\u88ab\u6ee5\u7528\u7684\u5730\u65b9\u3002\u4f46\u662f\u73b0\u5728\u662f\u65f6\u5019\u5e94\u8be5\u6162\u6162\u8003\u8651 serve\\n\u672a\u6765\u7248\u672c\u7684\u8bbe\u60f3\u4e86\u5b83\u5e94\u8be5\u5bf9\u6570\u636e\u6a21\u578b\u7684\u652f\u6301\u66f4\u53cb\u597d\uff0c\u53ef\u4ee5\u7528\u66f4\u5c11\u7684 Hack \u6765\u8131\u79bb\u89c4\u5b9a\u6846\u67b6\u3002"},{"id":"/2023/01/02/[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86","metadata":{"permalink":"/blog/2023/01/02/[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86","source":"@site/blog/2023-01-02-[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86.md","title":"[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86","description":"\u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2022/1/30/unsafe-rust/","date":"2023-01-02T00:00:00.000Z","formattedDate":"2023\u5e741\u67082\u65e5","tags":[],"readingTime":12.55,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde","permalink":"/blog/2023/01/03/[\u8bd1] Rust\u5192\u9669: \u6ee5\u7528 Serde"},"nextItem":{"title":"[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map","permalink":"/blog/2023/01/01/[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map"}},"content":"> \u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2022/1/30/unsafe-rust/\\n>\\n> **\u7ffb\u8bd1\uff1a[trdthg](https://github.com/trdthg)**\\n>\\n> \u9009\u9898\uff1a[trdthg](https://github.com/trdthg)\\n>\\n> \u672c\u6587\u7531 [Rustt](https://Rustt.org) \u7ffb\u8bd1\uff0c[StudyRust](https://studyrust.org) \u8363\u8a89\u63a8\u51fa\\n\\n# \u672a\u521d\u59cb\u5316\u5185\u5b58\uff1aunsafe Rust \u592a\u96be\u4e86\\n\\nRust\\n\u5728\u5f88\u591a\u610f\u4e49\u4e0a\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u73b0\u4ee3\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u662f\u4e00\u4e2a\u5b9e\u7528\u7684\u8bed\u8a00\u3002\u5b83\u627f\u8bfa\u4e86\u81ea\u5df1\u7684\u5b89\u5168\u6027\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6846\u67b6\uff0c\u4f7f\u5f97\u521b\u5efa\u5b89\u5168\u7684\u62bd\u8c61\u6210\u4e3a\u53ef\u80fd\uff0c\u540c\u65f6\u8fd0\u884c\u65f6\u5f00\u9500\u5f88\u5c0f\u751a\u81f3\u4e3a\\n0\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 unsafe \u6765\u660e\u786e\u7684\u8131\u79bb\u5b89\u5168\u7684 Rust\u3002\\n\\n\u5982\u679c\u4f60\u4e4b\u524d\u770b\u8fc7\u8fd9\u7bc7\u6587\u7ae0\uff0c\u4f60\u4f1a\u60ca\u8bb6\u7684\u53d1\u73b0\uff0c\u5b83\u548c\u4e4b\u524d\u7684\u7248\u672c\u5927\u4e0d\u76f8\u540c\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u4f5c\u8005\u662f\u88ab unsafe\\n\u7684\u89c4\u5219\u6240\u56f0\u60d1\u7684\u53d7\u5bb3\u8005\u3002\u6211\u5728\u6587\u7ae0\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u7528\u6765\u66f4\u597d\u7684\u5c55\u793a\u5176\u4e2d\u7684\u9677\u9631\u3002\u6211\u4e4b\u524d\u5728 Twitter \u4e0a\u8bf4\u8fc7\uff0c\u7f16\u5199 unsafe Rust \u6bd4 C / C++\\n\u66f4\u56f0\u96be\uff0c\u6240\u4ee5\u6211\u60f3\u4e3a\u6211\u7684\u89c2\u70b9\u4f5c\u51fa\u4e00\u4e9b\u89e3\u91ca\u3002\\n\\n## \u4ece C \u5230 Rust\\n\\n\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u4f8b\u5b50\u5f00\u59cb\uff1a\u6211\u4eec\u6709\u4e00\u4e2a\u5f85\u521d\u59cb\u5316\u7684\u7ed3\u6784\u4f53\u3002\u6bd4\u8f83\u6709\u8da3\u7684\u5b57\u6bb5\u662f\\n`name`\u3002\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u597d\u7684\u5b57\u7b26\u4e32\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5206\u914d\u5230\u54ea\u91cc\u5bf9\u6211\u4eec\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u7ed3\u6784\u4f53\u81ea\u8eab\u5206\u914d\u5728\u6808\u4e0a\u3002\u6211\u4eec\u7684\u60f3\u6cd5\u662f\uff0c\u5f53\u8fd9\u4e2a\u7ed3\u6784\u4f53\u88ab\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u5b89\u5168\u7684\u4f20\u9012\u548c\u6253\u5370\u3002\\n\\n```cpp\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdbool.h>\\n\\nstruct role {\\n    char *name;\\n    bool disabled;\\n    int flag;\\n};\\n\\nint main() {\\n    struct role r;\\n    r.name = strdup(\\"basic\\");\\n    r.flag = 1;\\n    r.disabled = false;\\n    printf(\\"%s (%d, %s)\\\\n\\", r.name, r.flag, r.disabled ? \\"true\\" : \\"false\\");\\n    free(r.name);\\n}\\n```\\n\\n\u63a5\u4e0b\u6765\u6211\u4eec\u7528 Rust \u53bb\u5b9e\u73b0\u4e0a\u9762\u7684\u4ee3\u7801\u3002\u73b0\u5728\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u5173\u6ce8 Rust\\n\u6587\u6863\uff0c\u53ea\u9700\u8981\u4e13\u6ce8\u4e8e\u4e00\u5bf9\u4e00\u7ffb\u8bd1\u5373\u53ef\u3002\u5728\u4f60\u9605\u8bfb\u4e0b\u9762\u7684\u4ee3\u7801\u4e4b\u524d\u8fd8\u6709\u4e00\u70b9\u8981\u6ce8\u610f\uff1a\u6211\u4eec\u6b63\u5728\u6709\u610f\u7684\u521b\u5efa\u4e00\u4e2a\u5bf9 Rust \u7a0b\u5e8f\u5458\u66f4\u719f\u6089\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u770b\u4f5c\u516c\u5171\\nAPI\u3002\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 String\uff0c\u800c\u4e0d\u662f C \u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u3002\\n\\n```rs\\nuse std::mem;\\n\\nstruct Role {\\n    name: String,\\n    disabled: bool,\\n    flag: u32,\\n}\\n\\nfn main() {\\n    let role = unsafe {\\n        let mut role: Role = mem::zeroed();\\n        role.name = \\"basic\\".to_string();\\n        role.flag = 1;\\n        role.disabled = false;\\n        role\\n    };\\n\\n    println!(\\"{} ({}, {})\\", role.name, role.flag, role.disabled);\\n}\\n```\\n\\n\u770b\u5230\u8fd9\u91cc\uff0c\u7acb\u5373\u5c31\u6709\u4eba\u60f3\u95ee\uff0c\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u9700\u8981\\nunsafe\uff1f\u5f53\u7136\u4e86\uff0c\u4f60\u7684\u786e\u4e0d\u9700\u8981\u3002\u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff1a`std::mem::zeroed`\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u5728\u6700\u8fd1\u7684 Rust\\n\u7f16\u8bd1\u5668\u8fd0\u884c\uff0c\u5e94\u8be5\u4f1a\u7684\u5f97\u5230\u8fd9\u4e2a\u9519\u8bef\uff1a\\n\\n```rs\\nthread \'main\' panicked at \'attempted to zero-initialize type `Role`,\\n  which is invalid\', src/main.rs:11:30\\n```\\n\\n\u8001\u7248\u672c\u7684\u7f16\u8bd1\u5668\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u662f\u90a3\u5176\u5b9e\u4e5f\u662f\u9519\u8bef\u7684\u3002\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u7f16\u8bd1\u5668\u53c8\u4e00\u6b21\u544a\u8bc9\u6211\u4eec\u89e3\u51b3\u4e4b\u6cd5\uff1a\\n\\n```rs\\nwarning: the type `Role` does not permit zero-initialization\\n  --\x3e src/main.rs:11:30\\n   |\\n11 | let mut role: Role = mem::zeroed();\\n   |                      ^^^^^^^^^^^^^\\n   |                      |\\n   |                      this code causes undefined behavior when executed\\n   |                      help: use `MaybeUninit<T>` instead, and only call\\n   |                         `assume_init` after initialization is done\\n   |\\n```\\n\\n\u4e3a\u4ec0\u4e48 `Role` \u7c7b\u578b\u4e0d\u652f\u6301\u4f7f\u7528 0 \u521d\u59cb\u5316\u5462\uff1f\u6211\u4eec\u9700\u8981\u6539\u52a8\u90a3\u4e9b\u4ee3\u7801\uff1f\u6211\u4eec\u80fd\u4e0d\u80fd\u4e0d\u521d\u59cb\u5316\uff1f\\n\\n\u6709\u4eba\u53ef\u80fd\u4f1a\u60f3\uff0c\u4f7f\u7528 `#[repr(C)]` \u5f3a\u5236\u7ed3\u6784\u4f53\u4f7f\u7528 C \u8bed\u8a00\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u4f46\u662f\u8fd9\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\u3002\u6b63\u5982\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u5efa\u8bae\uff0c\u6211\u4eec\u9700\u8981\\n`MaybeUninit`\u3002\\n\\n```rs\\nuse std::mem::MaybeUninit;\\n\\nstruct Role {\\n    name: String,\\n    disabled: bool,\\n    flag: u32,\\n}\\n\\nfn main() {\\n    let role = unsafe {\\n        let mut uninit = MaybeUninit::<Role>::zeroed();\\n        let role = uninit.as_mut_ptr();\\n        (*role).name = \\"basic\\".to_string();\\n        (*role).flag = 1;\\n        (*role).disabled = false;\\n        uninit.assume_init()\\n    };\\n\\n    println!(\\"{} ({}, {})\\", role.name, role.flag, role.disabled);\\n}\\n```\\n\\n\u5c06 `zeroed` \u6362\u4e3a `MaybeUninit::zeroed` \u4e4b\u540e\uff0c\u4e00\u5207\u90fd\u53d8\u4e86\u3002\u73b0\u5728\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u800c\u662f\u8981\u64cd\u4f5c\u4e00\u4e2a\u88f8\u6307\u9488\u3002\u7531\u4e8e\u88f8\u6307\u9488\u6ca1\u6709\u5b9e\u73b0\\n`deref`\uff0c\u5e76\u4e14 Rust \u4e2d\u6ca1\u6709 `->` \u64cd\u4f5c\u7b26\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u89e3\u5f15\u7528\uff0c\u5e76\u7528\u8fd9\u79cd\u7b28\u62d9\u7684\u8bed\u6cd5\u5206\u914d\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u3002\\n\\n\u9996\u5148\uff1a\u8fd9\u6837\u505a\u53ef\u884c\u5417\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u4f46\u662f\u5b83\u6b63\u786e\u5417\uff1f\u4e0d\u6b63\u786e\u3002\\n\\n\u7b54\u6848\u5728\u4e8e\uff0c\u4efb\u4f55\u50cf\u53ef\u53d8\u5f15\u7528\uff08&mut\uff09\u6216\u8005\u662f\u6808\u4e0a\u7684\u503c\u672c\u8eab\u8fd9\u6837\u7684\u6784\u9020\uff0c\u5728 unsafe \u4ee3\u7801\u4e4b\u5916\u4ecd\u7136\u9700\u8981\u4e00\u76f4\u5904\u4e8e\u6709\u6548\u7684\u72b6\u6001\u3002`zeroed` \u8fd4\u56de\u4e00\u4e2a\u503c\u4e3a 0\\n\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u53ef\u4ee5\u6709\u6548\u7684\u8868\u793a\u7ed3\u6784\u4f53\u6216\u8005\u4efb\u4f55\u5176\u4e2d\u7684\u5b57\u6bb5\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u5728\u6240\u6709\u5185\u5bb9\u88ab\u6e05\u96f6\u7684\u60c5\u51b5\u4e0b\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\uff0c\u800c\u4e14\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u6c38\u8fdc\u4e0d\u80fd\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u5728\u5bf9\u8c61\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u88ab\u521d\u59cb\u5316\u4e4b\u524d\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u9519\u8bef\u7684\uff1a\\n\\n```rs\\nlet role = &mut *uninit.as_mut_ptr()\\n```\\n\\n\u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u628a `zeroed` \u6539\u4e3a `uninit`\u3002\u5982\u679c\u6211\u4eec\u518d\u6b21\u8fd0\u884c\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u5d29\u6e83\u3002\\n\\n```rs\\n// let mut uninit = MaybeUninit::<Role>::uninit();\\nfree(): invalid pointer\\n```\\n\\n\u4e3a\u4ec0\u4e48\u4f1a\u5d29\u6e83\u5462\uff1f\u7b54\u6848\u662f\uff0c\u901a\u8fc7\u7ed9 name \u8d4b\u503c\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u4e5f drop \u4e86\u4e4b\u524d\u7684\u65e7\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u4e4b\u524d\u53ea\u662f\u78b0\u5de7\u6ca1\u6709\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a Drop\\n\u78b0\u5de7\u80fd\u591f\u5904\u7406\u4e00\u4e2a\u88ab\u6e05\u96f6\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u73b0\u5728\uff0c\u6211\u4eec\u6df1\u5165\u4e86\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u5199\u5230\u90a3\u91cc\u7684\u6307\u9488\u3002\\n\\n\u6211\u4eec\u9996\u5148\u8981\u63a5\u53d7 MaybeUninit \u662f\u5fc5\u8981\u7684\uff0c\u73b0\u5728\u6211\u4eec\u8981\u5904\u7406\u8fd9\u91cc\u7684\u88f8\u6307\u9488\u3002\u8fd9\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u770b\u8d77\u6765\u4e0d\u662f\u7279\u522b\u96be\u3002\u73b0\u5728\u6211\u4eec\u6709\u4e24\u4e2a\u65b0\u95ee\u9898\uff1a\u6211\u4eec\u77e5\u9053 `&mut X`\\n\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u4f46\u662f `*mut X` \u662f\u5141\u8bb8\u7684\u3002\u6211\u4eec\u5982\u4f55\u5728\u4e0d\u4f7f\u7528 `&mut X` \u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a `*mut X`? \u8bbd\u523a\u7684\u662f\uff0c\u5728 Rust 1.51\\n\u4e4b\u524d\uff0c\u518d\u4e0d\u6253\u7834\u4efb\u4f55\u89c4\u5219\u4e4b\u524d\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `addr_of_mut!` \u5b8f\u3002\\n\\n```rs\\nlet name_ptr = std::ptr::addr_of_mut!((*role).name);\\n```\\n\\n\u592a\u68d2\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u62ff\u5230\u4e86 name \u7684\u6307\u9488\uff0c\u5982\u4f55\u5199\u5165\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `write` \u65b9\u6cd5\u3002\\n\\n```rs\\naddr_of_mut!((*role).name).write(\\"basic\\".to_string());\\n```\\n\\n\u73b0\u5728\u5b8c\u6210\u4e86\u5417\uff1f\u8fd8\u8bb0\u5f97\u6211\u4eec\u662f\u5982\u4f55\u4f7f\u7528\u666e\u901a\u7ed3\u6784\u4f53\u7684\u5417\uff1f\u5982\u679c\u9605\u8bfb\u4e00\u4e0b\u6587\u6863\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\uff0c\u7ed3\u6784\u4f53\u7684\u5185\u5b58\u5e03\u5c40\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\u3002\u4e8b\u5b9e\u8868\u660e\uff0c[\u5c3d\u7ba1\u76ee\u524d\u7684\u6587\u6863\u662f\u8fd9\u6837\u8bf4\u7684](https://github.com/rust-lang/reference/issues/1151)\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f9d\u9760\u5b57\u6bb5\u7684\u5bf9\u9f50\u6027\u3002\u5982\u679c\u6211\u4eec\u5904\u7406\u7684\u662f\\n`#[repr(packed)]`\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u4f7f\u7528 `write_unaligned` \u65b9\u6cd5\u6765\u4ee3\u66ff\u3002\u5982\u679c Rust\\n\u9009\u62e9\u7684\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u6210\u5458\u662f\u4e0d\u5bf9\u9f50\u7684\uff0c\u8fd9\u662f\u5408\u6cd5\u7684\u3002\\n\\n\u6700\u7ec8\u7684\u4ee3\u7801\uff1a\\n\\n```rs\\nuse std::mem::MaybeUninit;\\nuse std::ptr::addr_of_mut;\\n\\nstruct Role {\\n    name: String,\\n    disabled: bool,\\n    flag: u32,\\n}\\n\\nfn main() {\\n    let role = unsafe {\\n        let mut uninit = MaybeUninit::<Role>::uninit();\\n        let role = uninit.as_mut_ptr();\\n        addr_of_mut!((*role).name).write(\\"basic\\".to_string());\\n        (*role).flag = 1;\\n        (*role).disabled = false;\\n        uninit.assume_init()\\n    };\\n\\n    println!(\\"{} ({}, {})\\", role.name, role.flag, role.disabled);\\n}\\n```\\n\\n## \u4ec0\u4e48\u65f6\u5019\u7528 `addr_of_mut!`\\n\\n\u4e00\u822c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58\uff0c\u672a\u5bf9\u9f50\u7684\u5f15\u7528\u3002Rust\\n\u4e0d\u5141\u8bb8\u7528\u6237\u521b\u5efa\u4e00\u4e2a\u672a\u5bf9\u9f50\u7684\u5f15\u7528\uff08\u5373\u65f6\u53ea\u662f\u6682\u65f6\u7684\uff09\uff0c\u540c\u65f6\u4e5f\u4e0d\u5141\u8bb8\u521b\u5efa\u4e00\u4e2a\u5bf9\u672a\u521d\u59cb\u5316\u5185\u5b58\u7684\u5f15\u7528\u3002\u90a3\u4e48\uff0c\u8fd9\u4e9b\u5f15\u7528\u662f\u4ec0\u4e48\u65f6\u5019\u88ab\u521b\u5efa\u7684\u5462\uff1f\\n\\n\u5bf9\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a`(*flag).flag = 1`\uff0c\u6839\u636e Rust \u7684\u89c4\u5219\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u6ca1\u6709\u5b9e\u73b0 Drop\uff0c\u8fd9\u662f\u53ef\u4ee5\u7684\u3002\u5982\u679c\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86\\nDrop\uff0c\u8fd9\u884c\u4ee3\u7801\u4f1a\u4ea7\u751f\u5f88\u591a\u95ee\u9898\uff1a\u5f53 `Drop::drop` \u88ab\u8c03\u7528\u65f6\uff0c\u5e76\u4e14\u8c03\u7528\u5728\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58\u4e0a\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\\n`addr_of_mut!`\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e3a flag \u5b57\u6bb5\u8d4b\u503c\uff0c\u4f46\u662f\u6211\u4eec\u5374\u9700\u8981\u901a\u8fc7 `addr_of_mut!` \u6765\u83b7\u53d6 name\\n\u5b57\u6bb5\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\\n\\n## MaybeUninit\\n\\n\u5bf9\u5b89\u5168\u7684\u7406\u89e3\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u4e0d\u65ad\u6539\u53d8\u3002\u66fe\u7ecf\uff0c`mem::uninitialized` \u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5065\u5168\u7684 API\uff0c\u4f46\u662f\u5728\u540e\u6765\uff0c`MaybeUninit`\\n\u88ab\u5f15\u5165\u53bb\u89e3\u51b3\u53d1\u73b0\u7684\u7f3a\u70b9\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u90e8\u5206\u521d\u59cb\u5316\u7684\u7c7b\u578b\u7684\u5b58\u5728\uff0cMaybeUninit \u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u7406\u60f3\u3002\u867d\u7136\u7531\u4e8e `#[repr(transparent)]`\uff0c\\nMaybeUninit \u548c T \u662f\u5185\u5b58\u517c\u5bb9\u7684\uff0c\u4f46\u662f\u5728\u5d4c\u5957\u4f7f\u7528\u65f6\u7684\u6548\u679c\u5e76\u4e0d\u4f73\u3002\\n\\n\u6709\u65f6\u4f60\u9700\u8981\u7ed3\u6784\u4f53\u7684\u67d0\u4e2a\u5b57\u6bb5\u4e0a\u6709\u4e00\u4e2a MaybeUninit\uff0c\u4f46\u662f\u53ea\u540e\u4f60\u53c8\u5e0c\u671b\u8fd9\u4e2a\u62bd\u8c61\u4e0d\u5b58\u5728\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u7f55\u89c1\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u5b9e\u8df5\u4e2d\u4f7f\u7528 MaybeUninit\\n\u662f\u4e00\u4e2a\u5145\u6ee1\u6311\u6218\u7684\u4f53\u9a8c\uff0c\u4f46\u662f\u8fd9\u7bc7\u6587\u7ae0\u5e76\u6ca1\u6709\u4f53\u73b0\u51fa\u6765\u3002\\n\\n## \u6211\u7684 unsafe \u4ee3\u7801\u6b63\u786e\u5417\uff1f\\n\\n\u5728 2022 \u5e74\uff0c\u6211\u627f\u8ba4\uff0c\u6211\u4e0d\u518d\u5bf9\u7f16\u5199 Rust \u4ee3\u7801\u611f\u5230\u81ea\u4fe1\u3002unsafe \u7684\u89c4\u5219\u53ef\u80fd\u53ef\u80fd\u90fd\u662f\u5982\u6b64\u590d\u6742\uff0c\u4f46\u662f\u4ece\u6211\u591a\u5e74\u6765\u9605\u8bfb\u8fc7\u7684 unsafe \u4ee3\u7801\u6765\u8bf4\uff0c\u5927\u591a\u6570\\nunsafe \u4ee3\u7801\u90fd\u4e0d\u592a\u5173\u5fc3\u8fd9\u4e9b\u89c4\u5219\uff0c\u5e76\u4e14\u65e0\u89c6\u4e86\u5b83\u4eec\u3002`addr_of_mut!`\u76f4\u5230 1.53 \u624d\u88ab\u6dfb\u52a0\u5230\u8bed\u8a00\u4e2d\u662f\u6709\u539f\u56e0\u7684\u3002\u5373\u4f7f\u5230\u4e86\u4eca\u5929\uff0c\u6587\u6863\u4e2d\u90fd\u8bf4\u5b83\\nRust \u7ed3\u6784\u4f53 repr \u7684\u5bf9\u9f50\u65b9\u5f0f\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\u3002\\n\\n\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u4f3c\u4e4e\u53d1\u751f\u4e86\u8fd9\u6837\u7684\u4e8b\u60c5\uff1aRust \u5f00\u53d1\u8005\u5728\u5b9e\u8df5\u4e2d\u7f16\u5199 unsafe\\n\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u73b0\u5728\u7684\u89c4\u5219\u662f\u5982\u6b64\u590d\u6742\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u4e00\u4e2a\u968f\u610f\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\u975e\u5e38\u96be\u4ee5\u7406\u89e3\uff0c\u56f4\u7ed5\u4ed6\u7684\u6587\u6863\u4e5f\u5f88\u5bb9\u6613\u88ab\u66f2\u89e3\u3002\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684[\u4e0a\u4e00\u4e2a\u7248\u672c](https://github.com/mitsuhiko/lucumr/blob/48440d3cf151f0d774bc9ad62f903034ca2b30ff/2022/1/30/unsafe-rust.rst)\u4e2d\u8ba4\u4e3a\\n`addr_of_mut!` \u7684\u4e00\u4e9b\u4f7f\u7528\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\u3002\u5728\u6709\u4eba\u6307\u51fa\u8fd9\u4e2a\u9519\u8bef\u4e4b\u524d\uff0c\u6587\u7ae0\u5df2\u7ecf\u5f97\u5230\u4e86\u5927\u91cf\u5173\u6ce8\u3002\\n\\n\u8fd9\u4e9b\u89c4\u5219\u4f7f\u5f97 Rust \u6700\u597d\u7684\u529f\u80fd\u4e4b\u4e00\u8d8a\u6765\u8d8a\u96be\u4ee5\u63a5\u8fd1\uff0c\u540c\u65f6\u4e5f\u8d8a\u6765\u8d8a\u96be\u4ee5\u7406\u89e3\u3002\u8981\u6c42\u5b58\u5728 MaybeUninit\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8fc7\u53bb\u7684\\nmem::uninitialized API \u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u4f46\u662f\u5374\u5c55\u793a\u4e86\u8bed\u8a00\u89c4\u5219\u662f\u591a\u4e48\u7684\u590d\u6742\u3002\\n\\n\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u597d\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u8ba4\u4e3a\u8fd9\u6839\u672c\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u8d8b\u52bf\uff0c\u597d\u50cf\u8d8a\u6765\u8d8a\u5c11\u7684\u4eba\u4e86\u89e3 unsafe Rust\u3002\u4e0e C \u7684\u4e92\u64cd\u4f5c\u6027\u662f\u8ba9 Rust\\n\u4f1f\u5927\u7684\u4e00\u4e2a\u539f\u56e0\uff0c\u4f46\u662f\u6211\u4eec\u73b0\u5728\u6b63\u5728\u521b\u5efa\u5de8\u5927\u7684\u5c4f\u969c\uff0c\u8fd9\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u66f4\u91cd\u8981\u7684\u662f\uff1a\u7f16\u8bd1\u5668\u5728\u6307\u51fa\u6211\u7684\u9519\u8bef\u65f6\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9\u3002\\n\\n\u8ba9 unsafe \u53d8\u5f97\u66f4\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5b83\u503c\u5f97\u88ab\u89e3\u51b3\u3002\u56e0\u4e3a\u6709\u4e00\u70b9\u5f88\u660e\u786e\uff1a\u4eba\u4eec\u4e0d\u4f1a\u5f88\u5feb\u505c\u6b62\u7f16\u5199 unsafe \u4ee3\u7801\u3002"},{"id":"/2023/01/01/[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map","metadata":{"permalink":"/blog/2023/01/01/[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map","source":"@site/blog/2023-01-01-[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map.md","title":"[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map","description":"\u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2022/1/6/rust-extension-map/","date":"2023-01-01T00:00:00.000Z","formattedDate":"2023\u5e741\u67081\u65e5","tags":[],"readingTime":12.3,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86","permalink":"/blog/2023/01/02/[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86"},"nextItem":{"title":"Linux \u53d1\u884c\u7248\u914d\u7f6e","permalink":"/blog/i3wm"}},"content":"> \u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2022/1/6/rust-extension-map/\\n>\\n> **\u7ffb\u8bd1\uff1a[trdthg](https://github.com/trdthg)**\\n>\\n> \u9009\u9898\uff1a[trdthg](https://github.com/trdthg)\\n>\\n> \u672c\u6587\u7531 [Rustt](https://Rustt.org) \u7ffb\u8bd1\uff0c[StudyRust](https://studyrust.org) \u8363\u8a89\u63a8\u51fa\\n\\n# \u62d3\u5c55 Rust \u4e2d\u7684 Map\\n\\n\u5728 Rust \u4e2d\uff0c\u5982\u679c\u4f60\u60f3\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u7075\u6d3b\u7684 API\uff0c\u4e00\u822c\u53ef\u4ee5\u5f15\u5165\u6cdb\u578b\u53c2\u6570\u3002\u4ee5\u4e00\u4e2a web\\n\u6846\u67b6\u4e3a\u4f8b\uff0c\u5b83\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u7c7b\u578b\uff0c\u5e76\u4e14\u9700\u8981\u4f20\u9012\u7ed9\u5f88\u591a\u51fd\u6570\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7c7b\u578b\u9700\u8981\u80fd\u591f\u4ee5\u914d\u7f6e\u7684\u5f62\u5f0f\u88ab\u53c2\u6570\u5316\u3002\\n\\n## \u5f15\u5165 Any \u7279\u5f81\\n\\n\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528 `Any` \u7279\u5f81\u3002\u5b83\u9700\u8981\u4e00\u4e2a `\'static` \u7684\u751f\u547d\u5468\u671f\uff0c\u5f53\u4f60\u4e4b\u540e\u4f7f\u7528\u5b83\u65f6\uff0c\u8fd8\u9700\u8981\u7528 `Box`\\n\u8fdb\u884c\u88c5\u7bb1\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u80fd\u5bf9\u5b83\u8fdb\u884c\u5411\u4e0b\u8f6c\u578b\uff0c\u5373\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u67d0\u4e2a\u5730\u65b9\uff08\u6bd4\u5982\u6211\u4eec\u7684 App\uff09\u4e2d\u5b58\u50a8\u548c\u83b7\u53d6\u4efb\u610f\u7c7b\u578b\u3002\\n\\n\u6211\u4eec\u671f\u671b\u7684 API \u5927\u81f4\u5982\u4e0b\uff1a\\n\\n```rs\\nlet app = App::new();\\n\\n// place in extension map\\napp.extensions().insert(Config { ... });\\napp.extensions().insert(Database { ... });\\n\\n// retrieve from extension map\\nlet config = app.extensions().get::<Config>();\\n```\\n\\n\u6211\u4eec\u7684 app \u9700\u8981\u5bb9\u7eb3\u5176\u4ed6\u62d3\u5c55\u7684\u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528\u3002\\n\\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8bd5\u8bd5\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a\u51c6\u5907\u4e00\u4e2a `Extensions` \u5bf9\u8c61\uff0c\u8ba9\u5b83\u5b9e\u73b0\u63d2\u5165\u548c\u83b7\u53d6\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4e00\u4e2a\u62d3\u5c55\u8fd8\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u9ed8\u8ba4\u7684\uff08\u9700\u8981\u5b9e\u73b0\\n`Default` \u7279\u5f81\uff09\u3002\\n\\n```rs\\nuse std::collections::HashMap;\\nuse std::any::{Any, TypeId};\\n\\n#[derive(Default)]\\npub struct Extensions {\\n    map: HashMap<TypeId, Box<dyn Any>>,\\n}\\n\\nimpl Extensions {\\n    pub fn insert<T: \'static>(&mut self, value: T) {\\n        self.map.insert(TypeId::of::<T>(), Box::new(value));\\n    }\\n\\n    pub fn get<T: \'static>(&self) -> &T {\\n        self.map.get(&TypeId::of::<T>())\\n            .and_then(|b| b.downcast_ref())\\n            .unwrap()\\n    }\\n\\n    pub fn get_mut<T: Default + \'static>(&mut self) -> &mut T {\\n        self.ensure::<T>();\\n        self.map.get_mut(&TypeId::of::<T>())\\n            .and_then(|b| b.downcast_mut())\\n            .unwrap()\\n    }\\n\\n    fn ensure<T: Default + \'static>(&mut self) {\\n        if self.map.get(&TypeId::of::<T>()).is_none() {\\n            self.insert(T::default());\\n        }\\n    }\\n}\\n```\\n\\n\u4e0a\u9762\u7684\u4ee3\u7801\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u662f\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a\u9996\u5148\uff0c\u53ea\u6709 `get_mut` \u80fd\u591f\u8c03\u7528 `ensure` \u53bb\u63d2\u5165\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6709\u4eba\u76f4\u63a5\u8c03\u7528 `get` \u5c31\u4f1a\u5bfc\u81f4\\npanic\u3002\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u501f\u7528\u68c0\u67e5\u5668\u4f1a\u8ba9\u4e4b\u540e\u7684\u7f16\u5199\u975e\u5e38\u56f0\u96be\u3002\u4e0a\u9762\u7684 map \u5bf9\u4e8e\u89e3\u51b3\u7ecf\u5178\u7684\u95ee\u9898\uff08\u4f8b\u5982 app\uff09\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f60\u53ea\u9700\u8981\u914d\u7f6e\u4e00\u6b21\uff0c\u81ea\u90a3\u4e4b\u540e map\\n\u5c31\u50cf\u662f\u88ab\u51bb\u7ed3\u4e86\u4e00\u6837\uff0c\u56e0\u4e3a\u6709\u592a\u591a\u7684\u5f15\u7528\u5728\u98de\u6765\u5206\u98de\u53bb\uff0c\u4ee5\u81f3\u4e8e\u6ca1\u6709\u4eba\u80fd\u591f\u5f97\u5230 `&mut` \u7684\u5f15\u7528\u3002\\n\\nhow does it work\uff1f\\n\\n\u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5982\u4f55\u505a\u5230\u7684\u5462\uff0cRust \u4e2d\u7684\u6bcf\u4e00\u79cd\u7c7b\u578b\u90fd\u4f1a\u6709\u4e00\u4e2a type ID\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `TypeId::of::<T>()`\\n\u83b7\u53d6\u3002\u4ed6\u662f\u552f\u4e00\u7684\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u8fdb\u884c\u6bd4\u8f83\uff0c\u6216\u8005\u662f\u4f5c\u4e3a map \u7684\u952e\u6765\u4f7f\u7528\u3002\u6bcf\u79cd\u7c7b\u578b\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u503c\u3002\u63a5\u7740\u6211\u4eec\u628a T \u4f5c\u4e3a `dyn Any` \u5b58\u50a8\u5728 map\\n\u91cc\uff0c`Any` \u7279\u5f81\u5141\u8bb8\u6211\u4eec\u4f7f\u7528 `downcast_ref` \u548c `downcast_mut` \u65b9\u6cd5\u62ff\u5230\u539f\u59cb\u7c7b\u578b\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86 ensure\\n\u65b9\u6cd5\u786e\u4fdd\u8fd9\u91cc\u7684\u7c7b\u578b\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u7684 unwrap\u3002\\n\\n## \u5185\u90e8\u53ef\u53d8\u6027\\n\\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a web \u6846\u67b6\u6216\u8005\u662f\u6a21\u677f\u5f15\u64ce\u7684\u5e38\u89c1\u6848\u4f8b\u3002\u4ee5\\n[MiniJinja](https://github.com/mitsuhiko/minijinja)\uff08\u6a21\u677f\u5f15\u64ce\uff09\u4e3a\u4f8b\uff0c\u5b83\u91cc\u9762\u6709\u4e00\u4e2a State\\n\u5bf9\u8c61\uff0c\u6bcf\u6b21\u6a21\u677f\u521d\u59cb\u5316\u65f6\u90fd\u4f1a\u521b\u5efa\u4e00\u6b21\uff0cState \u6ca1\u6709\u5b9e\u73b0 Send \u548c Sync\uff0cMiniJinja \u5728\u8bc4\u4f30\u65f6\u9700\u8981 State\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u7528\u6237\u80fd\u591f\u653e\u5165\u81ea\u5b9a\u4e49\u7684\\nState \u5462\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u90e8\u4f7f\u7528 `RefCell` \u6765\u8c03\u6574\u4e0a\u9762\u7684\u7c7b\u578b\u3002\\n\\n```rs\\nuse std::collections::HashMap;\\nuse std::any::{Any, TypeId};\\nuse std::cell::{Ref, RefCell, RefMut};\\n\\n#[derive(Default)]\\npub struct Extensions {\\n    map: RefCell<HashMap<TypeId, Box<dyn Any>>>,\\n}\\n\\nimpl Extensions {\\n    pub fn insert<T: \'static>(&self, value: T) {\\n        self.map.borrow_mut().insert(TypeId::of::<T>(), Box::new(value));\\n    }\\n\\n    pub fn get<T: Default + \'static>(&self) -> Ref<\'_, T> {\\n        self.ensure::<T>();\\n        Ref::map(self.map.borrow(), |m| {\\n            m.get(&TypeId::of::<T>())\\n                .and_then(|b| b.downcast_ref())\\n                .unwrap()\\n        })\\n    }\\n\\n    pub fn get_mut<T: Default + \'static>(&self) -> RefMut<\'_, T> {\\n        self.ensure::<T>();\\n        RefMut::map(self.map.borrow_mut(), |m| {\\n            m.get_mut(&TypeId::of::<T>())\\n                .and_then(|b| b.downcast_mut())\\n                .unwrap()\\n        })\\n    }\\n\\n    fn ensure<T: Default + \'static>(&self) {\\n        if self.map.borrow().get(&TypeId::of::<T>()).is_none() {\\n            self.insert(T::default());\\n        }\\n    }\\n}\\n```\\n\\n\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002\u4e3b\u8981\u7684\u533a\u522b\u662f\u4f60\u4e0d\u9700\u8981\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u5c31\u80fd\u8c03\u7528 `get_mut`\uff0c\u8fd9\u4e00\u58ee\u4e3e\u662f\u7531 `RefCell` \u5b9e\u73b0\u7684\uff0cRefcell\\n\u80fd\u591f\u5c06\u68c0\u67e5\u79fb\u52a8\u5230\u8fd0\u884c\u65f6\u3002\u5f53\u4e00\u4e2a `RefMut` \u88ab\u7ed9\u51fa\u65f6\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4efb\u4f55\u7684\u53ef\u53d8\u6216\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u5c31\u4f1a\u53d1\u751f\\npanic\u3002\u5bf9\u4e8e\u8fd9\u91cc\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u53ef\u53d8\u7684\u5f15\u7528\u5728\u4f7f\u7528\u3002\u7279\u522b\u68d2\u7684\u662f\uff0cRef \u548c RefMut\\n\u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u7684 map \u65b9\u6cd5\uff0c\u8ba9\u4f60\u53ef\u4ee5\u8f7b\u677e\u6d3e\u751f\u51fa\u53e6\u4e00\u4e2a Ref \u6216 RefMut\uff0c\u5e76\u4fdd\u6301\u539f\u6765\u7684\u5f15\u7528\uff0c\u4f46\u5bf9\u503c\u8fdb\u884c\u8f6c\u6362\u3002\\n\\n## \u540c\u6b65\u652f\u6301\\n\\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u7528 Send \u548c Sync \u6765\u5b9e\u73b0\u548c\u4e0a\u9762\u76f8\u540c\u7684\u6548\u679c\u5462\uff1f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u9501\u3002\u53ef\u60dc\u7684\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Mutex \u548c RwLock \u4e0d\u80fd\u8ba9\u4f60\u5728\u62ff\u5230\u9501\u7684\u540c\u65f6\\nmap\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `parking_lot` \u66ff\u4ee3\uff0c\u5b83\u5b9e\u73b0\u4e86\u5fc5\u8981\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002\\n\\n```rs\\nuse parking_lot::{\\n    MappedRwLockReadGuard,\\n    MappedRwLockWriteGuard,\\n    RwLock,\\n    RwLockReadGuard,\\n    RwLockWriteGuard,\\n};\\nuse std::any::{Any, TypeId};\\nuse std::collections::HashMap;\\n\\n#[derive(Default)]\\npub struct Extensions {\\n    map: RwLock<HashMap<TypeId, Box<dyn Any>>>,\\n}\\n\\nimpl Extensions {\\n    pub fn insert<T: Send + Sync + \'static>(&self, value: T) {\\n        self.map.write().insert(TypeId::of::<T>(), Box::new(value));\\n    }\\n\\n    pub fn get<T: Send + Sync + Default + \'static>(&self) -> MappedRwLockReadGuard<\'_, T> {\\n        self.ensure::<T>();\\n        RwLockReadGuard::map(self.map.read(), |m| {\\n            m.get(&TypeId::of::<T>())\\n                .and_then(|b| b.downcast_ref())\\n                .unwrap()\\n        })\\n    }\\n\\n    pub fn get_mut<T: Send + Sync + Default + \'static>(&self) -> MappedRwLockWriteGuard<\'_, T> {\\n        self.ensure::<T>();\\n        RwLockWriteGuard::map(self.map.write(), |m| {\\n            m.get_mut(&TypeId::of::<T>())\\n                .and_then(|b| b.downcast_mut())\\n                .unwrap()\\n        })\\n    }\\n\\n    fn ensure<T: Default + Send + Sync + \'static>(&self) {\\n        if self.map.read().get(&TypeId::of::<T>()).is_none() {\\n            self.insert(T::default());\\n        }\\n    }\\n}\\n```\\n\\n\u6ce8\u610f\uff1a\u7531\u4e8e Any \u5e76\u6ca1\u6709\u5b9e\u73b0 Debug\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u4e3a\u6211\u4eec\u7684 map \u5b9e\u73b0 Debug \u7279\u5f81\uff0c\u4e00\u4e9b\u7b80\u5355\u7684\u6539\u53d8\u5e76\u4e0d\u80fd\u89e3\u51b3\u76ee\u524d\u7684\u95ee\u9898\u3002\u4e0b\u534a\u90e8\u5206\u6211\u4eec\u5c06\u4ecb\u7ecd\\n`as-any` \u6a21\u5f0f\\n\\n\u6211\u4eec\u9762\u4e34\u7684\u6311\u6218\u662f\uff0c\u5728 Rust \u91cc\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528 `Box<Any + Debug>`\uff0c\u7136\u800c\u8fd8\u662f\u6709\u4e00\u4e9b\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n## \u4e3a map \u5b9e\u73b0 Debug\\n\\n### \u7b80\u5316\u95ee\u9898\\n\\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u5bf9 `Box<dyn Any>` \u505a\u4e00\u4e2a\u5305\u88c5\uff0c\u5e76\u8ba9 Wrapper \u5b9e\u73b0 Debug\u3002\\n\\n```rs\\n#[derive(Debug)]\\nstruct AnyBox(Box<dyn Any + Debug>);\\n```\\n\\n\u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\uff0c\u7f16\u8bd1\u5668\u5e94\u8be5\u4f1a\u5f88\u4e0d\u9ad8\u5174\u7684\u629b\u51fa\u9519\u8bef\uff1a\\n\\n```rs\\nerror[E0225]: only auto traits can be used as additional traits in a trait object\\n --\x3e src/main.rs:9:29\\n  |\\n9 | struct AnyBox(Box<dyn Any + Debug>);\\n  |                       ---   ^^^^^ additional non-auto trait\\n  |                       |\\n  |                       first non-auto trait\\n  |\\n  = help: consider creating a new trait with all of these as supertraits and\\n    using that trait here instead: `trait NewTrait: Any + Debug {}`\\n```\\n\\n### \u8d85\u7ea7\u7279\u5f81\\n\\n\u5e78\u8fd0\u7684\u662f\uff0c\u7f16\u8bd1\u5668\u518d\u6b21\u4e3a\u6211\u4eec\u6307\u660e\u4e86\u89e3\u51b3\u4e4b\u9053\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7236\u7279\u5f81\uff0c\u5e76\u5229\u7528\u7279\u5f81\u7ea6\u675f\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e3a\u6240\u6709\u5b9e\u73b0\u4e86 Any \u548c Debug\\n\u7684\u7c7b\u578b\u5b9e\u73b0\u6211\u4eec\u7684\u8d85\u7ea7\u7279\u5f81\u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\\n\\n```rs\\n#[derive(Debug)]\\nstruct AnyBox(Box<dyn DebugAny>);\\n\\ntrait DebugAny: Any + Debug {}\\n\\nimpl<T: Any + Debug + \'static> DebugAny for T {}\\n```\\n\\n\u4f60\u53ef\u4ee5\u60f3\u8fd9\u6837\u6784\u5efa\u4e00\u4e2a Box\uff0c\u4f46\u662f\u771f\u6b63\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u7684\u662f\u5411\u4e0b\u8f6c\u578b\\n\\n```rs\\nfn main() {\\n    let any_box = AnyBox(Box::new(42i32));\\n    dbg!(any_box.0.downcast_ref::<i32>());\\n}\\n```\\n\\n\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\uff0cAnyBox \u4e2d\u7684\u503c\u5e76\u6ca1\u6709 `downcast_ref` \u65b9\u6cd5\\n\\n```rs\\nerror[E0599]: no method named `downcast_ref` found for struct\\n  `Box<(dyn DebugAny + \'static)>` in the current scope\\n  --\x3e src/main.rs:15:20\\n   |\\n15 |     dbg!(any_box.0.downcast_ref::<i32>());\\n   |                    ^^^^^^^^^^^^ method not found in `Box<(dyn DebugAny + \'static)>`\\n```\\n\\n\u539f\u56e0\u662f `Box<dyn DebugAny>` \u5e76\u4e0d\u662f `Box<dyn Any>`\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u90a3\u91cc\u5f97\u5230 Any\\n\u7279\u5f81\u62e5\u6709\u7684\u65b9\u6cd5\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f **\\"as any\\"** \u6a21\u5f0f\uff0c\u6211\u4eec\u5728\u6211\u4eec\u7684 DebugAny\\n\u7279\u5f81\u4e0a\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c06\u5176\u5411\u4e0a\u8f6c\u6362\u4e3a\u4e00\u4e2a Any\u3002\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\\n\\n```rs\\ntrait DebugAny: Any + Debug {\\n    fn as_any(&self) -> &dyn Any;\\n    fn as_any_mut(&mut self) -> &mut dyn Any;\\n}\\n\\nimpl<T: Any + Debug + \'static> DebugAny for T {\\n    fn as_any(&self) -> &dyn Any { self }\\n    fn as_any_mut(&mut self) -> &mut dyn Any { self }\\n}\\n```\\n\\n\u73b0\u5728\u867d\u7136\u6211\u4eec\u4f9d\u7136\u4e0d\u80fd\u5728 DebugAny \u4e0a\u8c03\u7528 `downcast_ref`\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u62ff\u8d70\u5b83\u7684\u503c\uff0c\u5e76\u8c03\u7528 `as_any` \u5f97\u5230\u4e00\u4e2a\\n`&dyn Any`\uff1a\\n\\n```rs\\nfn main() {\\n    let any_box = AnyBox(Box::new(42i32));\\n    dbg!(any_box.0.as_any().downcast_ref::<i32>());\\n    dbg!(&any_box);\\n}\\n```\\n\\n\u4f46\u662f\u5f53\u6211\u4eec\u8fd0\u884c\u540e\uff0c\u5374\u5f97\u5230\u4e86\u4e00\u4e2a None\u3002\u53d1\u751f\u4ec0\u4e48\u4e8b\u4e86\uff1f\uff1f\uff1f\\n\\n```rs\\n[src/main.rs:23] any_box.0.as_any().downcast_ref::<i32>() = None\\n```\\n\\n\u8fd9\u4e2a\u8c1c\u9898\u7684\u7b54\u6848\u4e0e\u65b9\u6cd5\u89e3\u6790\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u7a7a\u767d\u5b9e\u73b0\u6709\u5173\u3002\u5f53\u6211\u4eec\u5728 `Box<dyn DebugAny>` \u4e0a\u8c03\u7528 `as_any` \u65f6\uff0cBox\\n\u5e76\u6ca1\u6709\u53d1\u751f\u81ea\u52a8\u89e3\u5f15\u7528\uff0c\u4e8b\u5b9e\u4e0a\u8c03\u7528\u7684\u662f `Box<dyn DebugAny>` \u7684 as_any\uff0c\u56e0\u4e3a Box \u73b0\u5728\u4e5f\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\\nDebugAny\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u7a7f\u8fc7\u8fd9\u4e2a Box \u5462\uff1f\u901a\u8fc7\u624b\u52a8\u89e3\u5f15\u7528\u3002\\n\\n```rs\\nfn main() {\\n    let any_box = AnyBox(Box::new(42i32));\\n    dbg!((*any_box.0).as_any().downcast_ref::<i32>());\\n    dbg!(&any_box);\\n}\\n```\\n\\n\u8fd9\u6837\u5c31\u662f\u6211\u4eec\u9884\u671f\u7684\u503c\u4e86\\n\\n```rs\\n[src/main.rs:23] (*any_box.0).as_any().downcast_ref::<i32>() = Some(\\n    42,\\n)\\n[src/main.rs:24] &any_box = AnyBox(\\n    42,\\n)\\n```\\n\\n## \u53ef\u8c03\u8bd5\u7684 Extension Map\\n\\n\u6709\u4e86\u4e0a\u9762\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u62ff\u51fa\u4e4b\u524d\u7684\u975e\u540c\u6b65 map\uff0c\u7a0d\u52a0\u6539\u9020\u5c31\u80fd\u4e3a\u5176\u5b9e\u73b0 Debug\u3002\\n\\n```rs\\nuse std::any::{Any, TypeId};\\nuse std::cell::{Ref, RefCell, RefMut};\\nuse std::collections::HashMap;\\nuse std::fmt::Debug;\\n\\ntrait DebugAny: Any + Debug {\\n    fn as_any(&self) -> &dyn Any;\\n    fn as_any_mut(&mut self) -> &mut dyn Any;\\n}\\n\\nimpl<T: Any + Debug + \'static> DebugAny for T {\\n    fn as_any(&self) -> &dyn Any { self }\\n    fn as_any_mut(&mut self) -> &mut dyn Any { self }\\n}\\n\\n#[derive(Default, Debug)]\\npub struct Extensions {\\n    map: RefCell<HashMap<TypeId, Box<dyn DebugAny>>>,\\n}\\n\\nimpl Extensions {\\n    pub fn insert<T: Debug + \'static>(&self, value: T) {\\n        self.map\\n            .borrow_mut()\\n            .insert(TypeId::of::<T>(), Box::new(value));\\n    }\\n\\n    pub fn get<T: Default + Debug + \'static>(&self) -> Ref<\'_, T> {\\n        self.ensure::<T>();\\n        Ref::map(self.map.borrow(), |m| {\\n            m.get(&TypeId::of::<T>())\\n                .and_then(|b| (**b).as_any().downcast_ref())\\n                .unwrap()\\n        })\\n    }\\n\\n    pub fn get_mut<T: Default + Debug + \'static>(&self) -> RefMut<\'_, T> {\\n        self.ensure::<T>();\\n        RefMut::map(self.map.borrow_mut(), |m| {\\n            m.get_mut(&TypeId::of::<T>())\\n                .and_then(|b| (**b).as_any_mut().downcast_mut())\\n                .unwrap()\\n        })\\n    }\\n\\n    fn ensure<T: Default + Debug + \'static>(&self) {\\n        if self.map.borrow().get(&TypeId::of::<T>()).is_none() {\\n            self.insert(T::default());\\n        }\\n    }\\n}\\n```\\n\\n\u5411 map \u91cc\u9762\u6dfb\u52a0\u70b9\u4e1c\u897f\uff0c\u6253\u5370\u4e00\u4e0b\uff1a\\n\\n```rs\\n[src/main.rs:63] &extensions = Extensions {\\n    map: RefCell {\\n        value: {\\n            TypeId {\\n                t: 13431306602944299956,\\n            }: 42,\\n        },\\n    },\\n}\\n```\\n\\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u5728 map \u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a 32 \u4f4d\u7684\u6574\u6570 42\uff0c\u5b83\u6253\u5370\u51fa\u4e86\u4f5c\u4e3a\u952e\u7684 TypeId\uff0c\u548c\u4f5c\u4e3a\u503c\u7684 42\u3002\\n\\n## \u4fdd\u7559\u7c7b\u578b\u540d\u79f0\\n\\n\u5982\u679c\u4f60\u60f3\u4fdd\u7559\u539f\u6765\u7684\u7c7b\u578b\u540d\u79f0\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u7684 ID\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u4f5c\u4e3a map \u7684\u952e\u3002\u901a\u8fc7\u5bf9 TypeId \u548c TypeName\\n\u505a\u4e00\u6b21\u7b80\u5355\u7684\u5305\u88c5\u5c31\u80fd\u8f7b\u677e\u5b9e\u73b0\uff1a\\n\\n```rs\\nuse std::any::{TypeId, type_name};\\nuse std::hash::{Hash, Hasher};\\nuse std::fmt::{self, Debug};\\n\\npub struct TypeKey(TypeId, &\'static str);\\n\\nimpl TypeKey {\\n    pub fn of<T: \'static>() -> TypeKey {\\n        TypeKey(TypeId::of::<T>(), type_name::<T>())\\n    }\\n}\\n\\nimpl Hash for TypeKey {\\n    fn hash<H: Hasher>(&self, state: &mut H) {\\n        self.0.hash(state);\\n    }\\n}\\n\\nimpl PartialEq for TypeKey {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.0 == other.0\\n    }\\n}\\n\\nimpl Eq for TypeKey {}\\n\\nimpl Debug for TypeKey {\\n    fn fmt(&self, f: &mut fmt::Formatter<\'_>) -> fmt::Result {\\n        write!(f, \\"{}\\", self.1)\\n    }\\n}\\n```\\n\\n\u63a5\u7740\u7528\u5b83\u66ff\u6362\u6389\u539f\u6765\u7684\u952e\uff0c\u8c03\u8bd5\u4e00\u4e0b\uff1a\\n\\n```rs\\n[src/main.rs:90] &extensions = Extensions {\\n    map: RefCell {\\n        value: {\\n            i32: 42,\\n            alloc::vec::Vec<i32>: [\\n                1,\\n                2,\\n                3,\\n            ],\\n        },\\n    },\\n}\\n```\\n\\n\u6ce8\u610f\uff0c\u6211\u5728 map \u4e2d\u989d\u5916\u63d2\u5165\u4e86\u4e00\u4e2a `Vec<i32>`\uff0c\u4ee5\u83b7\u5f97\u66f4\u660e\u663e\u7684\u8f93\u51fa\u3002"},{"id":"/i3wm","metadata":{"permalink":"/blog/i3wm","source":"@site/blog/i3wm.md","title":"Linux \u53d1\u884c\u7248\u914d\u7f6e","description":"i3wm","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":2.435,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map","permalink":"/blog/2023/01/01/[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map"},"nextItem":{"title":"\u8d44\u6e90\u6574\u7406","permalink":"/blog/resources"}},"content":"## i3wm\\n\\n### \u591a\u5c4f\u5e55\\n\\n```sh\\nxrandr\\nxrandr --output DP-1 --auto --right-of eDP-1\\n```\\n\\n\\n## manjaro\\n\\n### cpu \u8c03\u9891\\n\\n1. \u67e5\u770b\u5f53\u524d\u6240\u6709 CPU \u7684\u4fe1\u606f\uff1a\\n\\n```shell\\ncpupower -c all frequency-info\\n```\\n\\n2. \u8bbe\u7f6e\u6240\u6709 CPU \u4e3a\u6027\u80fd\u6a21\u5f0f\uff1a\\n\\n```shell\\ncpupower -c all frequency-set -g performance\\n```\\n\\n- performance: \u56fa\u5b9a\u6700\u9ad8\u8fd0\u884c\u9891\u7387\u4e0a\uff0c\u4e0d\u52a8\u6001\u8c03\u8282\u3002\\n\\n- powersave: \u56fa\u5b9a\u5de5\u4f5c\u5728\u5176\u652f\u6301\u7684\u6700\u4f4e\u8fd0\u884c\u9891\u7387\u4e0a\\n\\n- ondemand: \u6309\u9700\u5feb\u901f\u52a8\u6001\u8c03\u6574 CPU \u9891\u7387\uff0c\u4e00\u6709 cpu \u8ba1\u7b97\u91cf\u7684\u4efb\u52a1\uff0c\u5c31\u4f1a\u7acb\u5373\u8fbe\u5230\u6700\u5927\u9891\u7387\u8fd0\u884c\uff0c\u7b49\u6267\u884c\u5b8c\u6bd5\u5c31\u7acb\u5373\u56de\u5230\u6700\u4f4e\u9891\u7387\uff1b\\n\\n- conservative:\\n  \u4e0e ondemand \u4e0d\u540c\uff0c\u5e73\u6ed1\u5730\u8c03\u6574 CPU \u9891\u7387\uff0c\u9891\u7387\u7684\u5347\u964d\u662f\u6e10\u53d8\u5f0f\u7684\uff0c\u4f1a\u81ea\u52a8\u5728\u9891\u7387\u4e0a\u4e0b\u9650\u8c03\u6574\uff0c\u548c ondemand \u7684\u533a\u522b\u5728\u4e8e\u5b83\u4f1a\u6309\u9700\u5206\u914d\u9891\u7387\uff0c\u800c\u4e0d\u662f\u4e00\u5473\u8ffd\u6c42\u6700\u9ad8\u9891\u7387\uff1b\\n\\n### \u81ea\u52a8\u6302\u8f7d\\n\\n```shell\\n# 100mb \u865a\u62df\u786c\u76d8\\nmount tmpfs in /home/trdthg/tmp/\\ntmpfs /home/trdthg/tmp tmpfs size=96m 0 0\\n\\n# 1.\u67e5\u770b\u7535\u8111\u4e2d\u6240\u6709\u786c\u76d8\u7684\u5206\u533a\u60c5\u51b5\u3002\\n# \u547d\u4ee4\u5982\u4e0b\uff1a\\n# sudo fdisk -l\\n# 2.\u7ed3\u679c\u5982\u4e0b\\n# /dev/nvme0n1p3    567296  210282495 209715200   100G Microsoft \u57fa\u672c\u6570\u636e\\n# /dev/nvme0n1p4 210282496  872337407 662054912 315.7G Microsoft \u57fa\u672c\u6570\u636e\\n\\n#auto mount windows fs\\n/dev/nvme0n1p3 /mnt/C ntfs nls=utf8,umask=000   0   0\\n/dev/nvme0n1p4 /mnt/D ntfs nls=utf8,umask=000   0   0\\n\\n# \u6ce8\uff1a \u672b\u5c3e\u7684 2 \u884c\u662f\u6dfb\u52a0\u7684\u5185\u5bb9\u3002\u5176\u4e2d/dev/nvme0n1p3 \u4e00\u884c\u4ee3\u8868 C \u76d8\u5206\u533a\u5c06\u81ea\u52a8\u6302\u8f7d\u5230/mnt/C \u76ee\u5f55\u4e0b\uff0c\u6587\u4ef6\u7cfb\u7edf\u4e3a NTFS\uff08\u5982\u679c\u6b65\u9aa4 1 \u4e2d\u67e5\u770b\u5206 \u533a\u7684\u6587\u4ef6\u7cfb\u7edf\u4e3a FAT32 \u65f6\uff0c\u6b64\u5904\u8bf7\u5199 vfat\uff09\uff0c\u5b57\u7b26\u7f16\u7801\u4e3a utf8\u3002umask \u8868\u793a\u6587\u4ef6\u76ee\u5f55\u7684\u6743\u9650\uff0c\u6b64\u53c2\u6570\u4ee5\u53ca\u4e4b\u540e\u7684 2 \u4e2a\u53c2\u6570\u90fd\u4e3a 0 \u5373\u53ef\u3002\u4ee5\u4e0b\u51e0\u884c\u4ee5 \u6b64\u7c7b\u63a8\u3002\u6b64\u5904\u53ef\u4ee5\u9009\u62e9\u6027\u7684\u6dfb\u52a0\u9700\u8981\u81ea\u52a8\u6302\u8f7d\u7684\u5206\u533a\uff0c\u4e0d\u60f3\u6302\u8f7d\u7684\u5206\u533a\u4e0d\u7528\u4e66\u5199\u3002\\n```\\n\\n### openssh-server(sshd) \u542f\u52a8\\n\\n### OpenSSH\\n\\nOpenSSH \u53ef\u4ee5\u652f\u6491 Manjaro \u6210\u4e3a SSH Server\uff0c\u4ee5\u4fbf\u5176\u4ed6\u4e3b\u673a\u53ef\u4ee5\u901a\u8fc7 SSH \u8fde\u63a5\u5230 Manjaro\u3002\\n\\n```shell\\n# \u5b89\u88c5 OpenSSH\\nsudo pacman -S openssh\\n# \u5f00\u673a\u81ea\u542f sshd \u670d\u52a1\\nsudo systemctl enable sshd\\n# \u542f\u52a8 sshd \u670d\u52a1\\nsudo systemctl start sshd\\n# \u91cd\u542f sshd \u670d\u52a1\\nsudo systemctl restart sshd\\n```"},{"id":"/resources","metadata":{"permalink":"/blog/resources","source":"@site/blog/resources.md","title":"\u8d44\u6e90\u6574\u7406","description":"- Leaf\u2014\u2014\u7f8e\u56e2\u70b9\u8bc4\u5206\u5e03\u5f0f ID \u751f\u6210\u7cfb\u7edf","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Linux \u53d1\u884c\u7248\u914d\u7f6e","permalink":"/blog/i3wm"},"nextItem":{"title":"\u7f51\u7ad9\u66f4\u65b0\u65e5\u5fd7","permalink":"/blog/site_update_log"}},"content":"- [Leaf\u2014\u2014\u7f8e\u56e2\u70b9\u8bc4\u5206\u5e03\u5f0f ID \u751f\u6210\u7cfb\u7edf](https://tech.meituan.com/2017/04/21/mt-leaf.html)"},{"id":"/site_update_log","metadata":{"permalink":"/blog/site_update_log","source":"@site/blog/site_update_log.md","title":"\u7f51\u7ad9\u66f4\u65b0\u65e5\u5fd7","description":"v3 Docusaurus","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.71,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u8d44\u6e90\u6574\u7406","permalink":"/blog/resources"},"nextItem":{"title":"\u5206\u5e03\u5f0f\u7cfb\u7edf","permalink":"/blog/draft/DistributedSystem"}},"content":"## v3 Docusaurus\\n\\n2022.10.21 \u4ece vuepress2 \u8fc1\u79fb\u5230 Docusaurus\\n\\n## v2 vuepress3\\n\\n## v1 vuepress1\\n\\n\u57fa\u4e8e typora \u5904\u7406\u56fe\u7247\\n\\n```sh\\n# rm -rf docs/.vuepress/dist\\ncd vuePressBlog\\n# \u751f\u6210\u9759\u6001\u6587\u4ef6\\npnpm run build\\n\\n# \u56fe\u7247\u6e90\u4fee\u6539\\nrm docs/.vuepress/public/assets/img/*\\ncp /home/trthg/.config/Typora/typora-user-images/* docs/.vuepress/public/assets/img/\\n\\n# md \u5f15\u7528\u56fe\u7247\u8def\u5f84\u4fee\u6539\\nsed -i \\"s/\\\\/home\\\\/trthg\\\\/.config\\\\/Typora\\\\/typora-user-images/\\\\/assets\\\\/img/g\\" `grep -rl \\"/assets/img\\" ./`\\n\\n# # /* \u4f1a\u5ffd\u7565\u3002\u5f00\u5934\u7684\u6587\u4ef6   /. \u4e0d\u4f1a\\nrm -r ../assets\\nrm -r ../java\\nrm -r ../other\\nrm -r ../js\\nrm -r ../python\\nrm -r ../rust\\nrm -r ../ioclub\\nrm -r ../magic\\nrm ../*.html\\n# rm ../*.png\\n# rm ../*.jpg\\n\\nmv docs/.vuepress/dist/* ../\\n\\ncurDate=$(date \\"+%Y-%m-%d\\")\\ncurTime=$(date \\"+%H:%M:%S\\")\\n# # git init\\ncd ..\\ngit add .\\ngit commit -s -m \\"commit: $curDate $curTime\\"\\ngit push -u origin main\\n```"},{"id":"/draft/DistributedSystem","metadata":{"permalink":"/blog/draft/DistributedSystem","source":"@site/blog/draft/DistributedSystem.md","title":"\u5206\u5e03\u5f0f\u7cfb\u7edf","description":"\u4f18\u52bf","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":12.415,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u7f51\u7ad9\u66f4\u65b0\u65e5\u5fd7","permalink":"/blog/site_update_log"},"nextItem":{"title":"Let\'s Dev: A Package Manager","permalink":"/blog/draft/[\u8bd1] pkg_mng"}},"content":"## \u4f18\u52bf\\n\\n- \u901a\u8fc7\u5e76\u884c\u8ba1\u7b97\u589e\u52a0\u5bb9\u91cf (parallelism)\\n- \u901a\u8fc7\u590d\u5236\u5bb9\u5fcd\u6545\u969c (fault tolerance)\\n- \u5339\u914d\u7269\u7406\u8bbe\u5907\u7684\u5206\u5e03 (physical)\\n- \u901a\u8fc7\u9694\u79bb\u6765\u5b9e\u73b0\u5b89\u5168 (security / isolated)\\n\\n    - \u5c06\u5b89\u5168\u7684\u548c\u4e0d\u5b89\u5168\u7684\u8ba1\u7b97\u653e\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u8fd0\u884c\\n    - \u7cfb\u7edf\u95f4\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u4ea4\u4e92\\n\\n## \u6311\u6218\\n\\n- \u5206\u5e03\u5f0f\u7cfb\u7edf\u6709\u8bb8\u591a\u90e8\u5206\u7ec4\u6210\uff0c\u8fd9\u4e9b\u90e8\u5206\u662f\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u4f1a\u9047\u5230\u5404\u79cd\u5e76\u53d1\u7f16\u7a0b\u548c\u590d\u6742\u4ea4\u4e92\u5e26\u6765\u7684\u95ee\u9898\u3002\u56e0\u6b64\u9700\u8981\u67d0\u4e9b\u673a\u5236\u5728\u65f6\u95f4\u4e0a\u8fdb\u884c\u63a7\u5236\uff08\u6bd4\u5982\u8d85\u65f6\u673a\u5236\uff0c\u7194\u65ad\u673a\u5236\uff09\u3002\\n\\n- \u591a\u53f0\u8ba1\u7b97\u673a\u52a0\u7f51\u7edc\u4f1a\u4f7f\u6545\u969c\u539f\u56e0\u4e5f\u66f4\u52a0\u590d\u6742\\n\\n- \u6027\u80fd\uff0cn \u53f0\u8ba1\u7b97\u673a\u5e76\u4e0d\u80fd\u8fbe\u5230 n \u500d\u7684\u6027\u80fd\\n\\n## \u4e3b\u9898\\n\\n1. \u4e00\u81f4\u6027\\n\\n    \u901a\u7528\u7684\u57fa\u7840\u8bbe\u65bd\u9700\u8981\u6709\u660e\u786e\u7684\u884c\u4e3a\u3002\u4f8b\u5982\uff0c\\"Get(k) \u83b7\u53d6\u6700\u8fd1\u4e00\u6b21 Put(k,v) \u7684\u503c\\"\u3002\\n\\n    \u5b9e\u73b0\u826f\u597d\u7684\u884c\u4e3a\u662f\u5f88\u96be\u7684\uff01 \\"\u590d\u5236\\" \u7684\u670d\u52a1\u5668\u5f88\u96be\u4fdd\u6301\u4e00\u81f4\u3002\\n\\n2. \u6027\u80fd\\n\\n    \u76ee\u6807\uff1a\u53ef\u6269\u5c55\u7684\u541e\u5410\u91cf\\n\\n    Nx \u4e2a\u670d\u52a1\u5668\uff0c\u901a\u8fc7\u5e76\u884c\u7684 CPU\u3001\u78c1\u76d8\u3001\u7f51\u7edc\u5b9e\u73b0 Nx \u4e2a\u603b\u541e\u5410\u91cf\u3002\u968f\u7740 N \u7684\u589e\u957f\uff0c\u6269\u5c55\u4f1a\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u8d1f\u8f7d\u4e0d\u5e73\u8861\u3002\u6709\u4e9b\u4e8b\u60c5\u4e0d\u4f1a\u968f\u7740 N \u7684\u589e\u52a0\u800c\u52a0\u5feb\uff0c\u4f8b\u5982\u521d\u59cb\u5316\u3001\u4ea4\u4e92\u3002\\n\\n3. \u6743\u8861\\n\\n    \u5bb9\u9519\u6027\u3001\u4e00\u81f4\u6027\u548c\u6027\u80fd\u662f\u654c\u4eba\u3002\u5b9e\u73b0\u5bb9\u9519\u6027\u548c\u4e00\u81f4\u6027\u9700\u8981\u901a\u4fe1\\n\\n    - \u53d1\u9001\u6570\u636e\u5230\u5907\u4efd\\n    - \u68c0\u67e5\u6570\u636e\u662f\u5426\u662f\u6700\u65b0\u7684\u3002\\n    - \u901a\u4fe1\u901a\u5e38\u5f88\u6162\uff0c\u800c\u4e14\u4e0d\u53ef\u6269\u5c55\\n    - \u8bb8\u591a\u8bbe\u8ba1\u53ea\u63d0\u4f9b\u5f31\u7684\u4e00\u81f4\u6027\uff0c\u4ee5\u83b7\u5f97\u901f\u5ea6\u3002\\n\\n        - \u4f8b\u5982\uff0cGet() \u5e76\u4e0d*\u4ea7\u751f\u6700\u65b0\u7684 Put()! \u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u8fd9\u662f\u5f88\u75db\u82e6\u7684\uff0c\u4f46\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6743\u8861\u3002\\n\\n    \u6211\u4eec\u4f1a\u5728\u4e00\u81f4\u6027/\u6027\u80fd\u4e2d\u770b\u5230\u8bb8\u591a\u8bbe\u8ba1\u70b9\u3002\\n\\n4. \u5b9e\u73b0\\n\\n    RPC\u3001\u7ebf\u7a0b\u3001\u5e76\u53d1\u63a7\u5236\u3002\\n\\n## Lab\\n\\n- Map-Reduce\\n\\n- Raft \u89e3\u51b3\u5bb9\u9519\u6027\\n\\n- \u4f7f\u7528 Raft \u6784\u5efa K/V server\uff0c\u5b83\u53ef\u4ee5\u88ab\u590d\u5236\\n\\n- Sharded K/V server \u5c06\u6709\u53ef\u590d\u5236\u80fd\u529b\u7684\u4e3b\u5907 K/V server \u514b\u9686\u5230\u591a\u4e2a\u7ec4\u4e2d\uff0c\u5e76\u5c06\u4e4b\u524d\u7684\u6570\u636e\u5206\u5272\u5b58\u50a8\u5230\u8fd9\u4e9b\u7ec4\u4e2d\uff0c\u63d0\u9ad8\u8fd0\u884c\u901f\u5ea6\uff08\u6bcf\u4e2a\u7ec4\u53ea\u5b58\u50a8\u81ea\u5df1\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u7ec4\u5408\u8d77\u6765\u5c31\u662f\u4e00\u6574\u4efd\u6570\u636e\uff09\u3002\u540c\u65f6\u8fd8\u8981\u5b9e\u73b0\u5728\u4e0d\u540c\u7684\u670d\u52a1\u671f\u95f4\u79fb\u52a8\u6570\u636e\uff0c\u4fdd\u8bc1\u4e0d\u4f1a\u4e22\u5931\uff08\u6570\u636e\u5206\u7247\u5230\u5404\u4e2a\u7ec4\u4e2d\uff0c\u5404\u7ec4\u7684\u670d\u52a1\u5668\u5185\u4e5f\u4f1a\u6709\u4e3b\u4ece\u590d\u5236\uff09\u3002\\n\\n## Map-Reduce\\n\\n\u4ee5\u4e00\u4e2a word-count \u4e3a\u4f8b\uff0c\u5982\u679c\u96c6\u7fa4\u8981\u5bf9\u4e0a\u4e07\u7684\u6587\u4ef6\u8fdb\u884c\u8ba1\u7b97\uff0cGFS \u4f1a\u5148\u5bfb\u627e\u5230\u6587\u4ef6\u7684\u6240\u5728\u4f4d\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u5728\u672c\u673a\u7684 map-reduce \u7a0b\u5e8f\u4e2d\u8fd0\u884c\uff0c\u4ece\u800c\u8282\u7ea6\u4e86\u5927\u91cf\u7684\u7f51\u7edc\u4f20\u8f93\u3002\\n\\n> \u5c06\u6309\u884c\u5b58\u50a8\u8f6c\u6362\u4e3a\u6309\u5217\u5b58\u50a8\u7684\u8fc7\u7a0b\uff0c\u5728\u8bba\u6587\u4e2d\u6210\u4e3a shuffle\\n\\n### \u6982\u8ff0\\n\\n\u80cc\u666f\uff1a\u5728\u591a TB \u7ea7\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u591a\u5c0f\u65f6\u7684\u8ba1\u7b97\uff0c\u4f8b\u5982\uff0c\u5efa\u7acb\u641c\u7d22\u7d22\u5f15\uff0c\u6216\u6392\u5e8f\uff0c\u6216\u5206\u6790\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u53ea\u6709\u5728\u6709 1000 \u53f0\u8ba1\u7b97\u673a\u7684\u60c5\u51b5\u4e0b\u624d\u5b9e\u7528\u3002\\n\\n\u4f46\u662f\u5e94\u7528\u4e0d\u662f\u7531\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e13\u5bb6\u7f16\u5199\u7684\uff0c\u5b83\u7684\u603b\u4f53\u76ee\u6807\u662f\u8ba9\u975e\u4e13\u4e1a\u7684\u7a0b\u5e8f\u5458\u4e5f\u80fd\u8f7b\u677e\u4f7f\u7528\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u4ed6\u53ea\u9700\u8981\u5b9a\u4e49 Map \u548c Reduce \u51fd\u6570 (\u901a\u5e38\u662f\u76f8\u5f53\u7b80\u5355\u7684\u540c\u6b65\u4ee3\u7801). MR \u7ba1\u7406\u5e76\u9690\u85cf\u4e86\u5206\u5e03\u5f0f\u7684\u6240\u6709\u7ec6\u8282\uff01\\n\\n\u4e00\u4e2a MapReduce \u4f5c\u4e1a\u7684\u62bd\u8c61\u89c6\u56fe\\n\\n```\\n\u8f93\u5165 1 -> Map -> a,1 b,1\\n\u8f93\u5165 2 -> Map -> b,1\\n\u8f93\u5165 3 -> Map -> a,1 c,1\\n| | |\\n| | -> Reduce -> c,1\\n| -----\x3e Reduce -> b,2\\n---------\x3e Reduce -> a,2\\n```\\n\\n- 1) \u8f93\u5165\u6587\u4ef6\uff08\u5df2\u7ecf\uff09\u88ab\u5206\u6210 M \u4e2a\u6587\u4ef6\\n- 2) MR \u5bf9\u6bcf\u4e2a\u8f93\u5165\u6587\u4ef6\u8c03\u7528 Map()\uff0c\u4ea7\u751f\u4e00\u7ec4 k2, v2 \u7684 \\"\u4e2d\u95f4\\" \u6570\u636e\uff0c\u6bcf\u4e2a Map() \u8c03\u7528\u90fd\u662f\u4e00\u4e2a \\"\u4efb\u52a1\\"\\n- 3) \u5f53\u5730\u56fe\u88ab Reduce \u65f6\u3002MR \u4f1a\u6536\u96c6\u7ed9\u5b9a k2 \u7684\u6240\u6709\u4e2d\u95f4 v2\u3002\u5e76\u5c06\u6bcf\u4e2a\u952e\u548c\u503c\u4f20\u9012\u7ed9\u4e00\u4e2a Reduce \u8c03\u7528\\n- 4) \u6700\u7ec8\u8f93\u51fa\u662f\u6765\u81ea Reduce() \u7684<k2,v3>\u5bf9\u7684\u96c6\u5408\u3002\\n\\n\u4ee5 wordcount \u4e3a\u4f8b\uff1a\\n\\n- Map(k, v) \u5c06 v \u5206\u5272\u6210\u5355\u8bcd\\n- \u5bf9\u4e8e\u6bcf\u4e2a\u8bcd w, emit(w, \\"1\\")\\n- Reduce(k, v_set)\\n- emit(len(v_set))\\n\\n### MapReduce \u7cfb\u7edf\u7684\u4f18\u7f3a\u70b9\\n\\n1. MapReduce \u7684\u6269\u5c55\u6027\u5f88\u597d\u3002\\n\\n    N \u4e2a worker \u8ba1\u7b97\u673a\uff08\u53ef\u80fd\uff09\u8ba9\u4f60\u83b7\u5f97 Nx \u7684\u541e\u5410\u91cf\u3002Maps() \u548c Reduce() \u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u76f8\u4e92\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u66f4\u591a\u7684\u8ba1\u7b97\u673a\u53ef\u4ee5\u5e26\u6765\u66f4\u591a\u7684\u541e\u5410\u91cf\uff01\\n\\n2. MapReduce \u9690\u85cf\u4e86\u5f88\u591a\u7ec6\u8282\u3002\\n    - \u53d1\u9001\u5e94\u7528\u4ee3\u7801\u5230\u670d\u52a1\u5668\\n    - \u8ddf\u8e2a\u54ea\u4e9b\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\\n    - \u5c06\u4e2d\u95f4\u6570\u636e\u4ece Maps \\"\u6d17\\" \u5230 Reduce \u4e2d\u53bb\\n    - \u5e73\u8861\u670d\u52a1\u5668\u4e0a\u7684\u8d1f\u8f7d\\n    - \u4ece\u6545\u969c\u4e2d\u6062\u590d\u3002\\n\\n3. MapReduce \u9650\u5236\u4e86\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u505a\u7684\u4e8b\u3002\\n    - \u6ca1\u6709\u4e92\u52a8\u6216\u72b6\u6001 (\u9664\u4e86\u901a\u8fc7\u4e2d\u95f4\u8f93\u51fa)\\n    - \u6ca1\u6709\u8fed\u4ee3\\n    - \u6ca1\u6709\u5b9e\u65f6\u6216\u6d41\u5f0f\u5904\u7406\\n\\n4. MapReduce \u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5b58\u50a8\u5728 GFS \u96c6\u7fa4\u6587\u4ef6\u7cfb\u7edf\u4e0a\\n\\n    - MR \u9700\u8981\u5de8\u5927\u7684\u5e76\u884c\u8f93\u5165\u548c\u8f93\u51fa\u7684\u541e\u5410\u91cf\u3002\\n    - GFS \u5c06\u6587\u4ef6\u5206\u5272\u5230\u8bb8\u591a\u670d\u52a1\u5668\u4e0a\uff0c\u4ee5 64MB \u4e3a\u4e00\u4e2a\u5757\u3002\\n        - Map \u5e76\u884c\u8bfb\u53d6\\n        - Reduce \u5e76\u884c\u5199\u5165\\n    - GFS \u8fd8\u5c06\u6bcf\u4e2a\u6587\u4ef6\u590d\u5236\u5230 2 \u6216 3 \u4e2a\u670d\u52a1\u5668\u4e0a\\n\\n### MR \u7684\u5de5\u4f5c\u7ec6\u8282\u3002\\n\\n1. MapReduce \u9700\u8981\u4e00\u4e2a\u534f\u8c03\u5668\uff0c\u5c06\u4efb\u52a1\u5206\u914d\u7ed9 worker \u5e76\u7eaa\u5f55\u8fdb\u5ea6\u3002\\n\\n    \u534f\u8c03\u5668\u5c06 Map \u4efb\u52a1\u5206\u914d\u7ed9 worker\uff0c\u76f4\u5230\u6240\u6709\u7684 Map \u5b8c\u6210\u3002\\n\\n    - Map \u5c06\u8f93\u51fa\uff08\u6216\u8005\u8bf4\u4e2d\u95f4\u6570\u636e\uff09\u5199\u5230\u672c\u5730\u78c1\u76d8\u4e0a\\n    - Map \u901a\u8fc7\u54c8\u5e0c\u5c06\u8f93\u51fa\u5206\u5272\u5230\u6bcf\u4e2a Reduce \u4efb\u52a1\u7684\u4e00\u4e2a\u6587\u4ef6\u4e2d\u3002\\n\\n    \u5728\u6240\u6709 Map \u5b8c\u6210\u540e\uff0c\u534f\u8c03\u5668\u5c06 Reduce \u4efb\u52a1\u5206\u914d\u7ed9 worker\\n\\n    - \u6bcf\u4e2a Reduce \u4efb\u52a1\u4ece\uff08\u6240\u6709\uff09Map worker \u90a3\u91cc\u83b7\u53d6\u5176\u4e2d\u95f4\u8f93\u51fa\u3002\\n    - \u6bcf\u4e2a Reduce \u4efb\u52a1\u5728 GFS \u4e0a\u5199\u5165\u4e00\u4e2a\u5355\u72ec\u7684\u8f93\u51fa\u6587\u4ef6\\n\\n2. \u4ec0\u4e48\u53ef\u80fd\u4f1a\u9650\u5236\u6027\u80fd\uff1f\\n\\n    CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u3001\u7f51\u7edc\uff1f\u5728 2004 \u5e74\uff0c\u8bba\u6587\u4f5c\u8005\u53d7\u5230\u4e86\u7f51\u7edc\u5bb9\u91cf\u7684\u9650\u5236\u3002\\n\\n    MR \u5728\u7f51\u7edc\u4e0a\u53d1\u9001\u4ec0\u4e48\uff1f\\n\\n    - Map \u4ece GFS \u8bfb\u53d6\u8f93\u5165\u3002\\n    - Reduces \u8bfb\u53d6 Map \u7684\u4e2d\u95f4\u8f93\u51fa\u3002\u901a\u5e38\u548c\u8f93\u5165\u4e00\u6837\u5927\uff0c\u4f8b\u5982\u7528\u4e8e\u6392\u5e8f\u3002\\n    - Reduces \u5199\u8f93\u51fa\u6587\u4ef6\u5230 GFS\u3002\\n\\n    \u5728 MR \u7684 shuffle \u8fc7\u7a0b\u4e2d\uff0c\u4e00\u534a\u7684\u6d41\u91cf\u8981\u7ecf\u8fc7\u6839\u4ea4\u6362\u673a\u3002\\n\\n    \u8bba\u6587\u7684\u6839\u4ea4\u6362\u673a\u901f\u5ea6\u4e3a 100 ~ 200 Gb/s\uff0c\u603b\u5171\u6709 1800 \u53f0\u673a\u5668\uff0c\u6240\u4ee5\u6bcf\u53f0\u673a\u5668\u53ef\u4ee5\u5206\u5f97 55 Gb/s\u3002\u76f8\u6bd4\u4e8e\u78c1\u76d8\u6216 RAM \u7684\u901f\u5ea6\u5c0f\u5f97\u591a\u3002\\n\\n3. MR \u5982\u4f55\u5c3d\u91cf\u51cf\u5c11\u7f51\u7edc\u7684\u4f7f\u7528\uff1f\\n\\n    - \u534f\u8c03\u5668\u8bd5\u56fe\u5728\u5b58\u50a8\u5176\u8f93\u5165\u7684 GFS \u670d\u52a1\u5668\u4e0a\u539f\u5730\u8fd0\u884c\u6bcf\u4e2a Map \u4efb\u52a1\u3002\u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u4f1a\u540c\u65f6\u8fd0\u884c GFS \u548c MR worker, \u6240\u4ee5 Map \u7684\u8f93\u5165\u90fd\u4f1a\u901a\u8fc7 GFS \u5728\u672c\u5730\u78c1\u76d8\u8bfb\u53d6\uff0c\u800c\u4e0d\u662f\u7f51\u7edc\u3002\\n\\n    - \u4e2d\u95f4\u6570\u636e\u88ab\u5206\u5272\u4e3a\u8bb8\u591a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u5b58\u50a8\u4e86\u8bb8\u591a key. \u6587\u4ef6\u6570\u91cf\u6bd4 key \u8981\u5c11\u5f97\u591a\uff0c\u5927\u6587\u4ef6\u4f20\u8f93\u7684\u6548\u7387\u8981\u66f4\u9ad8\\n\\n4. MR \u5982\u4f55\u5904\u7406\u8d1f\u8f7d\u5747\u8861\uff1f\\n\\n    \u5982\u679c N-1 \u4e2a\u670d\u52a1\u5668\u5fc5\u987b\u7b49\u5f85 1 \u4e2a\u6162\u901f\u670d\u52a1\u5668\u5b8c\u6210\uff0c\u5219\u662f\u6d6a\u8d39\u548c\u7f13\u6162\u7684\u3002\u4f46\u6709\u4e9b\u4efb\u52a1\u53ef\u80fd\u786e\u5b9e\u6bd4\u5176\u4ed6\u4efb\u52a1\u82b1\u7684\u65f6\u95f4\u66f4\u957f\u3002\\n\\n    \u89e3\u51b3\u65b9\u6cd5\uff1a\u6bd4 worker \u6570\u91cf\u591a\u5f97\u591a\u7684\u4efb\u52a1\\n\\n    - \u534f\u8c03\u5668\u5c06\u65b0\u7684\u4efb\u52a1\u5206\u914d\u7ed9\u5b8c\u6210\u5148\u524d\u4efb\u52a1\u7684 worker\u3002\\n    - \u56e0\u6b64\uff0c\u6ca1\u6709\u4e00\u4e2a\u4efb\u52a1\u5927\u5230\u53ef\u4ee5\u652f\u914d\u5b8c\u6210\u65f6\u95f4\uff08\u5e0c\u671b\u5982\u6b64\uff09\u3002\\n    - \u56e0\u6b64\uff0c\u5feb\u7684\u670d\u52a1\u5668\u4f1a\u6bd4\u6162\u7684\u670d\u52a1\u5668\u505a\u66f4\u591a\u7684\u4efb\u52a1\uff0c\u5b8c\u6210\u7684\u65f6\u95f4\u4e5f\u5dee\u4e0d\u591a\u3002\\n\\n5. MR \u7684\u5bb9\u9519\u6027\u5982\u4f55\uff1f\\n\\n    \u5982\u679c\u4e00\u4e2a worker \u5728 MP \u4efb\u52a1\u4e2d\u5d29\u6e83\u4e86\u600e\u4e48\u529e\uff1f\\n    MR \u4f1a\u5bf9\u7a0b\u5e8f\u5458\u9690\u85cf\u6545\u969c\u3002\\n\\n    MR \u4e0d\u5fc5\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u8fd0\u884c\u6574\u4e2a\u5de5\u4f5c\uff0c\u5b83\u53ea\u91cd\u65b0\u8fd0\u884c\u5931\u8d25\u7684 Map \u548c Reduce\u3002\u5047\u8bbe MR \u5c06\u4e00\u4e2a Map \u8fd0\u884c\u4e86\u4e24\u6b21\uff0c\u4e00\u4e2a Reduce \u770b\u5230\u4e86\u7b2c\u4e00\u6b21\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u53e6\u4e00\u4e2a Reduce \u770b\u5230\u4e86\u7b2c\u4e8c\u6b21\u8fd0\u884c\u7684\u8f93\u51fa\uff1f\\n\\n    \u6b63\u786e\u6027\u8981\u6c42\u91cd\u65b0\u6267\u884c\u65f6\u4ea7\u751f\u5b8c\u5168\u76f8\u540c\u7684\u8f93\u51fa\u3002\u6240\u4ee5 Map \u548c Reduce \u5fc5\u987b\u662f\u7eaf\u786e\u5b9a\u6027\u7684\u51fd\u6570\u3002\u5b83\u4eec\u53ea\u5141\u8bb8\u770b\u5b83\u4eec\u7684\u53c2\u6570/\u8f93\u5165\u3002\u6ca1\u6709\u72b6\u6001\uff0c\u6ca1\u6709\u6587\u4ef6 I/O\uff0c\u6ca1\u6709\u4ea4\u4e92\uff0c\u6ca1\u6709\u5916\u90e8\u901a\u4fe1\u3002\\n\\n    \u5982\u679c\u4f60\u60f3\u5141\u8bb8 non-functional \u7684 Map \u6216 Reduce \u5462\uff1fworker \u5931\u8d25\u5c06\u91cd\u65b0\u6267\u884c\u6574\u4e2a\u5de5\u4f5c\u3002\u6216\u8005\u662f\u56de\u6eda\u5230\u67d0\u4e2a\u5168\u5c40\u68c0\u67e5\u70b9\u3002\\n\\n6. \u5d29\u6e83\u6062\u590d\u7684\u7ec6\u8282\\n\\n    - \u4e00\u4e2a Map worker \u5d29\u6e83\u4e86\u3002\\n        - \u534f\u8c03\u5668\u6ce8\u610f\u5230 worker \u4e0d\u518d\u54cd\u5e94 ping\\n        - \u534f\u8c03\u5668\u77e5\u9053\u54ea\u4e9b Map \u4efb\u52a1\u5728\u8be5 worker \u4e0a\u8fd0\u884c\\n            - \u8fd9\u4e9b\u4efb\u52a1\u7684\u4e2d\u95f4\u8f93\u51fa\u73b0\u5728\u5df2\u7ecf\u4e22\u5931\uff0c\u5fc5\u987b\u91cd\u65b0\u8fd0\u884c\\n            - \u534f\u8c03\u5668\u901a\u77e5\u5176\u4ed6 worker \u8fd0\u884c\u8fd9\u4e9b\u4efb\u52a1\\n        - \u5982\u679c\u6240\u6709\u7684 Reduce \u4efb\u52a1\u90fd\u83b7\u53d6\u4e86\u4e2d\u95f4\u6570\u636e\uff0c\u53ef\u4ee5\u4e0d\u91cd\u65b0\u8fd0\u884c\u3002\\n\\n    - \u4e00\u4e2a Reduce worker \u5d29\u6e83\u4e86\u3002\\n        - \u5b8c\u6210\u7684\u4efb\u52a1\u662f\u597d\u7684 -- \u5df2\u7ecf\u5b58\u50a8\u5728 GFS \u4e2d\uff0c\u5e76\u4e14\u4fdd\u5b58\u6709\u526f\u672c\u3002\\n        - \u534f\u8c03\u5668\u5728\u5176\u4ed6 worker \u4e0a\u91cd\u65b0\u542f\u52a8\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u3002\\n\\n7. \u5176\u4ed6\u6545\u969c/\u95ee\u9898\u3002\\n\\n    - \u5982\u679c\u534f\u8c03\u8005\u7ed9\u4e24\u4e2a worker \u5206\u914d\u4e86\u76f8\u540c\u7684 Map \u4efb\u52a1\u600e\u4e48\u529e\uff1f\\n\\n        = \u4e5f\u8bb8\u534f\u8c03\u5668\u9519\u8bef\u5730\u8ba4\u4e3a\u4e00\u4e2a worker \u6b7b\u4e86\u3002\u5b83\u5c06\u53ea\u544a\u8bc9 Reduce worer \u5176\u4e2d\u4e00\u4e2a\u3002\\n\\n    - \u5982\u679c\u534f\u8c03\u8005\u7ed9\u4e86\u4e24\u4e2a worker \u540c\u6837\u7684 Reduce() \u4efb\u52a1\u600e\u4e48\u529e\uff1f\\n\\n        - \u4ed6\u4eec\u90fd\u4f1a\u8bd5\u56fe\u5728 GFS \u4e0a\u5199\u4e0b\u540c\u4e00\u4e2a\u8f93\u51fa\u6587\u4ef6\uff01\\n        - GFS \u7684\u539f\u5b50\u91cd\u547d\u540d\u53ef\u4ee5\u9632\u6b62\u6df7\u5408\uff1b\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u4ef6\u5c06\u662f\u53ef\u89c1\u7684\u3002\\n\\n    - \u5982\u679c\u4e00\u4e2a worker \u975e\u5e38\u6162 --\\"\u6563\u5175\u6e38\u52c7\\"\uff0c\u600e\u4e48\u529e\uff1f\\n        - \u4e5f\u8bb8\u662f\u786c\u4ef6\u5b83\u5f31\u3002\\n        - \u534f\u8c03\u5668\u542f\u52a8\u6700\u540e\u51e0\u4e2a\u4efb\u52a1\u7684\u7b2c\u4e8c\u4e2a\u526f\u672c\u3002\\n\\n    - \u5982\u679c\u4e00\u4e2a worker \u7531\u4e8e\u786c\u4ef6\u6216\u8f6f\u4ef6\u635f\u574f\u800c\u8ba1\u7b97\u51fa\u4e0d\u6b63\u786e\u7684\u8f93\u51fa\uff0c\u600e\u4e48\u529e\uff1f\\n\\n        - \u592a\u7cdf\u7cd5\u4e86\uff01MR \u5047\u8bbe \\"\u6545\u969c\u505c\u6b62\\" \u7684 CPU \u548c\u8f6f\u4ef6\u3002\\n\\n    - \u5982\u679c\u534f\u8c03\u5668\u5d29\u6e83\u4e86\u600e\u4e48\u529e\uff1f\\n\\n8. \u76ee\u524d\u7684\u72b6\u51b5\uff1f\\n\\n    - \u5f71\u54cd\u529b\u5de8\u5927\uff08Hadoop, Spark, &c\uff09\u3002\\n    - \u53ef\u80fd\u8c37\u6b4c\u5df2\u7ecf\u4e0d\u4f7f\u7528\u4e86\u3002\\n        - \u88abFlume/FlumeJava\u53d6\u4ee3\uff08\u89c1Chambers\u7b49\u4eba\u7684\u8bba\u6587\uff09\u3002\\n        - GFS \u88ab Colossus\uff08\u6ca1\u6709\u597d\u7684\u63cf\u8ff0\uff09\u548c BigTable \u53d6\u4ee3\u3002\\n\\n9. \u7ed3\u8bba\\n\\n    MapReduce \u4f7f\u5927\u96c6\u7fa4\u8ba1\u7b97\u6d41\u884c\u8d77\u6765\u3002\\n\\n    - \u4e0d\u662f\u6700\u6709\u6548\u6216\u6700\u7075\u6d3b\u7684\u3002\\n    + \u6269\u5c55\u6027\u597d\u3002\\n    + \u6613\u4e8e\u7f16\u7a0b -- \u5931\u8d25\u548c\u6570\u636e\u79fb\u52a8\u88ab\u9690\u85cf\u3002\\n\\n    \u8fd9\u4e9b\u5728\u5b9e\u8df5\u4e2d\u662f\u5f88\u597d\u7684\u6743\u8861\u3002\u73b0\u5728\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u7ee7\u627f\u8005\u3002"},{"id":"/draft/[\u8bd1] pkg_mng","metadata":{"permalink":"/blog/draft/[\u8bd1] pkg_mng","source":"@site/blog/draft/[\u8bd1] pkg_mng.md","title":"Let\'s Dev: A Package Manager","description":"\u5927\u5bb6\u597d\uff01\u4eca\u5929\uff0c\u6211\u4eec\u8981\u5199\u4e00\u4e2a\u65b0\u7684\u5305\u7ba1\u7406\u5668\uff0c\u751a\u81f3\u6bd4 Yarn \u8fd8\u8981\u597d\uff01\u597d\u5427\uff0c\u4e5f\u8bb8\u4e0d\u662f\uff0c\u4f46\u81f3\u5c11\u6211\u4eec\u4f1a\u73a9\u5f97\u5f00\u5fc3\uff0c\u4e86\u89e3\u5305\u7ba1\u7406\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u601d\u8003 Yarn","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.33,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u5206\u5e03\u5f0f\u7cfb\u7edf","permalink":"/blog/draft/DistributedSystem"},"nextItem":{"title":"\u5783\u573e\u8f6f\u4ef6","permalink":"/blog/draft/test"}},"content":"\u5927\u5bb6\u597d\uff01\u4eca\u5929\uff0c\u6211\u4eec\u8981\u5199\u4e00\u4e2a\u65b0\u7684\u5305\u7ba1\u7406\u5668\uff0c\u751a\u81f3\u6bd4 Yarn \u8fd8\u8981\u597d\uff01\u597d\u5427\uff0c\u4e5f\u8bb8\u4e0d\u662f\uff0c\u4f46\u81f3\u5c11\u6211\u4eec\u4f1a\u73a9\u5f97\u5f00\u5fc3\uff0c\u4e86\u89e3\u5305\u7ba1\u7406\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u601d\u8003 Yarn\\n\u7684\u4e0b\u4e00\u6b65\u53ef\u80fd\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002"},{"id":"/draft/test","metadata":{"permalink":"/blog/draft/test","source":"@site/blog/draft/test.md","title":"\u5783\u573e\u8f6f\u4ef6","description":"- \u6570\u636e\u5e93\u8fde\u63a5\u5de5\u5177","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.045,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Let\'s Dev: A Package Manager","permalink":"/blog/draft/[\u8bd1] pkg_mng"},"nextItem":{"title":"\u6570\u636e\u5e93\u8bbe\u8ba1","permalink":"/blog/draft/\u6570\u636e\u5e93\u8bbe\u8ba1"}},"content":"- \u6570\u636e\u5e93\u8fde\u63a5\u5de5\u5177\\n- [git-credential-helper](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8)"},{"id":"/draft/\u6570\u636e\u5e93\u8bbe\u8ba1","metadata":{"permalink":"/blog/draft/\u6570\u636e\u5e93\u8bbe\u8ba1","source":"@site/blog/draft/\u6570\u636e\u5e93\u8bbe\u8ba1.md","title":"\u6570\u636e\u5e93\u8bbe\u8ba1","description":"\u805a\u5408\u51fd\u6570","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u5783\u573e\u8f6f\u4ef6","permalink":"/blog/draft/test"},"nextItem":{"title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406","permalink":"/blog/draft/\u7ec4\u6210\u539f\u7406"}},"content":"## \u805a\u5408\u51fd\u6570\\n\\n\u72b6\u6001\\n\\nkey \u4f18\u5316\\n\\n\u5f00\u653e\u5bfb\u5740\uff08\u6ca1\u6709\u94fe\u8868\uff0c\u5185\u5b58\u8fde\u7eed\uff0ccache \u4f18\u5316\uff0c\u6307\u9488\u8df3\u8f6c\u5c11\uff0c\u5411\u91cf\u5316\u4f18\u5316\uff09\uff0c\u62c9\u94fe\uff08key \u51b2\u7a81\uff09\\n\\nstring \u77ed\u4e0d\u5982\u4e0d\u5b58\u5f15\u7528 string \u957f\u5c31\u4e0d\u65b9\u4fbf"},{"id":"/draft/\u7ec4\u6210\u539f\u7406","metadata":{"permalink":"/blog/draft/\u7ec4\u6210\u539f\u7406","source":"@site/blog/draft/\u7ec4\u6210\u539f\u7406.md","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406","description":"4.1 \u5b58\u50a8\u5668\u6982\u8ff0","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":12.21,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u6570\u636e\u5e93\u8bbe\u8ba1","permalink":"/blog/draft/\u6570\u636e\u5e93\u8bbe\u8ba1"},"nextItem":{"title":"\u8ba1\u7b97\u673a\u7f51\u7edc","permalink":"/blog/draft/\u8ba1\u7b97\u673a\u7f51\u7edc"}},"content":"## 4.1 \u5b58\u50a8\u5668\u6982\u8ff0\\n\\n### \u5206\u7c7b\\n\\n\u6309\u5b58\u50a8\u4ecb\u8d28\uff1a\\n\\n- 1 \u534a\u5bfc\u4f53\u5b58\u50a8\u5668\uff1aTTL, MOS (\u5bb9\u6613\u4e22\u5931\uff0c\u65ad\u7535\u5c31\u6ca1)\\n\\n- 2.1 \u78c1\u8868\u9762\u5b58\u50a8\u5668\uff1a(\u5851\u6599\u6216\u91d1\u5c5e\u57fa\u7247\u6d82\u78c1\u5c42\u5e76\u78c1\u5316) \u78c1\u5934 \u78c1\u8f7d\u4f53 (\u76d8\u7247)\\n- 2.2 \u78c1\u82af\u5b58\u50a8\u5668\uff1a\u786c\u78c1\u6750\u6599 \u73af\u5f62\u5143\u4ef6\\n- 3 \u5149\u76d8\u5b58\u50a8\u5668\uff1a\u6fc0\u5149 \u78c1\u5149\u6750\u6599\\n\\n\u6309\u5b58\u50a8\u65b9\u5f0f\uff1a\\n\\n1. \u5b58\u53d6\u65f6\u95f4\u4e0e\u5730\u5740\u65e0\u5173 (\u968f\u673a\u8bbf\u95ee)\\n   - \u968f\u673a\u5b58\u50a8\u5668 (RAM random-access memory) \u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u8bfb\u53ef\u5199\\n   - \u53ea\u8bfb\u5b58\u50a8\u5668 (ROM read-only memory) \u5728\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ea\u8bfb\\n\\n2. \u5b58\u53d6\u65f6\u95f4\u4e0e\u5730\u5740\u6709\u5173 (\u4e32\u884c\u8bbf\u95ee)\\n   - \u987a\u5e8f\u5b58\u50a8\u5b58\u50a8\u5668 \u78c1\u5e26\\n   - \u76f4\u63a5\u5b58\u50a8\u5b58\u50a8\u5668 \u786c\u76d8 (\u5b9a\u4f4d \u78c1\u5934\u4e00\u680b\uff0c\u505c\u5728\u6307\u5b9a\u7684\u67f1\u9762\u4e0a\uff0c\u8bfb\u5199\u5934\u79fb\u52a8\u5230\u67f1\u9762\u4e0b\uff0c\u7b49\u5f85\u78c1\u76d8\u6307\u5b9a\u7684\u533a\u57df\u65cb\u8f6c\u8fc7\u6765)\\n\\n\u6309\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u4f5c\u7528\uff1a\\n\\n1. \u4e3b\u5b58\u50a8\u5668\\n   - RAM\\n     - \u9759\u6001 RAM cache\\n     - \u52a8\u6001 RAM \u5185\u5b58\u6761\\n   - ROM\\n     - MROM \u51fa\u5382\u5382\u5bb6\u5199\u5165\\n     - PROM \u4e00\u6b21\u53ef\u7f16\u7a0b\\n     - EPROM \u53ef\u64e6\u978b\uff0c\u53ef\u7f16\u7a0b ROM, \u64e6\u5199\u590d\u6742\\n     - EEPROM \u66f4\u5bb9\u6613\u64e6\u5199\\n2. Flash Memory \u5927\u786c\u76d8\u7f13\u51b2\\n3. \u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668 (Cache)\\n4. \u8f85\u52a9\u5b58\u50a8\u5668 \u78c1\u76d8 \u78c1\u5e26 \u5149\u76d8\\n\\n### \u5c42\u6b21\u7ed3\u6784\\n\\n1. \u5b58\u50a8\u5668\u7684\u4e09\u4e2a\u4e3b\u8981\u7279\u6027\u7684\u5173\u7cfb\\n\\n\u901f\u5ea6 \u4ef7\u683c \u5bb9\u91cf\\n\\n\u5bc4\u5b58\u5668 > \u7f13\u5b58 > \u4e3b\u5b58 > \u786c\u76d8 > \u5149\u76d8 > \u78c1\u5e26\\n\\n2. \u5b58\u50a8\u5c42\u6b21\\n\\n- cache <=> \u4e3b\u5b58\\n  - \u89e3\u51b3 CPU \u548c\u4e3b\u5b58\u901f\u5ea6\u5dee\u5f02\u8fc7\u5927\\n- \u4e3b\u5b58 <=> \u8f85\u5b58\\n  - \u89e3\u51b3\u5bb9\u91cf\u95ee\u9898\\n  - \u865a\u62df\u5730\u5740\u7a7a\u95f4\\n\\n```\\n   +-----------------------------+\\n   |                             |\\n+--+--+      +-------+        +--+--+        +-----+\\n|     |------|       |--------|     |--------|     |\\n| CPU |      | cache |        | \u4e3b\u5b58 |       | \u8f85\u5b58 |\\n|     |------|       |--------|     |--------|     |\\n+--+--+      +-------+        +--+--+        +-----+\\n   |                             |\\n   +-----------------------------+\\n```\\n\\n## 4.2 \u4e3b\u5b58\u50a8\u5668\\n\\n### \u6982\u8ff0\\n\\n1. \u4e3b\u5b58\u50a8\u5668\u57fa\u672c\u7ec4\u6210\\n\\n```\\n+-------+     +---------+       +-----+\\n|       |<---\x3e|         |<-----\x3e|     |  \u6570\u636e\u603b\u7ebf\\n| \u5b58\u50a8\u4f53 |     | \u8bfb\u5199\u7535\u8def |       | MDR | <========>\\n|       |<---\x3e|         |<-----\x3e|     |\\n+-------+     +---------+       +-----+\\n  \uffea   \uffea          \uffea   \uffea\\n+-------+     +---------+\\n| \u9a71\u52a8\u5668 |     | \u63a7\u5236\u7535\u8def |\\n+-------+     +---------+\\n  \uffea   \uffea          \uffea   \uffea\\n+-------+       \u8bfb   \u5199\\n| \u8bd1\u7801\u5668 |\\n+-------+\\n  \uffea   \uffea\\n+-------+\\n|  MAR  |\\n+-------+\\n    \uffea\\n    | \u5730\u5740\u603b\u7ebf\\n    |\\n```\\n\\nMAR \u4e2d\u4fdd\u5b58\u4e86\u7531 01 \u4ee3\u7801\u6784\u6210\u7684\u5730\u5740 \u8bd1\u7801\u5668\u5c06 01 \u4ee3\u7801\u8bd1\u7801\u4e4b\u540e\u4f1a\u5bf9\u5e94\u5b58\u50a8\u4f53\u7684\u5b58\u50a8\u5355\u5143\\n\u63a5\u7740\u9009\u4e2d\u7684\u5b58\u50a8\u5355\u5143\u7684\u5f00\u5173\u6253\u5f00\uff0c\u5b58\u50a8\u4f53\u4e2d\u7684\u6570\u636e\u4f1a\u9001\u5230\u6570\u636e\u7ebf\u4e0a\uff0c\u6216\u8005\u6570\u636e\u7ebf\u4e0a\u7684\u6570\u636e\u4f1a\u4fdd\u5b58\u5230\u5b58\u50a8\u5355\u5143\u91cc\\n\\n2. \u4e3b\u5b58\u548c CPU \u7684\u8054\u7cfb\\n\\n```\\n+------------+\\n|            |\\n| +-------+  | \u6570\u636e\u603b\u7ebf   +-------+\\n| |  MAR  |<=|==========>|       |\\n| +-------+  |           |       |\\n|            |     \u8bfb    |       |\\n|            |----------\x3e|       |\\n|     CPU    |     \u5199    |  \u4e3b\u5b58  |\\n|            |----------\x3e|       |\\n|            |           |       |\\n| +-------+  | \u5730\u5740\u603b\u7ebf   |       |\\n| |  MAR  |==|==========>|       |\\n| +-------+  |           +-------+\\n|            |\\n+------------+\\n```\\n\\n- \u5b58\u50a8\u5668\u548c\u4e3b\u5b58\u9700\u8981\u6570\u636e\u4ea4\u6362\uff0c\u6240\u4ee5\u6570\u636e\u603b\u7ebf\u662f\u53cc\u5411\u7684\\n- \u8bfb\u548c\u5199\u90fd\u662f\u7ad9\u5728 CPU \u89d2\u5ea6\u6765\u8bf4\u7684\uff0cCPU \u9700\u8981\u53d1\u51fa\u8bfb\u6216\u8005\u5199\u4fe1\u53f7\\n\\n3. \u4e3b\u5b58\u4e2d\u5b58\u50a8\u5355\u5143\u5730\u5740\u7684\u5206\u914d\\n\\n```\\n\u5b57\u5730\u5740      \u5b57\u8282\u5730\u5740         \u5b57\u5730\u5740      \u5b57\u8282\u5730\u5740\\n  0    +--+--+--+--+         0    +--+--+--+--+\\n  4    |1 |2 |3 |4 |         4    |4 |3 |2 |1 |\\n  8    |5 |6 |7 |8 |         8    |8 |7 |6 |5 |\\n       +--+--+--+--+              +--+--+--+--+\\n       \u5c0f\u7aef\u5bf9\u9f50                       \u5927\u7aef\u5bf9\u9f50\\n```\\n\\n\u4e3e\u4f8b\uff1a\u5c06 16 \u8fdb\u5236\u6570 0X12345678H \u5b58\u50a8\\n\\n```\\n\u5b57\u5730\u5740      \u5b57\u8282\u5730\u5740        \u5b57\u5730\u5740      \u5b57\u8282\u5730\u5740\\n  0    +--+--+--+--+       0    +--+--+--+--+\\n  4    |12|34|56|78|       4    |78|56|34|12|\\n       +--+--+--+--+            +--+--+--+--+\\n```\\n\\n4. \u5b58\u50a8\u5668\u7684\u6280\u672f\u6307\u6807\\n\\n- \u5b58\u50a8\u5bb9\u91cf\uff1a\u4e3b\u5b58\u5b58\u50a8\u4e8c\u8fdb\u5236\u4ee3\u7801\u7684\u603b\u4f4d\u6570\\n- \u5b58\u50a8\u901f\u5ea6\\n  - \u5b58\u53d6\u65f6\u95f4\uff1a\u5b58\u50a8\u5668\u7684\u8bbf\u95ee\u65f6\u95f4\uff0c\u8bfb\u51fa\u65f6\u95f4\uff0c\u5199\u5165\u65f6\u95f4\\n  - \u5b58\u53d6\u5468\u671f\uff1a\u8fde\u7eed\u4e24\u6b21\u72ec\u7acb\u7684\u5b58\u50a8\u5668\u64cd\u4f5c (\u8bfb\u6216\u5199) \u6240\u9700\u8981\u7684\u6700\u5c0f\u95f4\u9694\u65f6\u95f4\\n- \u5b58\u50a8\u5668\u7684\u5e26\u5bbd\\n\\n### \u534a\u5bfc\u4f53\u82af\u7247\u6982\u8ff0\\n\\n#### 1. \u57fa\u672c\u7ed3\u6784\\n\\n```\\n         +-------------------------+\\n         | +----+   +----+  +----+ |\\n  \u5730\u5740\u7ebf  | | \u8bd1 |   | \u5b58 |   | \u8bfb | |  \u6570\u636e\u7ebf\\n  =====> | | \u7801 |   | \u50a8 |   | \u5199 | | <=====>\\n         | | \u9a71 |   | \u77e9 |   | \u7535 | |\\n         | | \u52a8 |   | \u9635 |   | \u8def | |\\n         | +----+   +----+  +----+ |\\n\u7247\u9009\u7ebf---\x3e|                         | <--- \u8bfb/\u5199\u63a7\u5236\u7ebf\\n         +-------------------------+\\n```\\n\\n- \u5730\u5740\u7ebf\uff1a\u5355\u5411\uff0c\u7531\u5916\u90e8\u8f93\u5165\uff0c\u80fd\u591f\u8868\u793a\u6709\u591a\u5c11\u4e2a\u5b58\u50a8\u5355\u5143\\n- \u6570\u636e\u7ebf\uff1a\u53cc\u5411\uff0c\u8bfb\u51fa\u548c\u5199\u5165\u7684\u6570\u636e\u90fd\u901a\u8fc7\u6570\u636e\u7ebf\u4f20\u8f93\uff0c\u8868\u793a\u5b58\u50a8\u5355\u5143\u6709\u591a\u5c11\u4fe1\u606f\\n- \u7247\u9009\u7ebf\uff1a\u5185\u5b58\u6761\u4e0a\u6709\u5f88\u591a\u82af\u7247\uff0c\u9700\u8981\u7531\u5b83\u786e\u5b9a\u3002(CS/CE)\\n\\n  \u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u7684\u5bb9\u91cf\u662f 1b\uff0c\u9700\u8981 8 \u4e2a\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u4e00\u7ec4\u624d\u80fd\u8868\u793a 1 \u5b57\u8282\uff0c\u5f88\u591a\u7ec4\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u5927\u5b58\u50a8\u5668\uff0c\u7247\u9009\u7ebf\u80fd\u591f\u6307\u5b9a\u7ec4\\n- \u8bfb/\u5199\u63a7\u5236\u7ebf\uff1a\u8bfb\u5199\u7684\u63a7\u5236\u4fe1\u53f7 (\u4f8b\u5982 WE \u4f4e\u7535\u5e73\u5199\uff0c\u9ad8\u7535\u5e73\u8bfb\uff0cOE \u5141\u8bb8\u8bfb\uff0cWE \u5141\u8bb8\u5199)\\n\\n\u82af\u7247\u5bb9\u91cf = 2 ^ \u5730\u5740\u7ebf\u6761\u6570 \xd7 2 ^ \u6570\u636e\u7ebf\u6761\u6570\\n\\n#### 2. \u8bd1\u7801\u5668\\n\\n\u5c06\u8f93\u5165\u5730\u5740\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u7ebf\u8def\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u5355\u5143\\n\\n- \u7ebf\u9009\u6cd5\uff1a\u6bcf\u4e2a\u5730\u5740\u90fd\u5bf9\u5e94\u4e00\u6839\u7ebf\uff0c\u7ebf\u592a\u591a\u4e0d\u73b0\u5b9e\\n- \u91cd\u5408\u6cd5\uff1a\u5730\u5740\u4fe1\u53f7\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u53ef\u4ee5\u7b49\u5206\u4e5f\u53ef\u4ee5\u4e0d\u7b49\u5206\uff0c\u6309\u7167\u77e9\u9635\u7684 x y \u9009\u62e9\\n\\n#### 3. \u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668 (RAM)\\n\\n1. \u9759\u6001 RAM(SRAM)\\n\\n\u884c\u9009\uff0c\u5217\u9009\u540c\u65f6\u6253\u5f00\uff0c\u5b8c\u6210\u8bfb\u5199\u64cd\u4f5c\\n\\n2. \u52a8\u6001 RAM(DRAM)\\n\\n\u5047\u5982\u6570\u636e\u4fdd\u5b58\u7684\u662f 0\\n\\n- \u9884\u5145\u7535\uff1a\u8bfb\u6570\u636e\u7ebf\u4e3a\u9ad8\u7535\u5e73 1\\n- \u8bfb\u9009\u62e9\u7ebf\u6709\u6548\uff0c\u8fd9\u662f\u8bfb\u51fa\u7684\u6570\u636e\u4e3a 1\uff0c\u9700\u8981\u53d6\u53cd\u7684\u5230\u771f\u5b9e\u6570\u636e\\n\\n\u5047\u5982\u6570\u636e\u4fdd\u5b58\u7684\u662f 1\\n\\n- \u6570\u636e\u662f\u9ad8\u7535\u5e73\uff0ct1 \u4e5f\u5bfc\u901a\uff0c\u63a5\u5730\uff0c\\n- \u6570\u636e\u7535\u5bb9\u653e\u7535\u4f1a\u53d8\u4e3a 0\uff0c\u8bfb\u6570\u636e\u7ebf\u4e5f\u4f1a\u53d8\u4e3a\u4f4e\u7535\u5e73\\n  > \u6ce8\u610f\uff1a\u8bfb\u6570\u636e\u7ebf\u4e0d\u80fd\u4e00\u76f4\u5145\u7535\\n- \u8fd9\u662f\u8bfb\u9009\u62e9\u7ebf\u4f1a\u8bfb\u5230 0, \u53d6\u53cd\u5f97\u5230\u771f\u5b9e\u6570\u636e\\n- **\u6ce8\u610f**: \u56e0\u4e3a\u6570\u636e\u6539\u53d8\u4e86\uff0c\u9700\u8981\u91cd\u65b0\u5199\u5165\u539f\u59cb\u6570\u636e\u3002\u5199\u5165\u65f6\u5c31\u901a\u8fc7\u5199\u9009\u62e9\u7ebf\u5199\u5165\uff0c\u5199\u9009\u62e9\u7ebf\u4f1a\u63a7\u5236\u4e00\u6574\u884c\\n\\n3. \u52a8\u6001 RAM \u65f6\u5e8f\\n\\n\u884c\u5217\u5730\u5740\u5206\u5f00\u4f20\u9001\\n\\n- \u5f15\u811a\u6570\u91cf\u66f4\u5c11\uff0c\u901f\u5ea6\u76f8\u5bf9\u4f1a\u6162\\n- \u9759\u6001 RAM \u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u5b83\u901f\u5ea6\u66f4\u5feb\uff0c\u4ef7\u683c\u66f4\u9ad8\uff0c\u4e0d\u80fd\u820d\u5f03\u6027\u80fd\\n\\n#### 4. \u53ea\u8bfb\u5b58\u50a8\u5668\\n\\n1. \u63a9\u819c ROM(MROM)\\n\\n- \u51fa\u5382\u65f6\u5199\u5165\uff0c\u4e0d\u80fd\u4fee\u6539\\n- \u53ef\u4ee5\u4fdd\u5b58\u5e38\u7528\u7684\u51fd\u6570\u7b49\\n\\n- \u884c\u5217\u9009\u62e9\u7ebf\u4ea4\u53c9\u5904\u6709 MOS \u7ba1\u4e3a 1\\n- \u884c\u5217\u9009\u62e9\u7ebf\u4ea4\u53c9\u5904\u65e0 MOS \u7ba1\u4e3a 0\\n\\n2. PROM (\u4e00\u6b21\u6027\u7f16\u7a0b)\\n\\n\u878d\u4e1d\\n\\n3. EPROM(\u591a\u6b21\u6027\u7f16\u7a0b)\\n\\n\u5fc5\u987b\u6574\u5757\u64e6\u51fa\\n\\n4. EPPRAM\\n\\n- \u7535\u53ef\u64e6\u5199\\n- \u5c40\u90e8\u64e6\u5199\\n- \u5168\u90e8\u64e6\u5199\\n\\n5. Flash Memory(\u95ea\u901f\u578b\u5b58\u50a8\u5668)\\n\\n#### 5. \u5b58\u50a8\u5668\u548c CPU \u7684\u8fde\u63a5\\n\\n\u5b58\u50a8\u5668\u5bb9\u91cf\u7684\u62d3\u5c55\\n\\n1. \u4f4d\u62d3\u5c55\uff08\u589e\u52a0\u5b58\u50a8\u5b57\u957f\uff09\\n\\n\u7528 16K \xd7 4 \u4f4d \u7684\u5b58\u50a8\u82af\u7247\u7ec4\u6210 1K \xd7 8 \u4f4d\u7684\u5b58\u50a8\u5668\\n\\n- \u51c6\u5907\u4e24\u4e2a\u82af\u7247\uff08\u4ee5 2114 \u4e3a\u4f8b\uff09\\n- 1K \u5bf9\u5e94 10 \u6839\u5730\u5740\u7ebf\uff0c\u5206\u522b\u8fde\u63a5\u5230\u4e24\u4e2a\u82af\u7247\u4e0a\\n- \u6bcf\u4e00\u4e2a\u82af\u7247\u8f93\u51fa 4 \u4f4d\u6570\u636e\uff0c\u628a\u5b83\u4eec\u5206\u522b\u63a5\u5230 8 \u6839\u5730\u5740\u7ebf\u4e0a\\n\\n- \u7247\u9009\u7ebf\u4f1a\u540c\u65f6\u9009\u4e2d\u4e24\u4e2a\u82af\u7247\uff0c\u4ed6\u4eec\u4f1a\u540c\u65f6\u5de5\u4f5c\\n\\n2. \u5b57\u62d3\u5c55\uff08\u589e\u52a0\u5b58\u50a8\u5668\u5668\u7684\u5bb9\u91cf\uff09\\n\\n\u7528 1K \xd7 8 \u4f4d\u7684\u5b58\u50a8\u82af\u7247\u7ec4\u6210 2K \xd7 8 \u4f4d\u7684\u5b58\u50a8\u5668\\n\\n2K \u5bf9\u5e94 11 \u6839\u5730\u5740\u7ebf\\n\\n\u4f7f\u7528\u6700\u9ad8\u4f4d\u4f5c\u4e3a\u82af\u7247\u9009\u62e9\u7684\u4fe1\u53f7\\n\\n3. \u5b57\u4f4d\u62d3\u5c55\\n\\n\u7528 1K \xd7 4 \u4f4d\u7684\u5b58\u50a8\u82af\u7247\u7ec4\u6210 4K \xd7 8 \u4f4d\\n\\n\u5148\u7528\u4e24\u4e2a 1K \xd7 4 \u7684\u7ec4\u6210 1 \u4e2a 1K \xd7 8 \u7684\\n\\n```\\n4K \u5bf9\u5e94 12 \u6839\u5730\u5740\u7ebf\\n4K A11 A10 A9 ... A1 A0\\n\\n1K         A9 ... A1 A0\\n```\\n\\n\u53ef\u4ee5\u7528\u6700\u9ad8 2 \u4f4d\u9009\u62e9 4 \u4e2a\u82af\u7247\uff0c\u4e24\u4f4d\u8bd1\u7801\u51fa 4 \u6839\u7ebf\uff0c\u51b3\u5b9a\u662f\u54ea\u4e00\u4e2a\u82af\u7247\\n\\n\u5b58\u50a8\u5668\u4e0e CPU \u7684\u8fde\u63a5\\n\\n1. \u5730\u5740\u7ebf\u7684\u8fde\u63a5\\n\\n2. \u6570\u636e\u7ebf\u7684\u8fde\u63a5\\n\\n3. \u8bfb/\u5199\u547d\u4ee4\u7ebf\u7684\u8fde\u63a5\\n\\n4. \u7247\u9009\u7ebf\u7684\u8fde\u63a5\\n\\n5. \u5408\u7406\u9009\u62e9\u5b58\u50a8\u82af\u7247\\n\\n6. \u5176\u4ed6\uff0c\u65f6\u5e8f\uff0c\u8d1f\u8f7d\\n\\n#### 6. \u5b58\u50a8\u5668\u7684\u6821\u9a8c\\n\\n1. \u5947\u5076\u6821\u9a8c\\n\\n\u8ba1\u7b97\u4e00\u7ec4\u5b58\u50a8\u5355\u5143\u4e2d 1 \u7684\u4e2a\u6570\uff0c\u5982\u679c 1 \u7684\u4e2a\u6570\u662f\u5076\u6570\uff0c\u6821\u9a8c\u7801\u5c31\u4e3a 0, 1 \u7684\u4e2a\u6570\u662f\u5947\u6570\uff0c\u6821\u9a8c\u7801\u53d8\u4e3a 1\\n\\n\u5047\u5982\u7ea0\u9519\u7801\u53d1\u751f\u7ffb\u8f6c\u5462\uff1f\u5e76\u65e0\u5f71\u54cd\\n\\n\u7f3a\u70b9\uff1a\\n\\n- \u53ea\u80fd\u77e5\u9053\u51fa\u9519\uff0c\u4f46\u4e0d\u77e5\u5230\u51fa\u9519\u7684\u4f4d\u7f6e\\n- \u5982\u679c\u6709\u5076\u6570\u4f4d\u53d1\u751f\u7ffb\u8f6c\uff0c\u65e0\u6cd5\u68c0\u67e5\u5230\u51fa\u9519\\n\\n2. \u6c49\u660e\u7801\\n\\n\u5c06\u6570\u636e\u5206\u7ec4\uff0c\u5e76\u5229\u7528\u4e8c\u5206\u6cd5\u53cd\u590d\u786e\u8ba4\u5bf9\u6bd4\u9519\u8bef\uff0c\u80fd\u591f\u53d1\u73b0\u4e24\u4e2a\u6570\u636e\u7ffb\u8f6c\uff0c\u65e0\u6cd5\u89e3\u51b3 3 \u4e2a\u6570\u636e\u7ffb\u8f6c\\n\\n\u7531\u4e8e\u6c49\u660e\u7801\u7684\u6027\u8d28\uff0c\u7ea0\u9519\u7801\u51fa\u73b0\u5728 2^n \u4f4d\u4e0a\u3002\u6570\u636e\u5757\u8d8a\u5927\uff0c\u7ea0\u9519\u5417\u7684\u76f8\u5bf9\u5360\u6bd4\u5c31\u8d8a\u5c11\\n\\n3. LDPC\\n\\n#### 7. \u63d0\u9ad8\u8bbf\u5b58\u901f\u5ea6\\n\\n- \u91c7\u7528\u9ad8\u901f\u5668\u4ef6\\n- \u91c7\u7528\u5c42\u6b21\u7ed3\u6784 Cache-\u4e3b\u5b58\\n- \u8c03\u6574\u4e3b\u5b58\u7ed3\u6784\\n\\n1. \u5355\u4f53\u591a\u5b57\u7ed3\u6784\\n\\n\u6bcf\u6b21\u5411\u6570\u636e\u4e2d\u53d6\u51fa\u591a\u4e2a\u8bb0\u5f55\\n\\n\u5e26\u5bbd\u53ef\u80fd\u63d0\u9ad8 4 \u500d\\n\\n2. \u591a\u4f53\u5e76\u884c\u7cfb\u7edf\\n\\n- \u9ad8\u4f4d\u4ea4\u53c9\uff0c\u987a\u5e8f\u7f16\u5740\\n\\n  \u4e0d\u540c\u5b58\u50a8\u4f53\u4e4b\u95f4\u53ef\u4ee5\u5e76\u884c\uff0c\u4f46\u662f CPU \u53ea\u4f1a\u9891\u7e41\u8bbf\u95ee\u67d0\u4e00\u4e2a\u5b58\u50a8\u4f53\\n\\n- \u4f4e\u4f4d\u4ea4\u53c9\uff0c\u5404\u4e2a\u5b58\u50a8\u4f53\u8f6e\u6d41\u7f16\u5740\\n\\n  \u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\uff0c\u5728\u5b58\u53d6\u5468\u671f\u5185\\n\\n## 4.3 \u9ad8\u901f\u7f13\u51b2\u5b58\u50a8\u5668\\n\\n### 1.\\n\\n### 2.Cache \u548c \u4e3b\u5b58\u7684\u6620\u5c04\\n\\n1. \u76f4\u63a5\u6620\u5c04\\n\\n\u7279\u70b9\uff1a\\n  - \u6bcf\u4e2a\u7f13\u5b58\u5757 i \u548c\u82e5\u5e72\u4e2a\u4e3b\u5b58\u5757\u5bf9\u5e94\\n  - \u6bcf\u4e2a\u4e3b\u5b58\u5757 j \u53ea\u80fd\u548c 1 \u5e72\u4e2a\u7f13\u5b58\u5757\u5bf9\u5e94\\n\\n\u8fc7\u7a0b\uff1a\\n- \u5c06\u4e3b\u5b58\u50a8\u5668\u7684\u6bcf\u4e2a\u5355\u5143\u6309\u7167\u6240\u5728\u5730\u5740\u53d6\u6a21\uff08Cache \u5927\u5c0f\uff09\u5206\u7ec4\\n- \u6839\u636e\u5730\u5740\u5c31\u80fd\u76f4\u63a5\u627e\u5230\u5730\u5740\u5728 Cache \u4e2d\u7684\u4f4d\u7f6e\uff0c\\n- \u63a5\u7740\u5728\u7ecf\u8fc7\u6bd4\u8f83\u5668\u6bd4\u8f83\u7ec4\u53f7\u662f\u5426\u5bf9\u5e94\u5224\u65ad\u662f\u5426\u547d\u4e2d\\n\\n\u4f18\u70b9\uff1a\u901f\u5ea6\u5feb\\n  - \u53ea\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6807\u8bb0\uff0c\u7ec4\u53f7\\n  - CPU \u4e09\u7ea7\u7f13\u5b58\uff0c\u9002\u5408\u505a\u4e3a\u4e00\u7ea7\u7f13\u5b58\uff0c\u8ffd\u6c42\u6781\u81f4\u901f\u5ea6\\n\\n\u7f3a\u70b9\uff1a\u5229\u7528\u7387\u4e0d\u9ad8\uff0c\\n  - \u5047\u5982 Cache \u4e0d\u6ee1\uff0c1 \u53f7\u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u5176\u4ed6\u7ec4 1 \u53f7\u7684\u5b58\u50a8\u8bb0\u5f55\u4e5f\u4e0d\u80fd\u5229\u7528\u5230\u7a7a\u7684 Cache \u8d44\u6e90\\n\\n2. \u5168\u76f8\u8fde\u6620\u5c04\\n\\n\u7279\u70b9\uff1a\\n  - \u4e3b\u5b58\u7684\u4efb\u4e00\u5757\u53ef\u4ee5\u6620\u5c04\u5230 Cache \u7684\u4efb\u4e00\u5757\\n\\n- \u4e3b\u5b58\u50a8\u5668\u4f9d\u7136\u9700\u8981\u5206\u7ec4\\n- Cache \u9700\u8981\u9664\u4e86\u7ec4\u53f7\uff0c\u8fd8\u8981\u6807\u8bb0\u7b2c\u51e0\u4f4d\\n- \u5728\u6bd4\u8f83\u65f6\u9700\u8981\u540c\u65f6\u6bd4\u8f83\u7ec4\u53f7\uff0c\u4f4d\u53f7\\n\\n\u4f18\u70b9\uff1a\\n  - \u5229\u7528\u7387\u9ad8\\n  - \u9002\u5408\u505a\u4e3a CPU \u540e\u51e0\u7ea7\u7f13\u5b58\\n\\n3. \u7ec4\u76f8\u8fde\u6620\u5c04\\n\\n\u524d\u4e24\u79cd\u65b9\u6cd5\u7684\u6298\u4e2d\\n\\n\u8ba9\u6bcf\u4e2a\u4e3b\u5b58\u5757\u53ef\u4ee5\u548c n \u4e2a \u7f13\u5b58\u5757\u5bf9\u5e94\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u8fd9 n \u4e2a\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\\n\\n### 3.\u66ff\u6362\u7b97\u6cd5\\n\\n1. \u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\\n\\n\u6ca1\u6709\u4f53\u73b0\u7a0b\u5e8f\u7684\u5c40\u90e8\u578b\u539f\u7406\\n\\n2. \u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7b97\u6cd5\uff08LRU\uff09\\n\\n\u5f88\u597d\u4f53\u73b0\u7a0b\u5e8f\u7684\u5c40\u90e8\u578b\u539f\u7406\\n\\n\u5b9e\u73b0\u590d\u6742\uff1a\uff08\u6ed1\u52a8\u7a97\u53e3 + \u6b21\u6570\uff09\uff1f\\n\\n\u6700\u8fd1\u6700\u65e7\u4f7f\u7528\u7b80\u5355\u66ff\u4ee3\uff1f"},{"id":"/draft/\u8ba1\u7b97\u673a\u7f51\u7edc","metadata":{"permalink":"/blog/draft/\u8ba1\u7b97\u673a\u7f51\u7edc","source":"@site/blog/draft/\u8ba1\u7b97\u673a\u7f51\u7edc.md","title":"\u8ba1\u7b97\u673a\u7f51\u7edc","description":"1. \u6982\u8ff0","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":22.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406","permalink":"/blog/draft/\u7ec4\u6210\u539f\u7406"},"nextItem":{"title":"Rust Quiz#1","permalink":"/blog/draft/rust-quiz/01"}},"content":"## 1. \u6982\u8ff0\\n\\n## 2. \u5e94\u7528\u5c42\\n\\n\\n### \u7535\u8def\u4ea4\u6362 circuit-switching\\n\\n\u9891\u5206\uff0c\u65f6\u5206\\n\\n\u5efa\u7acb\u8fde\u63a5 - \u6570\u636e\u4f20\u8f93 - \u91ca\u653e\u8d44\u6e90\\n\\n### \u5206\u7ec4 (\u5305) \u4ea4\u6362 package-switching\\n\\n\u4e3a\u6bcf\u4e00\u4e2a\u8fde\u63a5\u53ea\u5206\u914d\u4e00\u5c0f\u5757\u8d44\u6e90\uff0c\u540c\u65f6\u670d\u52a1\u591a\u4e2a (\u7528\u6237) \u8fde\u63a5\\n\\n\u7aef\u5230\u7aef\\n\\n- \u6240\u6709\u6570\u636e\u5305\u90fd\u662f\u5229\u7528\u7684\u5b8c\u6574\u7684\u5e26\u5bbd\uff0c\u5e26\u5bbd\u4e0d\u7528\u5206\u7247\\n- \u9650\u5236\u5728\u4ea4\u6362\u673a\u8f6c\u53d1\u7684\u80fd\u529b\\n\\n- \u4e0d\u9700\u8981\u9884\u7559\u8d44\u6e90\\n- \u4e0d\u9700\u8981\u63d0\u524d\u548c\u8f6c\u53d1\u8bbe\u5907\u6c9f\u901a\uff0c\\n- \u9700\u8981\u5b58\u50a8\u8f6c\u53d1\\n- \u8d85\u8fc7\u8f6c\u53d1\u80fd\u529b\u4f1a\u6709\u6392\u961f\u5ef6\u8fdf\uff0c\u751a\u81f3\u4ea7\u751f\u4e22\u5305\\n  - \u7535\u8def\u4ea4\u6362\u4f1a\u9650\u5236\u53d1\u9001\u901f\u7387\uff0c\u4e0d\u4f1a\u5728\u4e2d\u95f4\u4ea7\u751f\u4e0d\u53ef\u7528\\n\\n\\n## 3. \u4f20\u8f93\u5c42\\n\\n### 1. \u4f20\u8f93\u5c42\u670d\u52a1\\n1. \u4f20\u8f93\u5c42\u548c\u7f51\u7edc\u5c42\u7684\u533a\u522b\\n\\n- \u7f51\u7edc\u5c42\uff1a\u4e3b\u673a\u95f4\u7684\u903b\u8f91\u901a\u4fe1\\n- \u4f20\u8f93\u5c42\uff1a\u8fdb\u7a0b\u95f4\u7684\u903b\u8f91\u901a\u4fe1\\n\\n\u4f20\u8f93\u5c42\u7684\u670d\u52a1 = \u4f20\u8f93\u5c42\u7684\u534f\u8bae + \u7f51\u7edc\u5c42\u7684\u670d\u52a1\\n\\n\u4e0d\u540c\u4e3b\u673a\u8fdb\u7a0b\u95f4\u6570\u636e\u4f20\u8f93 = \u4f20\u8f93\u5c42\u7684\u534f\u8bae + \u8fdb\u7a0b\u6240\u5728\u4e3b\u673a\u95f4\u6570\u636e\u4f20\u8f93\\n\\n\u53d1\u9001\u7aef\uff1a\\n\\n- \u63a5\u6536\u5e94\u7528\u5c42\u7684\u6d88\u606f\\n- \u8bbe\u7f6e\u62a5\u6587\u5934\u90e8\u5b57\u6bb5\u7684\u503c\\n- \u521b\u5efa\u62a5\u6587\u6bb5\\n- \u628a\u62a5\u6587\u7aef\u4f20\u9012\u7ed9\u5bf9\u5e94 IP\\n\\n\u63a5\u6536\u7aef\uff1a\\n\\n- \u4ece\u67d0 IP \u63a5\u6536 \u62a5\u6587\u6bb5\\n- \u68c0\u67e5 header \u7684\u503c\\n- \u89e3\u6790\u5e94\u7528\u5c42\u6d88\u606f\\n- \u901a\u8fc7 socket \u628a\u6570\u636e\u591a\u8def\u5206\u89e3\u5230\u5e94\u7528\\n\\n2. \u4e24\u4e2a\u4f20\u8f93\u5c42\u534f\u8bae\\n\\nTCP(Transmission Control Protocol)\uff1a\\n\\n- \u53ef\u9760\u4f20\u8f93 (reliable, in-order delivery)\\n- \u62e5\u585e\u63a7\u5236 (congestion control)\\n- \u6d41\u91cf\u63a7\u5236 (flow control)\uff1a\u786e\u4fdd\u53d1\u9001\u7aef\u4e0d\u4f1a\u53d1\u9001\u8fc7\u591a\u6570\u636e\u5bfc\u81f4\u63a5\u6536\u7aef buffer \u6ea2\u51fa\u800c\u4e22\u5305\u7684\u673a\u5236\\n- \u9762\u5411\u5efa\u7acb\\n\\nUDP(User Datagram Protocol)\uff1a\\n\\n- \u4e0d\u53ef\u9760\u4f20\u8f93 (unreliable, unordered delivery)\\n- \u5c3d\u529b\u800c\u4e3a (no-frills extension of \\"best-effort\\" IP)\\n\\n### 2. \u591a\u8def\u590d\u7528 / \u591a\u8def\u5206\u89e3\\n\\n_Multiplexing/demultiplexing_\\n\\n- \u521b\u5efa socket \u65f6\u9700\u8981\u6307\u5b9a\u672c\u673a\u7aef\u53e3\u53f7\\n- \u8fde\u63a5 UDP \u65f6\u9700\u8981\u6307\u5b9a\u76ee\u7684\u4e3b\u673a\u7684 IP \u548c \u7aef\u53e3\u53f7\\n- \u5f53\u63a5\u6536\u7aef\u63a5\u6536\u5230 UDP \u62a5\u6587\u540e\u4f1a\u68c0\u67e5\u76ee\u7684\u7aef\u53e3\uff0c\u7136\u53e3\u6295\u9012\u5230\u5bf9\u5e94\u7684\u8fdb\u7a0b\\n\\nTCP \u9762\u5411\u8fde\u63a5\uff0cTCP socket \u5b9a\u4e49\u4e86\u4e00\u4e2a\u56db\u5143\u7ec4\\n\\n\u603b\u7ed3\\n\\n- UDP \u591a\u8def\u5206\u89e3\u53ea\u4f7f\u7528\u7aef\u53e3\u53f7\\n- TCP \u591a\u8def\u5206\u89e3\u4f7f\u7528 \u6e90\u548c\u76ee\u5730\u7684 IP \u548c \u7aef\u53e3\\n- \u591a\u8def\u590d\u7528\u548c\u591a\u8def\u5206\u89e3\u53d1\u751f\u5728\u6240\u6709\u5c42\\n\\n### 3. \u65e0\u8fde\u63a5\u4f20\u8f93 UDP\\n\\n#### UDP \u7279\u70b9\\n\\n1. UDP \u662f\u4e00\u79cd\u5c3d\u529b\u800c\u4e3a\u7684\u534f\u8bae\\n\\n   - UDP \u62a5\u6587\u6bb5\u53ef\u80fd\u4f1a\u4e22\u5931\\n   - \u4e5f\u53ef\u80fd\u4f1a\u4e71\u5e8f\\n\\n2. \u65e0\u8fde\u63a5\\n   - UDP \u53d1\u9001\u7aef\u548c\u63a5\u6536\u7aef\u4e0d\u9700\u8981\u63e1\u624b\\n   - \u6bcf\u4e00\u4e2a UDP \u6570\u636e\u6bb5\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u4e0a\u4e0b\u53ef\u80fd\u6ca1\u6709\u5173\u7cfb\\n   - \u53ea\u6709 checkout \u7528\u4e8e\u9519\u8bef\u68c0\u9a8c\\n\\n#### \u4e3a\u4ec0\u4e48\u9700\u8981 UDP\uff1f\\n\\n1. \u65e0\u8fde\u63a5\u7b80\u5386\uff08\u53ef\u80fd\u4f1a\u589e\u52a0\u5ef6\u8fdf\uff09\\n2. \u7b80\u5355\uff0c\u53d1\u9001\u7aef\u548c\u63a5\u6536\u7aef\u4e0d\u9700\u8981\u4fdd\u5b58\u8fde\u63a5\u72b6\u6001\\n3. \u6ca1\u6709\u62e5\u585e\u63a7\u5236\uff0cUDP \u4f1a\u5c3d\u53ef\u80fd\u5feb\u7684\u9001\u8fbe\\n\\n\u5e94\u7528\u573a\u666f\uff1a\\n\\n\u6d41\u5a92\u4f53 app\\n   - \u4f4e\u5ef6\u8fdf\\n   - \u901f\u5ea6\u654f\u611f\\n\\n\u5982\u4f55\u5728 UDP \u4e0a\u4e2a\u6784\u5efa\u53ef\u9760\u4f20\u8f93\uff1a\u5728\u5e94\u7528\u5c42\u4e0a\u6784\u5efa\u53ef\u9760\u6027\\n\\n#### UDP \u62a5\u6587\u6bb5\u683c\u5f0f\\n\\n```\\n+---------+---------+\\n| \u6e90\u7aef\u53e3   | \u76ee\u7684\u7aef\u53e3 |\\n+---------+---------+\\n| \u957f\u5ea6     | \u6821\u9a8c\u548c   |\\n+---------+---------+\\n| \u5e94\u7528\u6570\u636e\uff08\u6d88\u606f\uff09     |\\n|                   |\\n+-------------------+\\n```\\n\\n- \u957f\u5ea6\uff1aUDP \u62a5\u6587\u6bb5\u7684\u957f\u5ea6\uff08\u5305\u542b header\uff09\\n- \u6570\u636e\uff1a\u4e0a\u5c42\u534f\u8bae\u6570\u636e\uff0c\u4f8b\u5982 DNS\uff0cSNMP\\n- checksum\uff1a\u9519\u8bef\u68c0\u6d4b\uff08\u6570\u5b66\u624b\u6bb5\u7684\u5197\u4f59\uff09\\n\\n#### checksum \u8ba1\u7b97\u65b9\u6cd5\\n\\n\u5c06\u6240\u6709\u6570\u636e\u6c42\u548c\\n\\n- \u5047\u5982\u53d1\u9001 5 bit \u6570\u636e (7, 11, 12, 0, 6), \u5b9e\u9645\u4f1a\u53d1\u9001 (7, 11, 12, 0, 6, 36)\\n- \u63a5\u6536\u65b9\u91cd\u65b0\u8ba1\u7b97\u6570\u5b57\u4e4b\u548c\uff0c\u5e76\u4e0e\u6536\u5230\u7684\u6bd4\u8f83\\n- \u53d1\u9001\u65b9\u6cd5\u9001\u7684\u662f\u5b9e\u9645\u6570\u636e\u7684\u53cd\u7801 (-36), \u88ab\u79f0\u4e3a checkout\\n\\n\u95ee\u9898\\n\\n\u5982\u4f55\u7528 4 bit \u8868\u793a 36 \u548c -36\uff1f\\n\\n\u7b54\uff1a1s \u8865\u8fd0\u7b97\\n- `36 = 0001 0100`\\n- `0100 + 0100 = 0110 = 6`\\n- `+6 = 0100 -6 = 1001 \u53d6\u53cd\u5f97\u5230 -6`\\n- `-36 \u53ef\u4ee5\u7528 1001(9) \u8868\u793a`\\n\\n```\\n 1110 0110 0110 0110\\n 1101 0101 0101 0101\\n\\n11011 1011 1011 1011\\n 1011 1011 1011 1100\\n```\\n\\n### 4. \u53ef\u9760\u4f20\u8f93\\n\\n#### rdt\\n\\nRdt1.0:\\n\\n1. \u4e0b\u5c42\u7684 channel \u662f\u53ef\u9760\u7684\\n   - \u4e0d\u4f1a\u53d1\u751f\u6bd4\u7279\u7ffb\u8f6c\\n   - \u4e0d\u4f1a\u4e22\u5305\\n2. \u4e3a sender\uff0creceiver \u8bbe\u7f6e\u4e0d\u540c\u7684 FSM\\n   - sender \u548c receiver \u5206\u522b\u4ece\u4e0b\u5c42\u7684 channel \u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\\n\\nRdt2.0:\\n\\n- \u53d1\u9001\u7aef\u53d1\u9001\u6570\u636e\\n- \u63a5\u6536\u7aef\u63a5\u6536\u6570\u636e\uff0c\u5982\u679c\u63a5\u6536\u5230\u7684\u6570\u636e\u6b63\u786e\uff0c\u8fd4\u56de ACK\uff0c\u5982\u679c\u6570\u636e\u9519\u8bef\uff0c\u8fd4\u56de NAK\u3002\\n- \u53d1\u9001\u7aef\u6839\u636e\u6536\u5230\u7684\u662f ACK \u8fd8\u662f NAK\uff0c\u9009\u62e9\u91cd\u4f20\\n\\n\u95ee\u9898\uff1a\\n\\n1. \u51fa\u73b0\u6bd4\u7279\u7ffb\u8f6c\\n   - \u4f7f\u7528 checksum \u68c0\u6d4b\u9519\u8bef\\n   - ack/nak \u786e\u8ba4\\n   - \u91cd\u4f20\\n2. \u5982\u4f55\u4ece\u9519\u8bef\u6062\u590d\uff1a\\n   - \u81ea\u52a8\u8bf7\u6c42\u91cd\u4f20\\n3. \u65b0\u7684\u72b6\u6001\u673a\\n   - sender \u4f7f\u7528 udt_send \u53d1\u9001\u6570\u636e\uff0c\u53d1\u9001\u5b8c\u6bd5\u540e\u7b49\u5f85\u63a5\u6536 ACK\u3002\\n   - \u5982\u679c\u63a5\u6536\u5230\u4e86 ACK\uff0c\u5c31\u662f\u6210\u529f\u3002\\n   - \u5982\u679c\u63a5\u6536\u5230\u4e86 NAK\uff0c\u5c31\u4f1a\u91cd\u4f20\u3002\\n\\n\u7f3a\u70b9\uff1a\\n\\n1. \u5982\u679c\u63a5\u6536\u65b9\u6210\u529f\u63a5\u6536\uff0c\u4f46\u662f\u8fd4\u56de\u5931\u8d25\uff0c\u4f1a\u5bfc\u81f4\u6d88\u606f\u4e0d\u4e00\u81f4\\n\\nrdt2.1:\\n\\n\\n\u89e3\u51b3\u540c\u6b65\u95ee\u9898 \u548c ACK/NAK \u51fa\u9519\uff1a\\n\\n- \u53d1\u9001\u7aef\u53d1\u9001\u7684\u6570\u636e\u9664\u4e86\u6570\u636e\u548c checksum \u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a\u5e8f\u5217\u53f7\\n- \u5728\u63a5\u6536\u7aef\u8fd4\u56de ACK \u6216 NAK \u662f\uff0c\u8fd8\u4f1a\u8fd4\u56de\u5e8f\u5217\u53f7\\n- \u53d1\u9001\u7aef\u76f4\u5230\u6536\u5230\u6b63\u786e\u7684\u5e8f\u5217\u5316\u624d\u4f1a\u8f6c\u6362\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\\n- \u662f\u9700\u8981 0 \u548c 1 \u4e24\u4e2a\u72b6\u6001\u5176\u5b9e\u5c31\u591f\u4e86\uff0c\u533a\u5206\u65b0\u5305\u548c\u65e7\u5305\\n\\nrdt2.2:\\n\\n\u53bb\u6389 NAK\uff0c\u90fd\u7528 ACK \u8868\u793a\uff1a\\n\\n- \u53d1\u9001\u65b9\u53d1\u9001 ACK\\n- \u63a5\u6536\u65b9\u63a5\u6536\u5230\u6570\u636e\uff0c\u5982\u679c\u6b63\u786e\uff0c\u8fd4\u56de\u539f\u672c\u7684 ACK\uff0c\u5982\u679c\u9519\u8bef\uff0c\u8fd4\u56de\u5176\u4ed6\u6570\u636e\u8868\u793a\u9519\u8bef\u3002\\n- \u53d1\u9001\u65b9\u68c0\u67e5 ACK\uff0c\u5982\u679c ACK \u76f8\u540c\uff0c\u5219\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\\n\\n\\nrdt3.0:\\n\\n1. \u53ef\u80fd\u53d1\u9001\u4e22\u5305\\n   - \u53d1\u9001\u7aef\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u53ef\u80fd\u662f\u6570\u636e\u4e22\u4e86 \u6216\u8005 ACK \u4e22\u4e86\uff0c\u65e0\u6cd5\u533a\u5206\uff0c\u7edf\u4e00\u91cd\u4f20\\n   - \u7b49\u5f85\u591a\u4e45\uff0c\u51c6\u672c\u8ba1\u6570\u5668\uff0c\u7b49\u5f85\u8d85\u65f6\\n\\n#### Pipelined protocols (\u6d41\u6c34\u7ebf)\\n\\n\u63d0\u9ad8\u6548\u7387\uff0c\u5728\u53d1\u9001\u7aef\u6536\u5230\u786e\u8ba4\u540e\u53ef\u4ee5\u53d1\u9001\u66f4\u591a\u6570\u636e\\n\\n\u6bcf\u6b21\u53d1\u9001\u591a\u4efd\u6570\u636e\uff0c\u5f53\u4efd\u6570\u63d0\u9ad8\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u5229\u7528\u7387\u5c31\u5230 100%, \u65e0\u6cd5\u7ee7\u7eed\u63d0\u9ad8\u6548\u7387\\n\\n1. go-Back-N\\n\\n\u6ed1\u52a8\u7a97\u53e3\uff0c\u91cd\u4f20\u5f88\u591a\\n\\n\u79ef\u7d2f\u786e\u8ba4\u673a\u5236\\n\\n- \u53d1\u9001\u65b9\u53d1\u9001 5 \u4e2a\u6570\u636e\u5305\\n- \u5047\u5982\u7b2c 3 \u4e2a\u4e22\u5931\uff0c\u63a5\u6536\u65b9\u4f1a\u8fd4\u56de\u9519\u8bef\u7684\u5e8f\u53f7\\n- \u53d1\u9001\u7aef\u4ece\u8fd9\u91cc\u91cd\u65b0\u53d1\u9001\\n\\n- \u5728\u63a5\u6536\u65b9\\n- \u5982\u679c\u5230\u8fbe\u5206\u7ec4\u662f\u6309\u5e8f\u5230\u8fbe\uff0c\u90a3\u4e48\u53d1\u9001 ACK\uff0c\u53d1\u9001\u65b9\u6b63\u5e38\u79fb\u52a8\u7a97\u53e3\\n- \u5982\u679c\u4e0d\u662f\u6309\u5e8f\u5230\u8fbe\uff0c\u90a3\u4e48\u63a5\u6536\u65b9\u4e22\u5f03\u6240\u6709\u5931\u5e8f\u5206\u7ec4\uff1b\u4e22\u5f03\u4e00\u4e2a\u6b63\u786e\u63a5\u6536\u7684\u5931\u5e8f\u5206\u7ec4\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u591a\u7684\u91cd\u4f20\\n- \u5982\u679c\u67d0\u4e2a\u786e\u8ba4\u4e22\u5931\uff0c\u540e\u7eed\u7684\u786e\u8ba4\uff08\u53ea\u6709\u53d1\u9001\u7aef\u6b63\u786e\u63a5\u6536\u5230\u4e86\u6570\u636e\u624d\u53ef\u80fd\u4f1a\u6709\u540e\u7eed\u7684\u786e\u8ba4\uff09\u4e5f\u80fd\u4f7f\u53d1\u9001\u7aef\u6b63\u5e38\u79fb\u52a8\u7a97\u53e3\\n\\n2. selective repeat(\u9009\u62e9\u91cd\u4f20)\\n\\n- \u63a5\u6536\u65b9\u56e0\u4e3a\u6709 buffer\uff0c\u6240\u4ee5\u4e0d\u7528\u6309\u5e8f\u63a5\u6536\u5206\u7ec4\uff0c\u5931\u5e8f\u7684\u5206\u7ec4\u4f1a\u88ab\u7f13\u5b58\\n- \u53d1\u9001\u65b9\u7684 buffer\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u6709\u5404\u81ea\u7684\u8ba1\u6570\u5668\uff0c\u4e0d\u7528\u91cd\u4f20\u591a\u7684\u6570\u636e\u5305\\n\\n\u4e3a\u4e86\u9632\u6b62\u8bef\u5224\u6570\u636e\u5305\\n\\nACK \u7f16\u53f7\u6570\u91cf\u81f3\u5c11\u8981 = \u53d1\u9001\u7a97\u53e3 + \u63a5\u6536\u7a97\u53e3\\n\\n### TCP\\n\\n![](./image/a.jpg)\\n\\n- \u6e90\u7aef\u53e3\u548c\u76ee\u7684\u7aef\u53e3\u5b57\u6bb5\uff1a\u5404\u5360 2 \u5b57\u8282\u3002\u7aef\u53e3\u662f\u8fd0\u8f93\u5c42\u4e0e\u5e94\u7528\u5c42\u7684\u670d\u52a1\u63a5\u53e3\u3002\u8fd0\u8f93\u5c42\u7684\u590d\u7528\u548c\u5206\u7528\u529f\u80fd\u90fd\u8981\u901a\u8fc7\u7aef\u53e3\u624d\u80fd\u5b9e\u73b0\u3002\\n- \u5e8f\u53f7\u5b57\u6bb5\uff1a\u5360 4 \u5b57\u8282\u3002TCP \u8fde\u63a5\u4e2d\u4f20\u9001\u7684\u6570\u636e\u6d41\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u7f16\u4e0a\u4e00\u4e2a\u5e8f\u53f7\u3002\u5e8f\u53f7\u5b57\u6bb5\u7684\u503c\u5219\u6307\u7684\u662f\u672c\u62a5\u6587\u6bb5\u6240\u53d1\u9001\u7684\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5e8f\u53f7\u3002\\n- \u786e\u8ba4\u53f7\u5b57\u6bb5\uff1a\u5360 4 \u5b57\u8282\uff0c\u662f\u671f\u671b\u6536\u5230\u5bf9\u65b9\u7684\u4e0b\u4e00\u4e2a\u62a5\u6587\u6bb5\u7684\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5e8f\u53f7\u3002\\n- \u6570\u636e\u504f\u79fb\uff08\u5373\u9996\u90e8\u957f\u5ea6\uff09\uff1a\u5360 4 \u4f4d\uff0c\u5b83\u6307\u51fa TCP \u62a5\u6587\u6bb5\u7684\u6570\u636e\u8d77\u59cb\u5904\u8ddd\u79bb TCP \u62a5\u6587\u6bb5\u7684\u8d77\u59cb\u5904\u6709\u591a\u8fdc\u3002\u201c\u6570\u636e\u504f\u79fb\u201d\u7684\u5355\u4f4d\u662f 32 \u4f4d\u5b57\uff08\u4ee5 4 \u5b57\u8282\u4e3a\u8ba1\u7b97\u5355\u4f4d\uff09\u3002\\n- \u4fdd\u7559\u5b57\u6bb5\uff1a\u5360 6 \u4f4d\uff0c\u4fdd\u7559\u4e3a\u4eca\u540e\u4f7f\u7528\uff0c\u4f46\u76ee\u524d\u5e94\u7f6e\u4e3a 0\u3002\\n- \u7d27\u6025 URG\uff1a\u5f53 URG \uf03d 1 \u65f6\uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548\u3002\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001 (\u76f8\u5f53\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684\u6570\u636e)\u3002\\n- \u786e\u8ba4 ACK\uff1a\u53ea\u6709\u5f53 ACK \uf03d 1 \u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548\u3002\u5f53 ACK \uf03d 0 \u65f6\uff0c\u786e\u8ba4\u53f7\u65e0\u6548\u3002\\n- \u63a8\u9001 PSH (PuSH)\uff1a\u63a5\u6536 TCP \u6536\u5230 PSH = 1 \u7684\u62a5\u6587\u6bb5\uff0c\u5c31\u5c3d\u5feb\u5730\u4ea4\u4ed8\u63a5\u6536\u5e94\u7528\u8fdb\u7a0b\uff0c\u800c\u4e0d\u518d\u7b49\u5230\u6574\u4e2a\u7f13\u5b58\u90fd\u586b\u6ee1\u4e86\u540e\u518d\u5411\u4e0a\u4ea4\u4ed8\u3002\\n- \u590d\u4f4d RST (ReSeT) \uff1a\u5f53 RST \uf03d 1 \u65f6\uff0c\u8868\u660e TCP \u8fde\u63a5\u4e2d\u51fa\u73b0\u4e25\u91cd\u5dee\u9519\uff08\u5982\u7531\u4e8e\u4e3b\u673a\u5d29\u6e83\u6216\u5176\u4ed6\u539f\u56e0\uff09\uff0c\u5fc5\u987b\u91ca\u653e\u8fde\u63a5\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u7acb\u8fd0\u8f93\u8fde\u63a5\u3002\\n- \u540c\u6b65 SYN\uff1a\u540c\u6b65 SYN = 1 \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587\u3002\\n- \u7ec8\u6b62 FIN (FINis) \uff1a\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002FIN \uf03d 1 \u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u7aef\u7684\u6570\u636e\u5df2\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5\u3002\\n- \u7a97\u53e3\u5b57\u6bb5\uff1a\u5360 2 \u5b57\u8282\uff0c\u7528\u6765\u8ba9\u5bf9\u65b9\u8bbe\u7f6e\u53d1\u9001\u7a97\u53e3\u7684\u4f9d\u636e\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002\\n- \u68c0\u9a8c\u548c\uff1a\u5360 2 \u5b57\u8282\u3002\u68c0\u9a8c\u548c\u5b57\u6bb5\u68c0\u9a8c\u7684\u8303\u56f4\u5305\u62ec\u9996\u90e8\u548c\u6570\u636e\u8fd9\u4e24\u90e8\u5206\u3002\u5728\u8ba1\u7b97\u68c0\u9a8c\u548c\u65f6\uff0c\u8981\u5728 TCP \u62a5\u6587\u6bb5\u7684\u524d\u9762\u52a0\u4e0a 12 \u5b57\u8282\u7684\u4f2a\u9996\u90e8\u3002\\n- \u7d27\u6025\u6307\u9488\u5b57\u6bb5\uff1a\u5360 16 \u4f4d\uff0c\u6307\u51fa\u5728\u672c\u62a5\u6587\u6bb5\u4e2d\u7d27\u6025\u6570\u636e\u5171\u6709\u591a\u5c11\u4e2a\u5b57\u8282\uff08\u7d27\u6025\u6570\u636e\u653e\u5728\u672c\u62a5\u6587\u6bb5\u6570\u636e\u7684\u6700\u524d\u9762\uff09\u3002\\n- \u9009\u9879\u5b57\u6bb5\uff1a\u957f\u5ea6\u53ef\u53d8\u3002TCP \u6700\u521d\u53ea\u89c4\u5b9a\u4e86\u4e00\u79cd\u9009\u9879\uff0c\u5373\u6700\u5927\u62a5\u6587\u6bb5\u957f\u5ea6 MSS\u3002MSS \u544a\u8bc9\u5bf9\u65b9 TCP\uff1a\u201c\u6211\u7684\u7f13\u5b58\u6240\u80fd\u63a5\u6536\u7684\u62a5\u6587\u6bb5\u7684\u6570\u636e\u5b57\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u662f MSS \u4e2a\u5b57\u8282\u3002\\n\\nTCP seq \u5e8f\u5217\u53f7\\n\\n#### TCP Feature\\n\\n- Point to Point (\u5355\u64ad\uff0c\u5355\u53d1\u9001\u8005\uff0c\u5355\u63a5\u6536\u8005)\\n- reliable, in-order byte stream\\n- pipelined\uff08\u62e5\u585e\u63a7\u5236\uff0c\u6d41\u91cf\u63a7\u5236\uff09\\n- send & receive buffers\\n- full deplex data(\u5168\u53cc\u5de5\uff0c\u53cc\u5411\u6570\u636e\u4f20\u8f93\uff0cMSS(\u6700\u5927\u62a5\u6587\u957f\u5ea6))\\n- connection-orinted(\u63e1\u624b\uff0c\u521d\u59cb\u5316 sender \u548c receiver \u7684\u72b6\u6001)\\n- flow controlled(\u53d1\u9001\u7aef\u4e0d\u80fd\u8d85\u8fc7\u63a5\u6536\u7aef\u7684\u5904\u7406\u80fd\u529b)\\n\\n### Flow Control\\n\\n\u4e3a\u4ec0\u4e48\u9700\u8981\u6d41\u91cf\u63a7\u5236\uff1f\\n\\n- \u53d1\u9001\u8005\u63a5\u6536\u8005\u7684\u901f\u7387\u4e0d\u4e00\u5b9a\u5339\u914d\uff0c\u5982\u679c\u53d1\u7684\u5feb\uff0c\u53ef\u80fd\u4ea7\u751f\u6d88\u606f\u5806\u79ef\\n\\n\u5982\u4f55\u89e3\u51b3\uff1f\\n\\n- \u63a5\u6536\u7aef\u9700\u8981\u901a\u77e5\u53d1\u9001\u7aef\u81ea\u5df1\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8ba9\u5b83\u4e0d\u8981\u53d1\u9001\u592a\u591a\u3002\u5bf9\u5e94\u7684\u5c31\u662f TCP \u534f\u8bae\u4e2d\u89c4\u5b9a\u7684 Receive Window (\u63a5\u6536\u7a97\u53e3) \u5b57\u6bb5\\n\\n> \u6ce8\u610f\u6ed1\u52a8\u7a97\u53e3 (\u53d1\u9001\u7a97\u53e3)\uff0c\u63a5\u6536\u7a97\u53e3\uff0c\u4ee5\u53ca\u4e4b\u540e\u7684\u62e5\u585e\u7a97\u53e3\u7684\u533a\u522b\\n\\n### Congestion Control\\n\\n#### \u62e5\u585e\\n\\n- \u592a\u591a\u53d1\u9001\u6e90\u53d1\u9001\u4e86\u592a\u591a\u7684\u6570\u636e\uff0c\u8d85\u8fc7\u4e86\u7f51\u7edc\u7684\u627f\u8f7d\u80fd\u529b\\n- \u5bf9\u8d44\u6e90\u9700\u6c42\u7684\u603b\u548c > \u53ef\u7528\u8d44\u6e90\\n- \u4e0e\u6d41\u91cf\u63a7\u5236\u4e0d\u540c\\n- \u8868\u73b0\\n   - \u4e22\u5305\\n   - \u9ad8\u5ef6\u8fdf\\n- top-10 question!\\n\\n#### \u89e3\u51b3\u65b9\u6cd5\\n\\n1. \u7aef\u5230\u7aef\\n   - \u6ca1\u6709\u6765\u81ea\u7f51\u7edc\u7684\u660e\u786e\u53cd\u9988\\n   - \u7aef\u7cfb\u7edf\u901a\u8fc7\u4e22\u5305\u548c\u5ef6\u8fdf\u63a8\u6d4b\u51fa\u53ef\u80fd\u901a\u8fc7\u62e5\u585e\\n   - TCP \u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\\n\\n2. \u7f51\u7edc\u5c42\u8f85\u52a9\\n   - \u8def\u7531\u4e3b\u52a8\u53cd\u9988\u7ed9\u7aef\u7cfb\u7edf\\n      - \u7531 1 \u4e2a bit \u6307\u51fa\u7f51\u7edc\u5b58\u5728\u62e5\u585e(SNA, DECbit, TCP/IP ECN, ATM)\\n      - \u53d1\u9001\u7aef\u9700\u8981\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u7684\u901f\u7387\u53d1\u9001\u6570\u636e\\n\\n#### \u4e09\u5927\u95ee\u9898\\n\\n1. \u5982\u4f55\u9650\u5236\u53d1\u9001\u901f\u5ea6\uff1f\\n\\n   - Last Byte Sent(\u4e0a\u4e00\u4e2a\u53d1\u9001\u7684\u5b57\u8282) - Last Byte Acked(\u6700\u540e\u786e\u8ba4\u7684\u5b57\u8282) < CongWin(\u62e5\u585e\u7a97\u53e3)\\n\\n   - rate(\u53d1\u9001\u901f\u7387) = CongWIn / RTT B/s\\n\\n2. \u5982\u4f55\u68c0\u6d4b\u5230\u62e5\u585e\uff1f\\n   loss event = timeout or 3 duplicate acks\\n\\n\\n3. \u5e94\u8be5\u53d1\u9001\u591a\u5feb\uff1f\\n\\n   - AIMD\\n\\n      - \u52a0\u6cd5\u589e\u52a0\uff0c\u4e58\u6cd5\u51cf\u5c0f(additive increase, multiplicative decrease)\\n      - \u589e\u52a0\u6709\u4e00\u4e2a\u5355\u4f4d\uff081 \u5b57\u8282\uff0c1k\uff09\uff0c\u4e00\u822c\u4ee5 MSS \u6570\u91cf\u4e3a\u5355\u4f4d\\n      - \u56fe\u50cf\u8868\u73b0\u4e3a\u952f\u9f7f\u72b6\\n\\n   - slow start\\n      - \u8fde\u63a5\u5f00\u59cb\u65f6\uff0cCongWin \u4e3a 1MSS\uff0c\\n         - \u6bcf\u6b21\u63a5\u6536\u5230 ACK\uff0cCongWin \u5c31\u4f1a\u4e58 2\\n         - \u6162\u542f\u52a8\u5176\u5b9e\u5e76\u4e0d\u6162\uff0c\u589e\u52a0\u7684\u901f\u5ea6\u5f88\u5feb\\n      - \u901f\u5ea6\u589e\u52a0\u6709\u4e00\u5b9a\u5f97\u9608\u503c\uff0c\u5f53\u8d85\u8fc7\u9608\u503c\u540e\uff0c\u5230\u8fbe\u65b0\u9636\u6bb5\uff0c\u4e00\u822c\u79f0\u4e3a \\"\u62e5\u585e\u907f\u514d\\"\uff0c\u6bcf\u6b21\u53ea\u4f1a\u589e\u52a0 1 \u4e2a MSS\u3002\\n\\n\\n   - conservative after timeout events\\n      - \u53d1\u751f\u4e22\u5305\u540e\\n         - \u7a97\u53e3\u6389\u56de 1 MSS\\n         - \u7ebf\u6027\u589e\u52a0\\n      - \u6536\u5230 3 \u4e2a\u91cd\u590d\u7684 ACK\\n         - \u7a97\u53e3\u780d\u534a\\n         - \u7ebf\u6027\u589e\u52a0\\n         - \u5feb\u901f\u91cd\u4f20\\n      - \u65b0\u7684\u9608\u503c\u90fd\u4e3a\u4e0a\u6b21\u9608\u503c\u7684\u4e00\u534a\\n      > \u4e22\u5305\u76f8\u5bf9\u4e8e 3 \u4e2a\u91cd\u590d\u7684 ACK \u66f4\u4e25\u91cd\\n\\n   - TCP CUBIC\\n      - \u7a97\u53e3\u51cf\u534a\u540e\uff0c\u589e\u52a0\u7684\u901f\u5ea6\u6539\u4e3a `x^3` \u7684\u66f2\u7ebf\\n\\n### TCP \u516c\u5e73\u6027\\n\\nAIMD \u5177\u6709\u8f83\u597d\u7684\u516c\u5e73\u6027\uff0c\u4f7f\u5f97\u4e0d\u540c\u8fde\u63a5\u5360\u6709\u7684\u5e26\u5bbd\u76f8\u7b49\\n\\n> \u5982\u679c TCP \u548c UDP \u540c\u65f6\u7ade\u4e89\u4f1a\u600e\u6837\uff1fTCP \u4f1a\u4e3b\u52a8\u964d\u4f4e\u901f\u5ea6\uff0cUDP \u5219\u4e0d\u7ba1\\n\\n> \u60f3\u8981\u53ef\u9760\u4f20\u8f93\uff0c\u4e0d\u60f3\u8981\u62e5\u585e\u63a7\u5236\u600e\u4e48\u529e\uff1f\u5728 UDP \u7684\u57fa\u7840\u4e0a\u81ea\u884c\u5b9e\u73b0\u53ef\u9760\u4f20\u8f93 (QUIC \u5c31\u662f\u8fd9\u4e48\u5e72)\\n\\n## 4. \u7f51\u7edc\u5c42\\n\\n### \u7b80\u4ecb\\n\\n- \u63d0\u4f9b\u4e3b\u673a\u95f4\u7684\u6570\u636e\u4f20\u8f93\\n- \u53d1\u9001\u7aef\u5c06\u6bb5 (segments) \u5c01\u88c5\u4e3a\u6570\u636e\u62a5\uff0c\u63a5\u6536\u7aef\u628a segments \u53d1\u9001\u5230\u4f20\u8f93\u5c42\\n- \u7f51\u7edc\u5c42\u534f\u8bae\u5728\u5404\u4e2a\u4e3b\u673a\u548c\u8def\u7531\u95f4\\n- router \u4f1a\u786e\u8ba4\u7ecf\u8fc7\u4ed6\u7684\u6240\u6709 IP \u6570\u636e\u62a5\u7684 header \u5b57\u6bb5\\n\\n### \u8f6c\u53d1 & \u8def\u7531\\n\\n\u8def\u7531\uff1a\u51b3\u5b9a\u4ece\u53d1\u9001\u6e90\u53d1\u9001\u7684 packets \u5230\u76ee\u7684\u5730\u7684\u8def\u5f84\\n   - \u8def\u7531\u9009\u62e9\u7b97\u6cd5\\n\\n\u8f6c\u53d1\uff1a\u628a packets \u4ece\u8def\u7531\u7684\u8f93\u5165\u8f6c\u53d1\u5230\u5408\u9002\u7684\u8f93\u51fa\\n   - \u5982\u4f55\u901a\u8fc7\u67d0\u4e00\u4e2a\u4ea4\u6362\u673a\\n\\n### \u6570\u636e\u5e73\u9762\uff0c\u63a7\u5236\u5e73\u9762\\n\\n1. \u6570\u636e\u5e73\u9762\\n\\n   - \u5c40\u90e8\u7684\\n\\n2. \u63a7\u5236\u5e73\u9762\\n   - \u5168\u5c40\u7684\\n   - Per-router control plane\\n      - \u6bcf\u4e00\u4e2a\u8def\u7531\u8bbe\u5907\u5355\u72ec\u5b9e\u73b0\u8def\u7531\u7b97\u6cd5\\n   - Software-Defined Networking(SDN) control plane\\n      - \u7531\u4e00\u4e2a\u96c6\u4e2d\u5f0f\u7684\u8ba1\u7b97\u673a\u8ba1\u7b97\u8def\u7531\u5e76\u5411\u4e0b\u53d1\u9001\u4e86\u8def\u7531\u8868\\n\\n### \u662f\u5426\u5efa\u7acb\u8fde\u63a5\\n\\n- \u4e09\u79cd\u91cd\u8981\u7684\u7f51\u7edc\u67b6\u6784\\n   - ATM, frame relay, X.25\\n- \u5728\u6570\u636e\u62a5\u6d41\u52a8\u524d\uff0c\u4e24\u4e2a\u4e3b\u673a\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8def\u7531\u4f1a\u5efa\u7acb\u865a\u62df\u8fde\u63a5\\n- \u7f51\u7edc\u5c42\u548c\u4f20\u8f93\u5c42\u8fde\u63a5\u7684\u533a\u522b\\n   - \u7f51\u7edc\u5c42\uff1a\u4e24\u4e2a\u4e3b\u673a\u4e4b\u95f4 (\u4e5f\u53ef\u80fd\u5305\u542b\u4e4b\u95f4\u7684\u4ea4\u6362\u673a)\\n   - \u4f20\u8f93\u5c42\uff1a\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\\n\\n### \u865a\u7535\u8def & \u6570\u636e\u62a5\\n\\n- \u865a\u7535\u8def\\n   - \u6709\u8fde\u63a5\\n\\n- \u6570\u636e\u62a5\\n   - \u65e0\u8fde\u63a5\\n\\n> \u7f51\u7edc\u5c42\u5e94\u8be5\u662f\u9762\u5411\u8fde\u63a5\u7684\u8fd8\u662f\u65e0\u8fde\u63a5\u7684\uff1f\\n> \u5728\u8ba1\u7b97\u673a\u901a\u4fe1\u4e2d\uff0c\u53ef\u9760\u4ea4\u4ed8\u5e94\u8be5\u7531\u8c01\u6765\u8d1f\u8d23\uff1f\u662f\u7f51\u7edc\u8fd8\u662f\u7aef\u7cfb\u7edf\uff1f\\n\\n\u8f6c\u53d1\u8868\u7684\u5efa\u7acb\\n\\n\u5bf9\u4e8e\u865a\u7535\u8def\uff0c\u8f6c\u53d1\u8868\u4f1a\u5728\u5efa\u7acb\u8fde\u63a5\u65f6\u4ea7\u751f\\n\\n### IP \u5730\u5740\\n\\n_addressing, forwarding, routing_\\n\\n- \u5730\u5740\u5757\u5982\u4f55\u8bbe\u8ba1\\n- \u5bf9\u5b58\u50a8\u548c\u8f6c\u53d1\u7684\u5f71\u54cd\\n\\n#### IP \u5730\u5740\u7684\u7f16\u5740\u65b9\u6cd5\\n\\n1. \u5206\u7c7b\u7684 IP \u5730\u5740\\n   - \u6bcf\u4e00\u7c7b\u5730\u5740\u90fd\u7531\u4e24\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u6bb5\u7ec4\u6210\\n      - \u7f51\u7edc\u53f7 net-id: \u6807\u5fd7\u4e3b\u673a\uff08\u6216\u8def\u7531\u5668\uff09\u8fde\u63a5\u5230\u7684\u7f51\u7edc\\n      - \u4e3b\u673a\u53f7 host-id\uff1a\u6807\u5fd7\u8be5\u4e3b\u673a\u6216\u8def\u7531\u5668\\n   - \u4e24\u7ea7\u7684 IP \u5730\u5740\u53ef\u4ee5\u8bb0\u4e3a\uff1a`IP \u5730\u5740 ::= { <\u7f51\u7edc\u53f7>, <\u4e3b\u673a\u53f7>}`\\n   > `::=` \u8868\u793a \\"\u5b9a\u4e49\u4e3a\\"\\n\\n\\n|  \u7f51\u7edc\u7c7b\u522b    |   \u9996\u90e8  |   \u5730\u5740\u8303\u56f4           |\\n|----- |------|------------------------------|\\n| A \u7c7b | 0    | 1.0.0.0 - 127.255.255.255    |\\n| B \u7c7b | 10    | 128.0.0.0 - 191.255.255.255 |\\n| C \u7c7b | 110  | 192.0.0.0 - 223.255.255.255  |\\n| D \u7c7b | 1110 | 224.0.0.0 - 239.255.255.255  |\\n| E \u7c7b |1111  |                              |\\n\\n| \u7c7b\u522b | \u6700\u5927\u7f51\u7edc\u6570 | \u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u7f51\u7edc\u53f7 | \u6700\u540e\u4e00\u4e2a\u53ef\u7528\u7684\u7f51\u7edc\u53f7 | \u6bcf\u4e2a\u7f51\u7edc\u4e2d\u7684\u6700\u5927\u4e3b\u6280\u672f |\\n| A |  126(2^7 - 2)     | 1       | 126         | 16,777,214 |\\n| B | 16383(2^14 - 1)   | 128.1   | 191.255     | 65,534 |\\n| C | 2097151(2^21 - 1) | 192.0.1 | 223.255.255 | 254 |\\n\\n- \u79c1\u6709\u5730\u5740\\n\\n   - A\uff1a10.0.0.0 - 10.255.255.255(10.0.0.0/8 prefix)\\n   - B\uff1a172.16.0.0 - 172.31.255.255(172.16.0.0/12 prefix)\\n   - C\uff1a192.168.0.0 - 192.168.255.255(192.168.0.0/16 prefix)\\n\\n- 127.0.0.1: loopback\\n- 255.255.255.255:\\n- 0.0.0.0:\\n\\n2. \u5b50\u7f51\u7684\u5212\u5206\\n\\n3.  CIDR \u65b9\u6848\\n   - \u65e0\u5206\u7c7b\u7684\u7f16\u5236\u65b9\u6cd5\\n\\n#### IP \u5730\u5740\u7684\u4e00\u4e9b\u91cd\u8981\u7279\u70b9\\n- IP \u5730\u5740\u662f \\"\u5206\u7b49\u7ea7\\" \u7684\u5730\u8d28\u7ed3\u6784\\n   - \u65b9\u4fbf\u4e86 IP \u7ba1\u7406\uff1aIP \u7ba1\u7406\u673a\u6784\u5206\u914d IP \u65f6\u53ea\u5206\u914d\u7f51\u7edc\u53f7\uff0c\u5269\u4e0b\u7684\u4ea4\u7531\u5355\u4f4d\u81ea\u884c\u7ba1\u7406\\n   - \u51cf\u5c0f\u4e86\u8def\u7531\u8868\u7684\u5927\u5c0f\uff1a\u8def\u7531\u5668\u4ec5\u6839\u636e\u7f51\u7edc\u53f7\u6765\u8f6c\u53d1\u8def\u7531\uff08\u4e0d\u7528\u8003\u8651\u76ee\u7684\u4e3b\u673a\u53f7\uff09\uff0c\u51cf\u5c11\u4e86\u8def\u7531\u8868\u9879\u6570\uff0c\u51cf\u5c0f\u4e86\u5b58\u50a8\u7a7a\u95f4\u3002\\n- \u5b9e\u9645\u4e0a IP \u5730\u5740\u6807\u5fd7\u4e00\u4e2a\u4e3b\u673a\u548c\u4e00\u6761\u94fe\u8def\u7684\u63a5\u53e3\\n   - \u5f53\u4e00\u4e2a\u4e3b\u673a\u540c\u65f6\u8fde\u63a5\u5230\u4e24\u4e2a\u7f51\u7edc\u4e0a\u65f6\uff0c\u5b83\u5fc5\u987b\u540c\u65f6\u6709\u4e24\u4e2a IP \u5730\u5740\uff0c\u5e76\u4e14 net-id \u5fc5\u987b\u4e0d\u540c\uff08\u79f0\u4e3a\u591a\u5f52\u5c5e\u4e3b\u673a\uff09\\n   - \u4e00\u4e2a\u8def\u7531\u5668\u81f3\u5c11\u8981\u8fde\u63a5\u5230\u4e24\u4e2a\u7f51\u7edc\uff0c\u624d\u80fd\u5c06 IP \u6570\u636e\u62a5\u603b\u4e00\u4e2a\u7f51\u7edc\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u7f51\u7edc\u3002\u56e0\u6b64\u8def\u7531\u5668\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u540c\u7684 IP \u5730\u5740\\n- \u7528\u8f6c\u53d1\u5668\u6216\u8005\u7f51\u6865\u8fde\u63a5\u8d77\u6765\u7684\u82e5\u5e72\u5c40\u57df\u7f51\u4ecd\u5c5e\u4ee5\u4e00\u4e2a\u7f51\u7edc\uff0c\u8fd9\u4e9b\u5c40\u57df\u7f51\u6709\u76f8\u540c\u7684 net-id\\n\\n#### \u5206\u7c7b IP \u5730\u5740\u7684\u8def\u7531\u8f6c\u53d1\\n\\n- direct delivery \u76f4\u63a5\u6295\u9012/\u4ea4\u4ed8\\n- indirect delivery \u95f4\u63a5\u6295\u9012/\u4ea4\u4ed8\\n- Route based\uff0c\u57fa\u4e8e\u8def\u5f84\uff08\u6784\u5efa\u8f6c\u53d1\u8868\u56f0\u96be\uff0c\u7ef4\u62a4\u96be\u5ea6\u5927\uff09\\n- Next hop based\uff0c\u57fa\u4e8e\u4e0b\u4e00\u8df3\uff08\u7c7b\u4f3c\u4e8e \\"\u8def\u724c\\"\uff09\\n\\n1. \u5982\u679c\u591a\u4e2a\u6e90 IP \u6709\u76f8\u540c\u7684\u4e0b\u4e00\u8df3\uff0c\u4ed6\u4eec\u7684\u76ee\u7684\u5730\u5740\u53ef\u4ee5\u5408\u5e76\\n\\n2. Default routing\uff08\u7f3a\u7701\uff08\u9ed8\u8ba4\uff09\u8def\u7531\uff09\\n\\n#### \u5212\u5206\u5b50\u7f51\u548c\u6784\u9020\u8d85\u7f51\\n\\n1. \u4ece\u4e24\u6781 IP \u5230 \u4e09\u7ea7 IP \u5730\u5740\\n   \u539f\u56e0\uff1a\\n      - IP \u5730\u5740\u5229\u7528\u7387\u4f4e\\n      - \u4e3a\u6bcf\u4e00\u4e2a\u7269\u7406\u7f51\u7edc\u5206\u914d\u4e00\u4e2a\u7f51\u7edc\u53f7\u4f1a\u4f7f\u8def\u7531\u8868\u53d8\u5927\uff0c\u964d\u4f4e\u6027\u80fd\\n      - \u4e24\u6781 IP \u5730\u5740\u4e0d\u591f\u7075\u6d3b\\n\\n2. \u5b50\u7f51\u63a9\u7801\\n\\n\u5b50\u7f51\u63a9\u7801\u524d\u4e00\u90e8\u5206\u4e3a 1\uff0c\u540e\u4e00\u90e8\u5206\u5168\u4e3a 0\uff0c\u5c06\u5b50\u7f51\u63a9\u7801\u4e0e IP \u5730\u5740\u8fdb\u884c \\"\u4e0e\\" \u8fd0\u7b97\uff0c\u5c31\u80fd\u627e\u5230 IP \u5730\u5740\u7684\u5b50\u7f51\u90e8\u5206\u3002\\n\\n\u53ef\u4ee5\u7528\u6765\u533a\u5206 net-id \u548c host-id \u6216\u8005 subnet-id \u548c host-id\\n\\n\u4e0d\u540c\u7684\u5b50\u7f51\u63a9\u7801\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7f51\u7edc\u5730\u5740\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u63a9\u7801\u7684\u6548\u679c\u662f\u4e0d\u540c\u7684\u3002\u5982\u679c\u4f7f\u7528\uff0c\u8def\u7531\u5668\u7ed9\u51fa\u76ee\u7684\u7684\u7f51\u7edc\u5730\u5740\u5916\uff0c\u8fd8\u5fc5\u987b\u540c\u65f6\u7ed9\u51fa\u8be5\u7f51\u7edc\u7684\u5b50\u7f51\u63a9\u7801\u3002\\n\\n\u82e5\u4e00\u4e2a\u8def\u7531\u5668\u8fde\u63a5\u5728\u4e24\u4e2a\u5b50\u7f51\u4e0a\uff0c\u4ed6\u5c31\u6709\u4e24\u4e2a\u7f51\u7edc\u5730\u5740\u548c\u5b50\u7f51\u63a9\u7801\\n\\n#### \u65e0\u5206\u7c7b\u7f16\u5740 CIDR\\n\\n1. CIDR \u7279\u70b9\\n   - \u6d88\u9664\u4e86 A\uff0cB\uff0cC \u7c7b\u5730\u5740\uff0c\u4ee5\u53ca\u5212\u5206\u5b50\u7f51\u7684\u6982\u5ff5\\n   - \u4f7f\u7528\u5404\u79cd\u957f\u5ea6\u7684 \\"\u7f51\u7edc\u524d\u7f00\\" \u4ee3\u66ff\u5206\u7c7b\u5730\u5740\u4e2d\u7684\u7f51\u7edc\u53f7\u548c\u5b50\u7f51\u53f7\u3002\\n   - \u4ece\u4e09\u7ea7\u7f16\u5236\uff08\u53d6\u6d88\u5b50\u7f51\u63a9\u7801\uff09\u53d8\u56de\u4e8c\u7ea7\u7f16\u5236\\n\\n2. \u65e0\u5206\u7c7b\u7684\u4e24\u7ea7\u7f16\u5740\\n   - IP \u8bb0\u6cd5\uff1a`IP \u5730\u5740 ::= {<\u7f51\u7edc\u524d\u7f00>, <\u4e3b\u673a\u53f7>}`\\n   - CIDR \u8fd8\u662f\u7528\u659c\u7ebf\u8bb0\u6cd5\uff1a\u5728 IP \u5730\u5740\u9762\u52a0\u4e00\u4e2a `/`\uff0c\u540e\u9762\u8ddf\u4e0a\u7f51\u7edc\u524d\u7f00\u6240\u5360\u7684\u4f4d\u6570\u3002\uff08\u5bf9\u5e94\u5b50\u7f51\u63a9\u7801\u4e2d 1 \u7684\u4e2a\u6570\uff09\\n   - \u4e3e\u4f8b\uff1a128.14.32.0/20 `min: 128.14.32.0, max: 128.14.47.255`\\n   - \u5168 0 \u548c\u5168 1 \u4e00\u822c\u4e0d\u4f7f\u7528\\n\\n3. \u53ef\u53d8\u63a9\u7801\u957f\u5ea6\u5411\u53f3\u79fb\u80fd\u5212\u5206\u4e3a\u5c0f\u5757\uff0c\u5411\u5de6\u79fb\u5408\u5e76\u4e3a\u5927\u5757\\n4. \u8def\u7531\u805a\u5408\u51cf\u5c11\u4e86\u8def\u7531\u8868\u7684\u8868\u9879"},{"id":"/draft/rust-quiz/01","metadata":{"permalink":"/blog/draft/rust-quiz/01","source":"@site/blog/draft/rust-quiz/01.md","title":"Rust Quiz#1","description":"\u9898\u76ee","date":"2022-10-21T07:31:24.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":6.445,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u8ba1\u7b97\u673a\u7f51\u7edc","permalink":"/blog/draft/\u8ba1\u7b97\u673a\u7f51\u7edc"},"nextItem":{"title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","permalink":"/blog/2022/04/13/[\u8bd1] tail_latency"}},"content":"## \u9898\u76ee\\n\\n\u4e0b\u9762\u7684 1 \u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\\n\\n```rs\\nmacro_rules! m {\\n    ($( $s:stmt )*) => {\\n        $(\\n            { stringify!($s); 1 }\\n        )<<*\\n    };\\n}\\n\\nfn main() {\\n    print!(\\n        \\"{}{}{}\\",\\n        m! { return || true },\\n        m! { (return) || true },\\n        m! { {return} || true },\\n    );\\n}\\n```\\n\\n1. The program exhibits undefined behavior\\n2. The program does not compile\\n3. The program is guaranteed to output: [ ]\\n\\n## \u89e3\u7b54\\n\\n122\\n\\n\u8fd9\u4e2a\u95ee\u9898\u56f4\u7ed5\u7740 Rust \u7684\u8bed\u6cd5\u8fb9\u754c\u8bbe\u8ba1\u3002\\n\\n> This question revolves around where the Rust grammar places statement\\n> boundaries.\\n\\n\u5b8f\u7684\u8f93\u5165\u89c4\u5219\u662f `$( $s:stmt )*`, \u5b83\u80fd\u591f\u5339\u914d\u5230 0 \u6216\u591a\u4e2a Rust \u8bed\u53e5\u3002\u8be5\u89c4\u5219\u5185\u90e8\u7684 `$s: stmt`\\n\u662f\u4e00\u4e2a\u7247\u6bb5\u5206\u7c7b\u7b26\uff0c\u5b83\u80fd\u591f\u5339\u914d\u5230\u4e00\u4e2a\u7b26\u5408 Rust \u8bed\u6cd5\u89c4\u8303\u7684\u8868\u8fbe\u5f0f\u3002\u88ab\u5339\u914d\u5230\u7684\u8bed\u53e5\u53ef\u4ee5\u5728\u5c55\u5f00\u540e\u7684\u4ee3\u7801\u4e2d\u4f5c\u4e3a `$s` \u3002\u800c\u5916\u90e8\u7684 `$(...)*`\\n\u90e8\u5206\u8868\u793a\u4e00\u4e2a\u91cd\u590d\uff0c\u5b83\u53ef\u4ee5\u91cd\u590d\u5339\u914d 0 \u6216\u591a\u6b21\u5185\u5bb9\u3002\\n\\n> The input rule of the macro m! is $($s:stmt)* which matches zero or more Rust\\n> statements. The $(...)* part of the rule is a repetition which matches the\\n> contents of the repetition zero or more times, and the $s:stmt is a fragment\\n> specifier that matches a Rust statement (stmt) conforming to the rules of the\\n> Rust grammar. The matched statements are available within the expanded code as\\n> the fragment variable $s.\\n\\n\u8bed\u53e5\u662f\u51fd\u6570\u4f53\u4e2d\u5141\u8bb8\u7684\u6700\u9ad8\u7ea7\u522b\u7684\u8bed\u6cd5\u5355\u4f4d\u3002\u4e0b\u9762\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u8bed\u53e5\u7684\u4f8b\u5b50\u3002\\n\\n> A statement is the top-level unit of syntax permitted within a function body.\\n> All of the following are examples of statements.\\n\\n```rs\\n// Items are statements.\\nstruct S { x: u64 }\\n\\n// Let-bindings are statements.\\nlet mut s = S { x: 1 }\\n\\n// Expressions are statements.\\ns.x + 1\\n```\\n\\n\u51fd\u6570\u4f53\u7684\u8bed\u6cd5\u8981\u6c42\u67d0\u4e9b\u7c7b\u578b\u7684\u8bed\u53e5\u540e\u9762\u6709\u4e00\u4e2a\u5206\u53f7\uff0c\u4f46\u5bf9\u4e8e\u5b8f\u7684\u8bed\u6cd5\u800c\u8a00\uff0c\u5206\u53f7\u5e76\u4e0d\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002\\n\\n> The grammar of function bodies requires that some types of statements are\\n> followed by a semicolon, but the semicolon is not part of the statement for\\n> the purpose of macro syntax.\\n\\nm! \u5c06\u4f1a\u5c55\u5f00\u4e3a 0 \u6216\u591a\u4e2a\u7531 `<<` \u5206\u5272\u7684 `{ stringify!($s); 1 }`\u3002`$(...)<<*` \u90e8\u5206\u8868\u793a\u91cd\u590d\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528 `<<`\\n\u4f5c\u4e3a\u5206\u9694\u7b26\\n\\n> The macro m! expands to zero or more copies of `{ stringify!($s); 1 }`\\n> separated by the `<<` token. The `$(...)<<*` part of the rule is a repetition\\n> using `<<` as the separator.\\n\\n\u5728\u5b8f\u4e2d\u4f7f\u7528 `<<` \u4f5c\u4e3a\u5206\u9694\u7b26\u975e\u5e38\u4e0d\u5e38\u89c1\u3002\u6700\u5e38\u7528\u7684\u5206\u9694\u7b26\u662f\u9017\u53f7\uff0c`$(...),*`\uff0c\u5176\u4ed6\u7684\u5355\u4e00\u7b26\u53f7\u4e5f\u662f\u5141\u8bb8\u7684\u3002\u91cd\u8981\u7684\u662f\uff0c`macro_rules!` \u628a\u6240\u6709\u7684 Rust \u5185\u7f6e\u64cd\u4f5c\u7b26\u90fd\u5f53\u6210\u5355 token\\n> Using `<<` as a separator in a repetition in a macro is highly unusual. The\\n> most commmonly used separator is the comma, written as `$(...),*`, but any\\n> other single token is allowed here. Crucially, macro_rules! treats all\\n> built-in Rust operators as single tokens, even those that consist of multiple\\n> characters like <<.\\n\\nThe `{ stringify!($s); 1 }` is an expression whose value is always 1. The value\\nof `stringify!($s)` is discarded, so this is equivalent to the expression\\n`{ 1 }`. The reason for having `stringify!($s)` in there is to control the\\nnumber of times the repetition is repeated, which is determined by which\\nfragment variables are used within the repetition. Writing a repetition without\\nusing any fragment variables inside of it would not be legal.\\n\\nSuppose we call this macro with three of the statements shown above as input.\\n\\n```rs\\nm! {\\n    struct S { x: u64 }\\n    let mut s = S { x: 1 }\\n    s.x + 1\\n}\\n```\\n\\nThe macro expands to:\\n\\n```rs\\n{ stringify!(struct S { x: u64 }); 1 }\\n    << { stringify!(let mut s = S { x: 1 }); 1 }\\n    << { stringify!(s.x + 1); 1 }\\n```\\n\\nEach of the stringifys expands to a string literal:\\n2\\n```rs\\n{ \\"struct S { x: u64 }\\"; 1 }\\n    << { \\"let mut s = S { x: 1 }\\"; 1 }\\n    << { \\"s.x + 1\\"; 1 }\\n```\\n\\nThe values of the string literals are not used. In this case the expression is\\nequivalent to `{ 1 } << { 1 } << { 1 }`, which is equivalent to `1 << 1 << 1`.\\nThe `<<` operator is left-associative; the numeric value of this expression\\nis 4.\\n\\nAltogether, the relevant behavior of this macro is that it evaluates to\\n`1 << 1 << 1 << ...` where the number of ones is equal to the number of Rust\\nstatements in the input of the macro. In closed form, the numeric value is\\n`1 << (n - 1)` where n is the number of statements, except in the case that n is\\nzero where the macro expands to nothing and we get a syntax error at the call\\nsite.\\n\\nIt remains to determine how many statements are in the three invocations of m!\\nin the quiz code.\\n\\n1. `return || true`\\n\\nThis is a return-expression that would return the closure `|| true`. It is\\nequivalent to return `(|| true)`. It is parsed as a single statement so the m!\\ninvocation evaluates to\\n\\n2. `(return) || true`\\n\\nThis is a logical-OR expression. The `||` is a binary operator, where the\\nleft-hand side is the expression `(return)` (of diverging type `!`) and the\\nright-hand side is the expression `true`. This expression is a single statement\\nso m! again evaluates to 1.\\n\\n3. `{return} || true`\\n\\nThis one is two statements! A block-statement `{return}` followed by a closure\\nexpression `|| true`.\\n\\nThe Rust grammar distinguishes between expressions that require a semicolon in\\norder to stand alone as a statement, and expressions that can be statements even\\nwithout a semicolon. Consider two examples:\\n\\n```rs\\n// No trailing semicolon required.\\nfor t in vec {\\n    /* ... */\\n}\\n\\n// Trailing semicolon required.\\nself.skip_whitespace()?;\\n```\\n\\nThe list of expression types that stand alone without a semicolon is defined\\nhere in libsyntax. The distinction informs a few different early bail-out cases\\nwhere the parser decides to finish parsing the current expression.\\n\\nRelevant to our case is that block expressions `{ /* ... */ }` terminate an\\nexpression if doing so would be syntactically sensible. The parser does not\\neagerly consume binary operators after a block expression. Thus one might write:\\n\\n```rs\\nfn f() -> &\'static &\'static bool {\\n    // Block expression.\\n    {\\n        println!(\\"What a silly function.\\");\\n    }\\n\\n    // Reference to reference to true.\\n    &&true\\n}\\n```\\n\\nIn order to parse a block followed by a binary operator, we would need to make\\nit syntactically insensible for the parser to terminate an expression at the\\nclose curly brace. This would usually be done by wrapping in parentheses.\\n\\n```rs\\nfn f() -> bool {\\n    ({ true } && true)\\n}\\n```\\n\\nAnyhow, the output of the program is 112.\\n\\nYou have answered 2 of 33 questions correctly."},{"id":"/2022/04/13/[\u8bd1] tail_latency","metadata":{"permalink":"/blog/2022/04/13/[\u8bd1] tail_latency","source":"@site/blog/2022-04-13-[\u8bd1] tail_latency.md","title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","description":"Hedged requests \u2014 Tackling tail latency","date":"2022-04-13T00:00:00.000Z","formattedDate":"2022\u5e744\u670813\u65e5","tags":[],"readingTime":4.83,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Rust Quiz#1","permalink":"/blog/draft/rust-quiz/01"},"nextItem":{"title":"\u67e5\u8be2\u5f15\u64ce\uff1a\u63a8\u9001\u4e0e\u62c9\u53d6","permalink":"/blog/2022/04/01/[\u8bd1] search_engine"}},"content":"[Hedged requests \u2014 Tackling tail latency](https://medium.com/swlh/hedged-requests-tackling-tail-latency-9cea0a05f577)\\n\\n\u901a\u5e38\u51fa\u73b0\u5728\u51fa\u73b0\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u6709\u5f88\u591a\u4f18\u7f3a\u70b9\\n\\n\u4f7f\u7528\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5e38\u89c1\u539f\u56e0\uff1a\\n\\n- \u53ef\u7528\u6027\\n- \u53ef\u6269\u5c55\u6027\\n- \u5206\u533a\u5bb9\u9519\\n- \u72ec\u7acb\u90e8\u7f72\\n- \u4e3a\u4e0d\u540c\u76ee\u7684\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\\n\\n\u8fd9\u4e9b\u53ef\u80fd\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u95ee\u9898\uff1a\\n\\n- \u6210\u672c\\n- \u590d\u6742\\n- \u4e00\u81f4\u6027\\n- **\u5ef6\u8fdf**\\n\\n\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u5ef6\u8fdf\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\u662f\u5c3e\u90e8\u5ef6\u8fdf\u3002\\n\\n## \u5ef6\u8fdf\\n\\n\u5f53\u6211\u4eec\u4f7f\u7528\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\uff0c\u5ef6\u8fdf\u4f1a\u4e0d\u53ef\u907f\u514d\u7684\u589e\u52a0\u3002\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u8df3\u90fd\u4e0d\u662f\u514d\u8d39\u7684\uff0c\u9664\u4e86\u7f51\u7edc\u5ef6\u8fdf\u8fd8\u6709\u5176\u4ed6\u6210\u672c\uff0c\u5982\u679c\u4f7f\u7528 HTTP\\n\u901a\u4fe1\uff0c\u6211\u4eec\u8fd8\u8981\u5904\u7406\u6d88\u606f\u3001\u89e3\u6790\u6d88\u606f\u3001\u9a8c\u8bc1\u8eab\u4efd\u4ee4\u724c\u3001\u4ee5\u53ca\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u5230\u7ba1\u9053\u4e2d\u7684\u4efb\u4f55\u6570\u636e\u3002\u8fd9\u4e9b\u662f\u5728\u8bbe\u8ba1\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\u6211\u4eec\u5fc5\u987b\u8003\u8651\u662f\u5426\u6709\u5fc5\u8981\u5206\u53d1\u65b0\u7684\u7cfb\u7edf\u3002\\n\\n\u8981\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5982\u4f55\u6d4b\u91cf\u5ef6\u8fdf\u3002\u6700\u7b80\u5355\u7684\u7b54\u6848\u4e4b\u4e00\u662f\u4f7f\u7528\u767e\u5206\u6bd4\u3002\\n\\n## \u767e\u5206\u6bd4\\n\\n\u9996\u5148\u662f\u5b9a\u4e49\u6211\u4eec\u7684\u89c2\u5bdf\u7ec4\u3002\u5bf9\u4e8e\u5ef6\u8fdf\uff0c\u6700\u5e38\u89c1\u7684\u89c2\u5bdf\u7ec4\u662f\u7ed9\u5b9a\u8bf7\u6c42\u7c7b\u522b\u7684\u54cd\u5e94\u65f6\u95f4\u3002\u8ba1\u7b97\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6\u8bf7\u6c42\u7684\u6240\u6709\u54cd\u5e94\u65f6\u95f4\u5e76\u6392\u5e8f\u3002\\n2. \u53d6\u524d x% \u7684\u5143\u7d20\u3002\\n3. \u83b7\u53d6\u96c6\u5408\u7684\u6700\u5927\uff08\u6700\u957f\uff09\u503c\u3002\\n\\n\u4ee5\u8bf7\u6c42 `/hello-world` \u63a5\u53e3\u4e3a\u4f8b\\n\\n1. \u83b7\u53d6\u8bf7\u6c42\u7684\u6240\u6709\u54cd\u5e94\u65f6\u95f4\u5e76\u6392\u5e8f\u3002\\n   - \u83b7\u53d6\u54cd\u5e94\u65f6\u95f4\uff1a23, 20, 21, 20, 23, 20, 45, 21, 25, 25\\n   - \u6392\u5e8f\uff1a20, 20, 20, 21, 21, 23, 23, 25, 25, 45\\n2. \u53d6\u524d 50% \u5143\u7d20\uff1a 20, 20, 20, 21, 21\\n3. \u5f97\u5230\u6700\u5927\u503c\uff1a21\\n\\n\u6240\u4ee5 P50 \u5c31\u662f 21 ms\uff0c\u5982\u679c\u53d6\u524d 90 % \u5143\u7d20\uff0cP90 \u5c31\u662f 25 ms\\n\\n## \u5c3e\u90e8\u5ef6\u8fdf\\n\\n\u5c3e\u90e8\u5ef6\u8fdf\u662f\u767e\u5206\u4f4d\u8c31\u6700\u672b\u7aef\u7684\u5ef6\u8fdf\u3002\u4e00\u822c\u7cfb\u7edf\u5bf9 99% \u7684\u8bf7\u6c42\u7684\u54cd\u5e94\u90fd\u5f88\u5feb\uff0c\u4f46\u662f\u5bf9\u4e8e\u5269\u4e0b\u7684 1% \u53ef\u80fd\u975e\u5e38\u5dee\u3002\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202210071.png)\\n\u5bf9\u4e8e\u4e00\u4e2a\u6bcf\u5206\u949f\u63a5\u53d7\u6570\u767e\u4e07\u8bf7\u6c42\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9 1% \u5c31\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u4e86\\n\\n2013 \u5e74 Google \u53d1\u8868\u7684\u8bba\u6587\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6cd5\\n\\n- Hedged requests\\n- Tied requests\\n- Micro partitions\\n- Selective replication\\n- Latency-induced probation\\n- Good enough responses\\n- Canary requests\\n\\nP99 = 140ms P95 = 70ms\\n\\n\u5269\u4e0b\u7684 5% \u8bf7\u6c42\u5360\u4e86\u603b\u8bf7\u6c42\u4e00\u534a\u7684\u5ef6\u8fdf\\n\\n## \u5bf9\u51b2\u8bf7\u6c42\\n\\n\u5982\u679c\u8bf7\u6c42\u7684\u65f6\u957f\u8d85\u8fc7 P95 \u8fd8\u6ca1\u6709\u7ed3\u679c\uff0c\u90a3\u4e48\u5c31\u91cd\u53d1\\n\\n## \u6a21\u62df\u5c3e\u90e8\u5ef6\u8fdf\\n\\n\u4e0b\u9762\u7684\u4ee3\u7801\u6a21\u62df\u4e86\u6709 %4 \u7684\u8bf7\u6c42\u4f1a\u7b49\u5f85 100ms\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"math/rand\\"\\n\\t\\"net/http\\"\\n\\t\\"time\\"\\n\\n\\t\\"github.com/gorilla/mux\\"\\n)\\n\\nfunc main() {\\n\\trouter := mux.NewRouter()\\n\\n\\trouter.HandleFunc(\\"/ishealthy\\", func(w http.ResponseWriter, r *http.Request) {\\n\\t\\trd := rand.New(rand.NewSource(time.Now().UnixNano()))\\n\\t\\trequestPercentile := rd.Intn(100)\\n\\t\\twaitTime := 0\\n\\n\\t\\tif requestPercentile > 96 {\\n\\t\\t\\twaitTime = 100\\n\\t\\t}\\n\\n\\t\\ttime.Sleep(time.Duration(waitTime+15) * time.Millisecond)\\n\\t\\tw.WriteHeader(http.StatusOK)\\n\\t\\tw.Write([]byte(\\"Healthy\\"))\\n\\t}).Methods(http.MethodGet)\\n\\thttp.ListenAndServe(\\":8080\\", router)\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202241384.png)\\n\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\\n\\n- p50 \u5c0f\u4e8e 20ms\\n- p95 20ms \u5de6\u53f3\\n- p99 \u8d85\u8fc7 115ms\\n\\n## \u5bf9\u91cd\u6d4b\u8bd5\\n\\n\u65b0\u589e\u4e24\u4e2a\u63a5\u53e3\\n\\n- `/falout`\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u8f6c\u53d1\u51fa 3 \u4e2a\u526f\u672c\u3002\u5e94\u8be5\u80fd\u5230\u8fbe P99 \u6027\u80fd\u3002\u4f46\u4f1a\u53d1\u51fa 3 \u500d\u4ee5\u4e0a\u7684\u8bf7\u6c42\u3002\\n- `/hedged`\uff1a\u5728\u7b2c\u4e00\u4e2a\u672a\u8fbe\u5230\u9884\u671f P95 (21ms) \u4e4b\u540e\u89e6\u53d1\u5bf9\u51b2\u8bf7\u6c42\u3002\u5e94\u8be5\u5728 40 \u6beb\u79d2\u5de6\u53f3\u5c06\u5c3e\u90e8\u6027\u80fd\u63d0\u9ad8\u5230 P99\u3002\u6700\u591a\u53ea\u80fd\u591a\u53d1\u51fa 5%\\n  \u7684\u8bf7\u6c42\u3002\\n\\n**falout**\\n\\n```go\\nfunc queryFanOut(urls []string) string {\\n\\tch := make(chan string, len(urls))\\n\\tfor _, url := range urls {\\n\\t\\tgo func(u string) {\\n\\t\\t\\tch <- executeQuery(u)\\n\\t\\t}(url)\\n\\t}\\n\\treturn <-ch\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248476.png)\\n\\n**hedged**\\n\\n```go\\nfunc queryWithHedgedRequests(urls []string) string {\\n\\tch := make(chan string, len(urls))\\n\\tfor _, url := range urls {\\n\\t\\tgo func(u string, c chan string) {\\n\\t\\t\\tc <- executeQuery(u)\\n\\t\\t}(url, ch)\\n\\n\\t\\tselect {\\n\\t\\tcase r := <-ch:\\n\\t\\t\\treturn r\\n\\t\\tcase <-time.After(21 * time.Millisecond):\\n\\t\\t}\\n\\t}\\n\\n\\treturn <-ch\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248260.png)\\n\\n## \u7ed3\u8bba\\n\\n\u4ec5\u7528\u51e0\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u5e45\u6539\u5584\u5c3e\u90e8\u5ef6\u8fdf\u3002\u5728\u5c06\u5176\u7528\u4f5c\u751f\u4ea7\u7cfb\u7edf\u4e4b\u524d\uff0c\u8be5\u793a\u4f8b\u8fd8\u6709\u5f88\u591a\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\uff0c\u4f46\u6838\u5fc3\u5b9e\u73b0\u4e0e\u6b64\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002\\n\u8be5\u6280\u672f\u9488\u5bf9\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u95ee\u9898\uff0c\u5728\u7528\u4e8e\u5b9e\u9645\u751f\u4ea7\u5e94\u7528\u4e4b\u524d\u5e94\u8fdb\u884c\u5f7b\u5e95\u5206\u6790\u3002"},{"id":"/2022/04/01/[\u8bd1] search_engine","metadata":{"permalink":"/blog/2022/04/01/[\u8bd1] search_engine","source":"@site/blog/2022-04-01-[\u8bd1] search_engine.md","title":"\u67e5\u8be2\u5f15\u64ce\uff1a\u63a8\u9001\u4e0e\u62c9\u53d6","description":"Query Engines: Push vs. Pull","date":"2022-04-01T00:00:00.000Z","formattedDate":"2022\u5e744\u67081\u65e5","tags":[],"readingTime":4.57,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","permalink":"/blog/2022/04/13/[\u8bd1] tail_latency"}},"content":"[Query Engines: Push vs. Pull](http://justinjaffray.com/query-engines-push-vs.-pull/)\\n\\n\u8003\u8651\u4ee5\u4e0b\u7684 SQL \u8bed\u53e5\\n\\n```sql\\nSELECT DISTINCT customer_first_name\\nFROM customer\\nWHERE customer_balance > 0\\n```\\n\\n\u67e5\u8be2\u4f18\u5316\u5668\u901a\u5e38\u5c06\u8fd9\u6837\u7684 SQL \u67e5\u8be2\u7f16\u8bd1\u6210\u4e00\u7cfb\u5217\u79bb\u6563\u8fd0\u7b97\u7b26\uff1a\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202254060.png)\\n\\n```\\nDistinct\\n<- Map(customer_first_name)\\n<- Select(customer_balance > 0)\\n<- customer\\n```\\n\\n\u5728\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u4e2d\uff0c\u6d88\u8d39\u8005 `customers` \u9a71\u52a8\u7cfb\u7edf\u3002\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u8fd0\u7b97\u540e\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u884c\uff1a\u7528\u6237\u5c06\u5411\u6839\u8282\u70b9\uff08Distinct\uff09\u8bf7\u6c42\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u56de\u5411\\nMap \u8be2\u95ee\u4e00\u884c\uff0c\u63a5\u7740\u5411 Select \u8be2\u95ee\u4e00\u884c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\\n\\n\u5728\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u4e2d\uff0c\u751f\u4ea7\u8005 `producers` \u9a71\u52a8\u7cfb\u7edf\u3002\u6bcf\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5f53\u4ed6\u63a5\u6536\u5230\u6570\u636e\u65f6\uff0c\u5c31\u4f1a\u544a\u77e5\u4e0b\u6e38\u7684\u8fd0\u7b97\u7b26\uff0c`customer`\\n\u4f5c\u4e3a\u67e5\u8be2\u57fa\u8868\u56de\u544a\u8bc9 Select \u81ea\u5df1\u7684\u4fe1\u606f\uff0c\u63a5\u7740\u662f Map\u3001Distinct\u3002\\n\\n### Pull-Based \u67e5\u8be2\u5f15\u64ce\\n\\n\u57fa\u4e8e\u62c9\u53d6\u7684\u67e5\u8be2\u5f15\u64ce\u4e00\u822c\u4e5f\u88ab\u79f0\u4e3a\u4f7f\u7528 Volcano \u6216 Iterator \u6a21\u578b\u3002\u8fd9\u662f\u6700\u53e4\u8001\u548c\u6700\u8457\u540d\u7684\u67e5\u8be2\u6267\u884c\u6a21\u578b\uff0c\u5e76\u4ee5 1994 \u5e74\u6807\u51c6\u5316\u5176\u7ea6\u5b9a\u7684\u8bba\u6587\u547d\u540d\u3002\\n\\n\u9996\u5148\u6211\u4eec\u6709\u4e00\u4e2a\u5173\u7cfb\uff0c\u6211\u4eec\u901a\u8fc7 Scan \u628a\u5b83\u4e13\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668\\n\\n```js\\nlet customer = [\\n  { id: 1, firstName: \\"justin\\", balance: 10 },\\n  { id: 2, firstName: \\"sissel\\", balance: 0 },\\n  { id: 3, firstName: \\"justin\\", balance: -3 },\\n  { id: 4, firstName: \\"smudge\\", balance: 2 },\\n  { id: 5, firstName: \\"smudge\\", balance: 0 },\\n];\\n\\nfunction* Scan(coll) {\\n  for (let x of coll) {\\n    yield x;\\n  }\\n}\\n```\\n\\n\u63a5\u4e0b\u6765\u4e3a\u4ed6\u5b9e\u73b0\u4e00\u4e9b\u64cd\u4f5c\u7b26\\n\\n```js\\nfunction* Select(p, iter) {\\n  for (let x of iter) {\\n    if (p(x)) {\\n      yield x;\\n    }\\n  }\\n}\\n\\nfunction* Map(f, iter) {\\n  for (let x of iter) {\\n    yield f(x);\\n  }\\n}\\n\\nfunction* Distinct(iter) {\\n  let seen = new Set();\\n  for (let x of iter) {\\n    if (!seen.has(x)) {\\n      yield x;\\n      seen.add(x);\\n    }\\n  }\\n}\\n```\\n\\n\u7ffb\u8bd1\u6211\u4eec\u7684\u67e5\u8be2\u8bed\u53e5\\n\\n```sql\\nSELECT DISTINCT customer_first_name FROM customer WHERE customer_balance > 0\\n```\\n\\n```js\\nDistinct(\\n    Map(\\n        (c) => c.firstName,\\n        Select((c) => c.balance > 0, Scan(customer))\\n    )\\n),\\n```\\n\\n## Push-Based \u67e5\u8be2\u5f15\u64ce\\n\\n\u57fa\u4e8e\u63a8\u9001\u7684\u67e5\u8be2\u5f15\u64ce\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a Reactive\u3001Observer\u3001Stream \u6216\u56de\u8c03\u5730\u72f1\u6a21\u578b\uff0c\u5982\u60a8\u6240\u6599\uff0c\u4e0e\u6211\u4eec\u4e4b\u524d\u7684\u793a\u4f8b\u7c7b\u4f3c\uff0c\u4f46\u5b83\u98a0\u8986\u4e86\u5b83\u3002\u8ba9\u6211\u4eec\u4ece\u5b9a\u4e49\\nScan \u5f00\u59cb\\n\\n```js\\nlet customer = [\\n  { id: 1, firstName: \\"justin\\", balance: 10 },\\n  { id: 2, firstName: \\"sissel\\", balance: 0 },\\n  { id: 3, firstName: \\"justin\\", balance: -3 },\\n  { id: 4, firstName: \\"smudge\\", balance: 2 },\\n  { id: 5, firstName: \\"smudge\\", balance: 0 },\\n];\\n\\nfunction Scan(relation, out) {\\n  for (r of relation) {\\n    out(r);\\n  }\\n}\\n```\\n\\n\u6211\u4eec\u5c06\u201c\u6b64\u8fd0\u7b97\u7b26\u544a\u8bc9\u4e0b\u6e38\u8fd0\u7b97\u7b26\u201d\u6784\u5efa\u4e3a\u5b83\u9700\u8981\u8c03\u7528\u7684\u95ed\u5305\u3002\\n\\n\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u4e5f\u662f\u5982\u6b64\\n\\n```js\\nfunction Select(p, out) {\\n  return (x) => {\\n    if (p(x)) out(x);\\n  };\\n}\\n\\nfunction Map(f, out) {\\n  return (x) => {\\n    out(f(x));\\n  };\\n}\\n\\nfunction Distinct(out) {\\n  let seen = new Set();\\n  return (x) => {\\n    if (!seen.has(x)) {\\n      seen.add(x);\\n      out(x);\\n    }\\n  };\\n}\\n```\\n\\n\u67e5\u8be2\u8bed\u53e5\u5efa\u6a21\uff1a\\n\\n```js\\nlet result = [];\\nScan(\\n  customer,\\n  Select(\\n    (c) => c.balance > 0,\\n    Map(\\n      (c) => c.firstName,\\n      Distinct((r) => result.push(r)),\\n    ),\\n  ),\\n);\\n```\\n\\n## \u533a\u522b\\n\\n\u5728\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u4e2d\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u7b26\u90fd\u662f\u60f0\u6027\u7684\uff0c\u53ea\u6709\u5f53\u6570\u636e\u9700\u8981\u65f6\uff0c\u64cd\u4f5c\u7b26\u624d\u4f1a\u5f00\u59cb\u8ba1\u7b97\uff08yield\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u7cfb\u7edf\u7684\u884c\u4e3a\u548c\u7528\u6237\u7684\u884c\u4e3a\u7d27\u5bc6\u8026\u5408\u3002\\n\\n\u518d\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u5f00\u59cb\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u76f4\u5230\u4ed6\u63a5\u53d7\u5230\u4e00\u884c\u6570\u636e\u3002\u56e0\u6b64\u7cfb\u7edf\u7684\u5de5\u4f5c\u548c\u6d88\u8d39\u8005\u662f\u89e3\u8026\u7684\u3002\\n\\n\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u67e5\u8be2\u7ed3\u679c\u653e\u5230\u91cc\u9762\u3002\u8fd9\u5c31\u662f\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u7ed9\u4eba\u7684\u611f\u89c9\u3002\u5b83\u4f1a\u5047\u8bbe\u6d88\u8d39\u8005\u4e0d\u5b58\u5728\uff0c\u5f53\u88ab\u8bf7\u6c42\u65f6\uff0c\u80fd\u591f\u7acb\u5373\u4f5c\u51fa\u54cd\u5e94\u3002\\n\\n## DAG, yo\\n\\nSQL \u4e2d\u6709\u4e00\u4e2a With \u7ed3\u6784\uff0c\u5b83\u5141\u8bb8\u5728\u67e5\u8be2\u4e2d\u591a\u6b21\u5f15\u7528\u540c\u4e00\u4e2a\u7ed3\u679c\u96c6\uff1a\\n\\n```sql\\nWITH foo as (<some complex query>)\\nSELECT * FROM\\n    (SELECT * FROM foo WHERE c) AS foo1\\n  JOIN\\n    foo AS foo2\\n  ON foo1.a = foo2.b\\n```\\n\\n\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u80fd\u591f\u4f18\u5316\u67e5\u8be2\u7ed3\u6784\uff0c\u590d\u7528\u7ed3\u679c\u96c6\uff0c\u800c\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002"}]}')}}]);