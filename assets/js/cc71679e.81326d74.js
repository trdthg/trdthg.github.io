"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[5643],{3905:(e,t,l)=>{l.d(t,{Zo:()=>k,kt:()=>d});var n=l(7294);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},k=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),m=u(l),d=a,h=m["".concat(p,".").concat(d)]||m[d]||s[d]||i;return l?n.createElement(h,r(r({ref:t},k),{},{components:l})):n.createElement(h,r({ref:t},k))}));function d(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=l.length,r=new Array(i);r[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<i;u++)r[u]=l[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}m.displayName="MDXCreateElement"},687:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=l(7462),a=(l(7294),l(3905));const i={},r="Rust Quiz",o={unversionedId:"rust/rust_quiz",id:"rust/rust_quiz",title:"Rust Quiz",description:"1",source:"@site/docs/rust/rust_quiz.md",sourceDirName:"rust",slug:"/rust/rust_quiz",permalink:"/docs/rust/rust_quiz",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Channel \u6e90\u7801\u5256\u6790",permalink:"/docs/rust/rs_channel"},next:{title:"Wasm \u5b9e\u73b0\u751f\u547d\u6e38\u620f",permalink:"/docs/rust/wasm"}},p={},u=[{value:"#1",id:"1",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a",level:3},{value:"\u89e3\u7b54",id:"\u89e3\u7b54",level:3},{value:"#2",id:"2",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-1",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-1",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:3},{value:"#3",id:"3",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-2",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-2",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-1",level:3},{value:"#4",id:"4",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-3",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-3",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-2",level:3},{value:"#5",id:"5",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-4",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-4",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-3",level:3},{value:"#6",id:"6",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-5",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-5",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-4",level:3},{value:"#7",id:"7",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-6",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-6",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-5",level:3},{value:"#8",id:"8",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-7",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-7",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-6",level:3},{value:"#9",id:"9",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-8",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-8",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-7",level:3},{value:"#10",id:"10",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-9",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-9",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-8",level:3},{value:"#11",id:"11",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-10",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-10",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-9",level:3},{value:"#12",id:"12",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-11",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-11",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-10",level:3},{value:"#13",id:"13",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-12",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-12",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-11",level:3},{value:"#14",id:"14",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-13",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-13",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-12",level:3},{value:"#15",id:"15",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-14",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-14",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-13",level:3},{value:"#16",id:"16",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-15",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-15",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-14",level:3},{value:"#17",id:"17",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-16",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-16",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-15",level:3},{value:"#18",id:"18",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-17",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-17",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-16",level:3},{value:"#19",id:"19",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-18",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-18",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-17",level:3},{value:"#20",id:"20",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-19",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-19",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-18",level:3},{value:"#21",id:"21",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-20",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-20",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-19",level:3},{value:"#22",id:"22",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-21",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-21",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-20",level:3},{value:"#23",id:"23",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-22",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-22",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-21",level:3},{value:"#24",id:"24",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-23",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-23",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-22",level:3},{value:"#25",id:"25",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-24",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-24",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-23",level:3},{value:"#26",id:"26",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-25",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-25",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-24",level:3},{value:"#27",id:"27",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-26",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-26",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-25",level:3},{value:"#28",id:"28",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-27",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-27",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-26",level:3},{value:"#29",id:"29",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-28",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-28",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-27",level:3},{value:"#30",id:"30",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-29",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-29",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-28",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-30",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-30",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-29",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-31",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-31",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-30",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-32",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-32",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-31",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-33",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-33",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-32",level:3},{value:"#5",id:"5-1",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-34",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-34",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-33",level:3},{value:"\uff036",id:"6-1",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee-35",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-35",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-34",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-36",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-36",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-35",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-37",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-37",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-36",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-38",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-38",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-37",level:3},{value:"\u9898\u76ee",id:"\u9898\u76ee-39",level:3},{value:"\u63d0\u793a",id:"\u63d0\u793a-39",level:3},{value:"\u9898\u89e3",id:"\u9898\u89e3-38",level:3}],k={toc:u};function s(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,n.Z)({},k,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rust-quiz"},"Rust Quiz"),(0,a.kt)("h2",{id:"1"},"#1"),(0,a.kt)("h3",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u4e0b\u9762\u7684 1 \u8f93\u51fa\u662f\u4ec0\u4e48\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'macro_rules! m {\n    ($( $s:stmt )*) => {\n        $(\n            { stringify!($s); 1 }\n        )<<*\n    };\n}\n\nfn main() {\n    print!(\n        "{}{}{}",\n        m! { return || true },\n        m! { (return) || true },\n        m! { {return} || true },\n    );\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a"},"\u63d0\u793a"),(0,a.kt)("p",null,"\u5b8f\u7684\u8f93\u51fa\u4e2d\u7684\u8868\u8fbe\u5f0f\u4e0e ",(0,a.kt)("inlineCode",{parentName:"p"},"1 << (n - 1)")," \u6548\u679c\u76f8\u540c\uff0c\u5176\u4e2d n \u662f\u5b8f\u8f93\u5165\u4e2d\u5305\u542b\u7684 Rust \u8bed\u53e5\u7684\u6570\u91cf\u3002"),(0,a.kt)("h3",{id:"\u89e3\u7b54"},"\u89e3\u7b54"),(0,a.kt)("p",null,"\u7b54\u6848: 122"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u56f4\u7ed5\u7740 Rust \u7684\u8bed\u6cd5\u8fb9\u754c\u8bbe\u8ba1\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This question revolves around where the Rust grammar places statement\nboundaries.")),(0,a.kt)("p",null,"\u5b8f\u7684\u8f93\u5165\u89c4\u5219\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"$( $s:stmt )*"),", \u5b83\u80fd\u591f\u5339\u914d\u5230 0 \u6216\u591a\u4e2a Rust \u8bed\u53e5\u3002"),(0,a.kt)("p",null,"\u8be5\u89c4\u5219\u5185\u90e8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"$s: stmt")," \u662f\u4e00\u4e2a\u7247\u6bb5\u5206\u7c7b\u7b26\uff0c\u5b83\u80fd\u591f\u5339\u914d\u5230\u4e00\u4e2a\u7b26\u5408 Rust \u8bed\u6cd5\u89c4\u8303\u7684\u8868\u8fbe\u5f0f\u3002\u88ab\u5339\u914d\u5230\u7684\u8bed\u53e5\u53ef\u4ee5\u5728\u5c55\u5f00\u540e\u7684\u4ee3\u7801\u4e2d\u4f5c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"$s")," \u3002"),(0,a.kt)("p",null,"\u800c\u5916\u90e8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)*")," \u90e8\u5206\u8868\u793a\u4e00\u4e2a\u91cd\u590d\uff0c\u5b83\u53ef\u4ee5\u91cd\u590d\u5339\u914d 0 \u6216\u591a\u6b21\u5185\u5bb9\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The input rule of the macro m! is $($s:stmt)",(0,a.kt)("em",{parentName:"p"}," which matches zero or more Rust\nstatements. The $(...)")," part of the rule is a repetition which matches the\ncontents of the repetition zero or more times, and the $s:stmt is a fragment\nspecifier that matches a Rust statement (stmt) conforming to the rules of the\nRust grammar. The matched statements are available within the expanded code as\nthe fragment variable $s.")),(0,a.kt)("p",null,"\u8bed\u53e5\u662f\u51fd\u6570\u4f53\u4e2d\u5141\u8bb8\u7684\u6700\u9ad8\u7ea7\u522b\u7684\u8bed\u6cd5\u5355\u4f4d\u3002\u4e0b\u9762\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u8bed\u53e5\u7684\u4f8b\u5b50\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A statement is the top-level unit of syntax permitted within a function body.\nAll of the following are examples of statements.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// Items are statements.\nstruct S { x: u64 }\n\n// Let-bindings are statements.\nlet mut s = S { x: 1 }\n\n// Expressions are statements.\ns.x + 1\n")),(0,a.kt)("p",null,"\u51fd\u6570\u4f53\u7684\u8bed\u6cd5\u8981\u6c42\u67d0\u4e9b\u7c7b\u578b\u7684\u8bed\u53e5\u540e\u9762\u6709\u4e00\u4e2a\u5206\u53f7\uff0c\u4f46\u5bf9\u4e8e\u5b8f\u7684\u8bed\u6cd5\u800c\u8a00\uff0c\u5206\u53f7\u5e76\u4e0d\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The grammar of function bodies requires that some types of statements are\nfollowed by a semicolon, but the semicolon is not part of the statement for\nthe purpose of macro syntax.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"m!")," \u5c06\u4f1a\u5c55\u5f00\u6210 0 \u6216\u591a\u4e2a\u7531 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u5206\u5272\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }"),"\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)<<*")," \u90e8\u5206\u8868\u793a\u91cd\u590d\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u4f5c\u4e3a\u5206\u9694\u7b26\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The macro m! expands to zero or more copies of ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }"),"\nseparated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," token. The ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)<<*")," part of the rule is a repetition\nusing ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," as the separator.")),(0,a.kt)("p",null,"\u5728\u5b8f\u4e2d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u4f5c\u4e3a\u5206\u9694\u7b26\u975e\u5e38\u4e0d\u5e38\u89c1\u3002\u6700\u5e38\u7528\u7684\u5206\u9694\u7b26\u662f\u9017\u53f7\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"$(...),*"),"\uff0c\u5176\u4ed6\u7684\u5355\u4e00\u7b26\u53f7\u4e5f\u662f\u5141\u8bb8\u7684\u3002\u91cd\u8981\u7684\u662f\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"macro_rules!")," \u628a\u6240\u6709\u7684 Rust \u5185\u7f6e\u64cd\u4f5c\u7b26\u90fd\u5f53\u6210\u5355 token"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," as a separator in a repetition in a macro is highly unusual. The\nmost commmonly used separator is the comma, written as ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...),*"),", but any\nother single token is allowed here. Crucially, macro_rules! treats all\nbuilt-in Rust operators as single tokens, even those that consist of multiple\ncharacters like <<.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }")," \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u6c38\u8fdc\u662f 1\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," \u88ab\u4e22\u5f03\u4e86\uff0c\u6240\u4ee5\u5b83\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 }")," \u7684\u6548\u679c\u662f\u76f8\u540c\u7684\u3002\u8fd9\u91cc\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," \u662f\u4e3a\u4e86\u63a7\u5236\u91cd\u590d\u7684\u6b21\u6570\uff0c\u89c4\u5219\u4e2d\u5b9a\u4e49\u7684\u6807\u5fd7\u7b26"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }")," is an expression whose value is always 1. The\nvalue of ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," is discarded, so this is equivalent to the expression\n",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 }"),". The reason for having ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," in there is to control the\nnumber of times the repetition is repeated, which is determined by which\nfragment variables are used within the repetition. Writing a repetition without\nusing any fragment variables inside of it would not be legal.")),(0,a.kt)("p",null,"\u5047\u8bbe\u6211\u4eec\u8c03\u7528\u5b8f\u65f6\u4f20\u5165\u4e09\u6761\u8bed\u53e5\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Suppose we call this macro with three of the statements shown above as input.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"m! {\n    struct S { x: u64 }\n    let mut s = S { x: 1 }\n    s.x + 1\n}\n")),(0,a.kt)("p",null,"\u8fd9\u4e2a\u5b8f\u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The macro expands to:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"{ stringify!(struct S { x: u64 }); 1 }\n    << { stringify!(let mut s = S { x: 1 }); 1 }\n    << { stringify!(s.x + 1); 1 }\n")),(0,a.kt)("p",null,"\u6bcf\u4e2a stringifys \u90fd\u4f1a\u88ab\u8f6c\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Each of the stringifys expands to a string literal:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'{ "struct S { x: u64 }"; 1 }\n    << { "let mut s = S { x: 1 }"; 1 }\n    << { "s.x + 1"; 1 }\n')),(0,a.kt)("p",null,"\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u7684\u503c\u6ca1\u6709\u88ab\u4f7f\u7528\u3002\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u679c\u7b49\u4ef7\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 } << { 1 } << { 1 }"),"\uff0c\u4e5f\u7b49\u4ef7\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"1 << 1 << 1"),"\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u64cd\u4f5c\u7b26\u5c31\u662f\u5de6\u79fb\uff1b\u7ed3\u679c\u662f 4\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The values of the string literals are not used. In this case the expression is\nequivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 } << { 1 } << { 1 }"),", which is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"1 << 1 << 1"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," operator is left-associative; the numeric value of this expression\nis 4.")),(0,a.kt)("p",null,"\u603b\u7684\u6765\u8bf4\uff0cRust \u8bed\u53e5\u6709\u591a\u5c11\uff0c1 \u5c31\u91cd\u590d\u591a\u5c11\u6b21\u3002\u6240\u4ee5\u8fd9\u4e2a\u5b8f\u5c31\u76f8\u5f53\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"1 << (n - 1)"),"\u3002\u5f53 n \u4e3a 0 \u65f6\uff0c\u8bed\u53e5\u65e0\u6cd5\u5c55\u5f00\uff0c\u4f1a\u7f16\u8bd1\u5931\u8d25\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Altogether, the relevant behavior of this macro is that it evaluates to\n",(0,a.kt)("inlineCode",{parentName:"p"},"1 << 1 << 1 << ...")," where the number of ones is equal to the number of Rust\nstatements in the input of the macro. In closed form, the numeric value is\n",(0,a.kt)("inlineCode",{parentName:"p"},"1 << (n - 1)")," where n is the number of statements, except in the case that n is\nzero where the macro expands to nothing and we get a syntax error at the call\nsite.")),(0,a.kt)("p",null,"\u5269\u4e0b\u7684\u5c31\u662f\u5224\u65ad\u4e00\u4e0b\u8fd9 3 \u6b21\u8c03\u7528\u5206\u522b\u4f20\u5165\u4e86\u591a\u5c11\u4e2a Rust \u8bed\u53e5\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"It remains to determine how many statements are in the three invocations of m! in the quiz code.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"return || true"))),(0,a.kt)("p",null,"\u8fd9\u662f\u4e00\u6761 return \u8bed\u53e5\uff0c\u4ed6\u8fd4\u56de\u7684y\u662f\u4e00\u4e2a\u95ed\u5305 ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),"\u3002\u7b49\u4ef7\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"(|| true)"),"\u3002\u6240\u4ee5\u4ed6\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u6761\u8bed\u53e5\uff0c\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"m!")," \u7684\u7ed3\u679c\u662f 1\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This is a return-expression that would return the closure ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),". It is\nequivalent to return ",(0,a.kt)("inlineCode",{parentName:"p"},"(|| true)"),". It is parsed as a single statement so the m! invocation evaluates to 1")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"(return) || true"))),(0,a.kt)("p",null,"\u8fd9\u662f\u4e00\u6761\u903b\u8f91\u6216\u8bed\u53e5\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"||")," \u662f\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u5de6\u4fa7\u662f\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"(return)")," \u8bed\u53e5 (\u6216\u8005\u8bf4 ",(0,a.kt)("inlineCode",{parentName:"p"},"!")," \u7c7b\u578b)\uff0c\u53f3\u4fa7\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\u3002\u6240\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"p"},"(return) || true")," \u662f\u4e00\u4e2a\u8bed\u53e5\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"m!")," \u7684\u503c\u4ecd\u7136\u4e3a 1\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This is a logical-OR expression. The ",(0,a.kt)("inlineCode",{parentName:"p"},"||")," is a binary operator, where the\nleft-hand side is the expression ",(0,a.kt)("inlineCode",{parentName:"p"},"(return)")," (of diverging type ",(0,a.kt)("inlineCode",{parentName:"p"},"!"),") and the\nright-hand side is the expression ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". This expression is a single statement\nso m! again evaluates to 1.")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"{return} || true"))),(0,a.kt)("p",null,"\u8fd9\u6761\u662f\u4e24\u4e2a\u8bed\u53e5\uff01\u4e00\u4e2a\u5757\u8868\u8fbe\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"return"),"\uff0c\u540e\u9762\u53c8\u8ddf\u4e00\u4e2a\u95ed\u5305 ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This one is two statements! A block-statement ",(0,a.kt)("inlineCode",{parentName:"p"},"{return}")," followed by a closure\nexpression ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),".")),(0,a.kt)("p",null,"Rust \u7684\u8bed\u6cd5\u533a\u5206\u4e86\u9700\u8981\u5206\u53f7\u7684\u8868\u8fbe\u5f0f (\u4f5c\u4e3a\u5355\u4e2a\u8868\u8fbe\u5f0f) \u548c\u65e0\u9700\u5206\u53f7\u7684\u4e00\u7ec4\u8868\u8fbe\u5f0f\u3002\u770b\u770b\u4e0b\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The Rust grammar distinguishes between expressions that require a semicolon in order to stand alone as a statement, and expressions that can be statements even without a semicolon. Consider two examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// \u7ed3\u5c3e\u4e0d\u9700\u8981\u5206\u53f7\u3002\nfor t in vec {\n    /* ... */\n}\n\n// \u7ed3\u5c3e\u9700\u8981\u5206\u53f7\u3002\nself.skip_whitespace()?;\n")),(0,a.kt)("p",null,"\u4e0d\u9700\u8981\u5206\u53f7\u7684\u8868\u8fbe\u5f0f\u90fd\u5b9a\u4e49\u5728 libsyntex \u91cc\u3002The distinction informs a few different early bail-out cases where the parser decides to finish parsing the current expression.(\u80fd\u529b\u6709\u9650\uff0c\u4e0d\u4f1a\u7ffb\u8bd1)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The list of expression types that stand alone without a semicolon is defined\nhere in libsyntax. The distinction informs a few different early bail-out cases\nwhere the parser decides to finish parsing the current expression.")),(0,a.kt)("p",null,"\u5757\u8868\u8fbe\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"{ /* ... */ }")," \u7ec8\u6b62\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u548c\u672c\u9898\u7684\u60c5\u51b5\u76f8\u540c\u3002\u5982\u679c\u8fd9\u6837\u505a\u5728\u8bed\u6cd5\u4e0a\u662f\u5408\u7406\u7684\uff0c\u90a3\u5c31\u610f\u5473\u7740\u89e3\u6790\u5668\u5728\u5757\u8868\u8fbe\u5f0f\u4e4b\u540e\u4e0d\u4f1a\u7acb\u5373\u6d88\u8017\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Relevant to our case is that block expressions ",(0,a.kt)("inlineCode",{parentName:"p"},"{ /* ... */ }")," terminate an\nexpression if doing so would be syntactically sensible. The parser does not\neagerly consume binary operators after a block expression. Thus one might write:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn f() -> &'static &'static bool {\n    // \u5757\u8868\u8fbe\u5f0f\u3002\n    {\n        println!(\"What a silly function.\");\n    }\n\n    // true \u7684\u5f15\u7528\u7684\u5f15\u7528\u3002\n    &&true\n}\n")),(0,a.kt)("p",null,"\u4e3a\u4e86\u6b63\u786e\u89e3\u6790\u8fd9\u79cd\u60c5\u51b5\uff08\u5757\u8868\u8fbe\u5f0f\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff09\uff0c\u89e3\u6790\u5668\u9700\u8981\u5728\u8868\u8fbe\u5f0f\u7684\u672b\u5c3e\u53ca\u65f6\u7ec8\u6b62\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In order to parse a block followed by a binary operator, we would need to make\nit syntactically insensible for the parser to terminate an expression at the\nclose curly brace. This would usually be done by wrapping in parentheses.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn f() -> bool {\n    ({ true } && true)\n}\n")),(0,a.kt)("p",null,"\u603b\u4e4b\uff0c\u8be5\u7a0b\u5e8f\u7684\u8f93\u51fa\u662f 112\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Anyhow, the output of the program is 112.")),(0,a.kt)("h2",{id:"2"},"#2"),(0,a.kt)("h3",{id:"\u9898\u76ee-1"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct S(i32);\n\nimpl std::ops::BitAnd<S> for () {\n    type Output = ();\n\n    fn bitand(self, rhs: S) {\n        print!("{}", rhs.0);\n    }\n}\n\nfn main() {\n    let f = || ( () & S(1) );\n    let g = || { () & S(2) };\n    let h = || ( {} & S(3) );\n    let i = || { {} & S(4) };\n    f();\n    g();\n    h();\n    i();\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-1"},"\u63d0\u793a"),(0,a.kt)("p",null,"\u5176\u4e2d\u4e00\u4e2a\u95ed\u5305\u548c\u53e6\u5916\u4e09\u4e2a\u4e0d\u540c\u3002"),(0,a.kt)("h3",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: 123"),(0,a.kt)("p",null,"f\uff0cg \u548c h \u90fd\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"impl Fn()"),"\u3002\u95ed\u5305\u7684 body \u90fd\u4f1a\u88ab\u89e3\u6790\u4e3a\u5bf9\u4e0a\u9762\u7531 BitAnd Trait \u5b9a\u4e49\u7684 bitwise-AND \u64cd\u4f5c\u7b26\u7684\u8c03\u7528\u3002\u5f53\u95ed\u5305\u88ab\u8c03\u7528\u65f6\uff0cbitwise-AND \u4f1a\u6253\u5370\u51fa\u53f3\u4fa7 S \u7684\u5185\u5bb9\uff0c\u95ed\u5305\u5219\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The closures f, g, and h are all of type impl Fn(). The closure bodies are parsed as an invocation of the user-defined bitwise-AND operator defined above by the BitAnd trait impl. When the closures are invoked, the bitwise-AND implementation prints the content of the S from the right-hand side and evaluates to ().")),(0,a.kt)("p",null,"\u95ed\u5305 i \u5219\u4e0d\u75db\u3002\u4f7f\u7528 rustfmt \u683c\u5f0f\u5316\u4ee3\u7801\u4f1a\u8ba9\u4ed6\u66f4\u6e05\u6670\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The closure i is different. Formatting the code with rustfmt makes it clearer how i is parsed.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let i = || {\n    {}\n    &S(4)\n};\n")),(0,a.kt)("p",null,"\u95ed\u5305\u4f53\u7531\u4e00\u4e2a\u7a7a\u7684\u5757\u72b6\u8bed\u53e5 {} \u548c\u540e\u9762\u7684\u5bf9 S(4) \u7684\u5f15\u7528\u7ec4\u6210\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a bitwise-AND \u64cd\u4f5c\u3002i \u7684\u7c7b\u578b\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"impl Fn() -> &'static S"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The closure body consists of an empty block-statement {} followed by a reference to S(4), not a bitwise-AND. The type of i is impl Fn() -> &'static S.")),(0,a.kt)("p",null,"f\u5bf9\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u6790\u662f\u7531 libsyntax \u4e2d\u7684\u4ee3\u7801\u7ba1\u7406\u7684\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The parsing of this case is governed by this code in libsyntax.")),(0,a.kt)("h2",{id:"3"},"#3"),(0,a.kt)("h3",{id:"\u9898\u76ee-2"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct S {\n    x: i32,\n}\n\nconst S: S = S { x: 2 };\n\nfn main() {\n    let v = &mut S;\n    v.x += 1;\n    S.x += 1;\n    print!("{}{}", v.x, S.x);\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-2"},"\u63d0\u793a"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"const")," \u548c \u4e0d\u53ef\u53d8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," \u6709\u4ec0\u4e48\u533a\u522b\uff1f"),(0,a.kt)("h3",{id:"\u9898\u89e3-1"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: 32"),(0,a.kt)("p",null,"const\u7684\u8bed\u4e49\u662f\uff0c\u4efb\u4f55\u5728\u8868\u8fbe\u5f0f\u4f4d\u7f6e\u4e0a\u4ee5\u540d\u79f0\u63d0\u53ca\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"const")," \u90fd\u4f1a\u88ab const initializer \u7684\u503c\u6240\u66ff\u4ee3\u3002\u4e0a\u9762\u7684\u4ee3\u7801\u5176\u5b9e\u7b49\u540c\u4e8e\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The semantics of const is that any mention of the const by name in expression position is substituted with the value of the const initializer. In this quiz code the behavior is equivalent to:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct S {\n    x: i32,\n}\n\nfn main() {\n    let v = &mut S { x: 2 };\n    v.x += 1;\n    S { x: 2 }.x += 1;\n    print!("{}{}", v.x, S { x: 2 }.x);\n}\n')),(0,a.kt)("p",null,"\u8fd9\u91cc\u6211\u53ea\u662f\u7b80\u5355\u5730\u628a\u6bcf\u4e00\u4e2a\u63d0\u5230 S \u7684\u5730\u65b9\u90fd\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"const S")," \u7684\u503c\u6765\u4ee3\u66ff\uff0c\u5373 ",(0,a.kt)("inlineCode",{parentName:"p"},"S { x: 2 }"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"I have simply substituted every mention of S in expresson position with the value of const S which is S { x: 2 }.")),(0,a.kt)("p",null,"main \u7684\u7b2c\u4e00\u884c\u7b49\u540c\u4e8e\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The first line of main is equivalent to:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let mut _tmp0 = S { x: 2 };\nlet v = &mut _tmp0;\n")),(0,a.kt)("p",null,"main \u7684\u7b2c\u4e8c\u884c\u6539\u53d8\u4e86 v \u6307\u5411\u7684 x\uff0c\u5728 v \u5269\u4f59\u7684\u751f\u547d\u671f\u5185\uff0cx \u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 v \u8bbf\u95ee\uff0c\u56e0\u6b64\u6253\u5370\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f 3\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The second line of main mutates the value pointed to by v. The same value remains accessible through v for the rest of the lifetime of v, which is why the first character printed is 3.")),(0,a.kt)("p",null,"main\u7684\u7b2c\u4e09\u884c\u6539\u53d8\u4e86\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5728\u5206\u53f7\u7ed3\u5c3e\u5c31\u7acb\u5373\u8d85\u51fa\u4e86\u4f5c\u7528\u57df\u3002\u6253\u5370\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u6765\u81ea\u4e00\u4e2a\u5168\u65b0\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"S { x: 2 }"),"\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u6253\u5370\u7684\u662f 2\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The third line of main mutates a temporary that immediately goes out of scope at the semicolon. The second character printed is coming from a brand new S { x: 2 }, so 2 is printed.")),(0,a.kt)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u662f Rust \u4e2d\u5173\u4e8e\u547d\u540d\u7a7a\u95f4\u548c\u540d\u5b57\u89e3\u6790\u7684\u6982\u5ff5\u3002\u4efb\u4f55\u6307\u4ee3\u7c7b\u578b\u7684\u540d\u5b57\u90fd\u5728\u7c7b\u578b\u547d\u540d\u7a7a\u95f4\uff0c\u4efb\u4f55\u6307\u4ee3\u503c\u7684\u540d\u5b57\u90fd\u5728\u503c\u547d\u540d\u7a7a\u95f4\u3002"),(0,a.kt)("p",null,"\u8fd9\u662f\u4e24\u7ec4\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u800c\u8bed\u8a00\u7684\u7ed3\u6784\u4f7f\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u77e5\u9053\u5728\u54ea\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u67e5\u627e\u4e00\u4e2a\u540d\u5b57\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"One additional wrinkle in this code is the concept of namespaces and name resolution in Rust. Any name that refers to a type lives in the type namespace, and any name that refers to a value lives in the value namespace. These are two separate sets of names, and the language is structured such that we can always tell which namespace to look up a name in.")),(0,a.kt)("p",null,"\u5728\u4ee3\u7801\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7ed3\u6784\u4f53 S \u7684\u540d\u79f0\u662f\u7c7b\u578b\u540d\u79f0\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u800c\u5e38\u91cf S \u7684\u540d\u79f0\u662f\u503c\u540d\u79f0\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ef\u4ee5\uff0c\u5728\u540c\u4e00\u65f6\u95f4\u770b\u5230\u4e24\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u4e0d\u540c\u4e8b\u7269\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In the context of the quiz code, the name of the struct S is part of the type namespace and the name of the const S is part of the value namespace. That is how we can have seemingly two different things with the same name in scope at the same time.")),(0,a.kt)("h2",{id:"4"},"#4"),(0,a.kt)("h3",{id:"\u9898\u76ee-3"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn main() {\n    let (.., x, y) = (0, 1, ..);\n    print!("{}", b"066"[y][x]);\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-3"},"\u63d0\u793a"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"..")," \u5728\u8868\u8fbe\u4e2d\u548c\u6a21\u5f0f\u5339\u914d\u4e2d\u542b\u4e49\u4e0d\u540c\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},".. means one thing in an expression and something else in a pattern.")),(0,a.kt)("h3",{id:"\u9898\u89e3-2"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: 54"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u5c55\u793a\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},".."),"\u4e0d\u540c\u542b\u4e49"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This question demonstrates two different meanings of ...")),(0,a.kt)("p",null,"\u5728\u8868\u8fbe\u5f0f\u7684\u4e00\u4fa7 (\u53f3\u4fa7), ",(0,a.kt)("inlineCode",{parentName:"p"},"..")," \u662f\u6784\u9020\u95f0 ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," \u7c7b\u578b\u7684\u8bed\u6cd5, \u8868\u8fbe\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"(0, 1, ..)")," \u662f\u4e00\u4e2a\u62e5\u6709\u4e09\u4e2a\u5143\u7d20\u7684\u5143\u7ec4,\u5176\u4e2d\u7684\u7b2c\u4e09\u4e2a\u62e5\u6709 RangeFull \u7c7b\u578b\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In expression position, .. is the syntax for constructing various types of ranges. Here the expression (0, 1, ..) is a tuple with three elements, the third one having type RangeFull.")),(0,a.kt)("p",null,"\u5728\u6a21\u5f0f\u7684\u4e00\u4fa7, ",(0,a.kt)("inlineCode",{parentName:"p"},"..")," \u88ab\u7528\u6765\u8868\u793a\u4efb\u4f55\u6570\u91cf\u7684\u5143\u7d20\u3002\u6240\u4ee5\u6a21\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"(.., x, y)")," \u4f1a\u5339\u914d\u5230\u4e00\u4e2a\u62e5\u6709\u4e24\u4e2a\u6216\u8005\u66f4\u591a\u5143\u7d20\u7684\u5143\u7ec4, \u5e76\u628a\u5012\u6570\u7b2c 2 \u4e2a\u5143\u7d20\u7ed1\u5b9a\u5230 x \u4e0a\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u7ed1\u5b9a\u5230 y \u4e0a\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'On the other hand in a pattern, .. is used to mean "any number of elements". So the pattern (.., x, y) matches a tuple with 2 or more elements, binding the second-last one to x and the last one to y.')),(0,a.kt)("p",null,"\u6240\u4ee5\u5728\u9762\u7684\u7b2c 1 \u884c, x \u7684\u503c\u4e3a 1\uff0cy \u7684\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"(..)"),"\u3002\u56e0\u6b64\u6253\u5370\u51fa\u6765\u7684\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},'b"066[..][1]"'),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'Coming out of the first line of main, we have x = 1 and y = (..). Thus the value printed is going to be b"066"',"[..][1]",".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'b"066"')," \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f,\u4ed6\u662f\u4e00\u4e2a Byte \u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u91cf,\u5b83\u7684\u7c7b\u578b\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"&'static [u8; 3]"),", \u62e5\u6709\u4e09\u4e2a ASCII \u5b57\u7b26 ",(0,a.kt)("inlineCode",{parentName:"p"},"b'0'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"b'6'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"b'6'"),"\u3002 "),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'The expression b"066" is a byte-string literal of type &\'static ',"[u8; 3]"," containing the three ASCII bytes b'0', b'6', b'6'.")),(0,a.kt)("p",null,"\u5f53\u6211\u4eec\u7528 RangeFull \u5bf9\u5b57\u8282\u4e32\u8fdb\u5207\u7247\u65f6\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684\u52a8\u6001\u5927\u5c0f\u7684\u5207\u7247","[u8]","\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8bbf\u95ee\u5207\u7247\u5728 1 \u5904\u7684\u5143\u7d20\uff0c\u5373\u7c7b\u578b\u4e3a u8 \u7684\u5b57\u8282 ",(0,a.kt)("inlineCode",{parentName:"p"},"b'6'"),"\u3002\u5f53\u6253\u5370\u65f6\uff0c\u6211\u4eec\u770b\u5230\u7684\u662f ASCII \u6570\u5b57 6 \u7684\u5341\u8fdb\u5236\u8868\u793a\uff0c\u4e5f\u5c31\u662f\u6570\u5b5754\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When we slice the byte-string with RangeFull we get a dynamically sized slice ","[u8]"," of length 3. Next we access element 1 of the slice, which is the byte b'6' of type u8. When printed, we see the decimal representation of the byte value of the ASCII digit 6, which is the number 54.")),(0,a.kt)("h2",{id:"5"},"#5"),(0,a.kt)("h3",{id:"\u9898\u76ee-4"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'trait Trait {\n    fn p(self);\n}\n\nimpl<T> Trait for fn(T) {\n    fn p(self) {\n        print!("1");\n    }\n}\n\nimpl<T> Trait for fn(&T) {\n    fn p(self) {\n        print!("2");\n    }\n}\n\nfn f(_: u8) {}\nfn g(_: &u8) {}\n\nfn main() {\n    let a: fn(_) = f;\n    let b: fn(_) = g;\n    let c: fn(&_) = g;\n    a.p();\n    b.p();\n    c.p();\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-4"},"\u63d0\u793a"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u719f\u6089\u9ad8\u7ea7\u751f\u547d\u5468\u671f\u7ed1\u5b9a\u7684\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5c06 impl \u7b7e\u540d\u4e2d\u7684\u6240\u6709\u7c7b\u578b\u548c main \u4e2d\u7684\u7c7b\u578b\u89e3\u6784\u4e3a\u5b8c\u5168\u663e\u5f0f\u7684\u5f62\u5f0f\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you are familiar with higher-rank trait bound syntax, try desugaring all the types in the impl signatures and types in main into their fully explicit form.")),(0,a.kt)("h3",{id:"\u9898\u89e3-3"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: 112"),(0,a.kt)("p",null,"\u7b2c\u4e00\u4e2a impl \u9002\u7528\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"fn(T)")," \u7c7b\u578b\u7684\u51fd\u6570\u6307\u9488\uff0c\u5176\u4e2d T \u662f\u4efb\u4f55\u5355\u4e00\u7684\u5177\u4f53\u7c7b\u578b\u3002\u7b2c\u4e8c\u4e2a impl \u9002\u7528\u4e8e\u66f4\u9ad8\u7b49\u7ea7\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"for<'a> fn(&'a T)")," \u7c7b\u578b\u7684\u51fd\u6570\u6307\u9488\uff0c\u5176\u4e2d T \u7c7b\u578b\u7684\u751f\u547d\u5468\u671f\u8d85\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"'a"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The first impl applies to function pointers of type fn(T) where T is any single concrete type. The second impl applies to function pointers of higher-ranked type for<'a> fn(&'a T) for some concrete type T that outlives 'a.")),(0,a.kt)("p",null,"\u5728 main \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4f7f\u7528\u7c7b\u578b\u63a8\u5bfc\uff0c\u7528\u67d0\u79cd\u5177\u4f53\u7684\u7c7b\u578b\u6765\u66ff\u4ee3\u6240\u6709\u51fa\u73b0\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Inside of main, the compiler is going to use type inference to substitute all occurrences of _ in a type by some concrete type.")),(0,a.kt)("p",null,"\u5bf9\u4e8e\u95ed\u5305 a\uff0c\u6211\u4eec\u63a8\u65ad ",(0,a.kt)("inlineCode",{parentName:"p"},"_ = u8"),"\uff0c\u95ed\u5305\u7c7b\u578b\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"fn(u8)"),"\uff0c\u63a5\u53d7\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"u8")," \u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For the closure a we infer _ = u8, yielding the closure type fn(u8) taking an argument of type u8 and returning ().")),(0,a.kt)("p",null,"\u5bf9\u4e8e b\uff0c\u6211\u4eec\u63a8\u65ad ",(0,a.kt)("inlineCode",{parentName:"p"},"_ = &'x u8"),", \u4e3a\u4e00\u4e9b\u5177\u4f53\u7684\u751f\u547d\u5468\u671f ",(0,a.kt)("inlineCode",{parentName:"p"},"'x"),"\uff0c\u6700\u7ec8\u5c06\u88ab\u9001\u5165\u501f\u7528\u68c0\u67e5\u5668\u3002b \u7684\u7c7b\u578b\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"fn(&'x u8)"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For b we infer _ = &'x u8 for some concrete lifetime 'x that will ultimately feed into the borrow checker. The type of b is fn(&'x u8).")),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u5bf9\u4e8e c\uff0c\u6211\u4eec\u63a8\u65ad ",(0,a.kt)("inlineCode",{parentName:"p"},"_ = u8"),"\uff0c\u4ea7\u751f\u66f4\u9ad8\u7b49\u7ea7\u7684\u95ed\u5305\u7c7b\u578b ",(0,a.kt)("inlineCode",{parentName:"p"},"<'a> fn(&'a u8)"),"\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"And finally for c we infer _ = u8, yielding the higher-ranked closure type for<'a> fn(&'a u8).")),(0,a.kt)("p",null,"\u4ee5\u6b64\u4e3a\u6846\u67b6\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u5728 main \u7ed3\u5c3e\u51fa\u4f1a\u6253\u5370 112\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Framed in this way, it follows that the trait method calls at the end of main print 112.")),(0,a.kt)("h2",{id:"6"},"#6"),(0,a.kt)("h3",{id:"\u9898\u76ee-5"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use std::mem;\n\nfn main() {\n    let a;\n    let a = a = true;\n    print!("{}", mem::size_of_val(&a));\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-5"},"\u63d0\u793a"),(0,a.kt)("p",null,"\u6709\u4e24\u4e2a\u540d\u4e3a a \u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff1f"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"There are two variables named a. What is the type of each one?")),(0,a.kt)("h3",{id:"\u9898\u89e3-4"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: 0"),(0,a.kt)("p",null,'\u8fd9\u91cc\u6709\u4e24\u4e2a\u540d\u4e3a a e\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u4f1a "\u906e\u853d" \u7b2c\u4e00\u4e2a\uff0c\u8fd9\u6bb5\u7a0b\u5e8f\u7b49\u4ef7\u4e8e\uff1a'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"There are two variables named a, one shadowing the other. The program is equivalent to:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'let a;\nlet b = a = true;\nprint!("{}", mem::size_of_val(&b));\n')),(0,a.kt)("p",null,"\u66f4\u8fdb\u4e00\u6b65\uff0c\u4e3a b \u8d4b\u7684\u503c\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"a = true"),";"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Further, the value being assigned to b is the expression a = true.")),(0,a.kt)("p",null,"\u5728 Rust \u91cc\uff0c\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u59cb\u7ec8\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"\u3002\u5728\u7b80\u5316\u4e00\u4e0b\u4ee3\u7801\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In Rust, assignment expressions always have the value (). Simplified some more, the quiz code is equivalent to:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'let a = true;\nlet b = ();\nprint!("{}", mem::size_of_val(&b));\n')),(0,a.kt)("p",null,"\u5173\u4e8e\u5b83\u7684\u884c\u4e3a\u89c4\u8303\uff0c\u8bf7\u53c2\u8003 size_of_val \u7684\u6587\u6863\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u88ab\u5b9e\u4f8b\u5316\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"T = ()"),"\uff0c\u6211\u4eec\u6700\u7ec8\u4f1a\u6253\u5370\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"size_of::<()>()")," \u7684\u503c\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Refer to the documentation of size_of_val for a specification of its behavior, but in this case it is being instantiated with T = () and we end up printing the value of size_of::<()>().")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"()")," \u662f\u96f6\u5927\u5c0f\u7c7b\u578b\u6216 ZST \u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5728\u8fd0\u884c\u65f6\u7531\u96f6\u5b57\u8282\u7684\u6570\u636e\u8868\u793a\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6253\u5370\u51fa 0\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"() is one example of a zero-sized type or ZST and is represented by zero bytes of data at runtime, so the program prints 0.")),(0,a.kt)("h2",{id:"7"},"#7"),(0,a.kt)("h3",{id:"\u9898\u76ee-6"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'#[repr(u8)]\nenum Enum {\n    First,\n    Second,\n}\n\nimpl Enum {\n    fn p(self) {\n        match self {\n            First => print!("1"),\n            Second => print!("2"),\n        }\n    }\n}\n\nfn main() {\n    Enum::p(unsafe {\n        std::mem::transmute(1u8)\n    });\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-6"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-5"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"8"},"#8"),(0,a.kt)("h3",{id:"\u9898\u76ee-7"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-7"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-6"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"9"},"#9"),(0,a.kt)("h3",{id:"\u9898\u76ee-8"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-8"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-7"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"10"},"#10"),(0,a.kt)("h3",{id:"\u9898\u76ee-9"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-9"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-8"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"11"},"#11"),(0,a.kt)("h3",{id:"\u9898\u76ee-10"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-10"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-9"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"12"},"#12"),(0,a.kt)("h3",{id:"\u9898\u76ee-11"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-11"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-10"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"13"},"#13"),(0,a.kt)("h3",{id:"\u9898\u76ee-12"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-12"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-11"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"14"},"#14"),(0,a.kt)("h3",{id:"\u9898\u76ee-13"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-13"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-12"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"15"},"#15"),(0,a.kt)("h3",{id:"\u9898\u76ee-14"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-14"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-13"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"16"},"#16"),(0,a.kt)("h3",{id:"\u9898\u76ee-15"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-15"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-14"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"17"},"#17"),(0,a.kt)("h3",{id:"\u9898\u76ee-16"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-16"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-15"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"18"},"#18"),(0,a.kt)("h3",{id:"\u9898\u76ee-17"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-17"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-16"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"19"},"#19"),(0,a.kt)("h3",{id:"\u9898\u76ee-18"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-18"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-17"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"20"},"#20"),(0,a.kt)("h3",{id:"\u9898\u76ee-19"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-19"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-18"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"21"},"#21"),(0,a.kt)("h3",{id:"\u9898\u76ee-20"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-20"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-19"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"22"},"#22"),(0,a.kt)("h3",{id:"\u9898\u76ee-21"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-21"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-20"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"23"},"#23"),(0,a.kt)("h3",{id:"\u9898\u76ee-22"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-22"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-21"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"24"},"#24"),(0,a.kt)("h3",{id:"\u9898\u76ee-23"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-23"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-22"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"25"},"#25"),(0,a.kt)("h3",{id:"\u9898\u76ee-24"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-24"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-23"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"26"},"#26"),(0,a.kt)("h3",{id:"\u9898\u76ee-25"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-25"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-24"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"27"},"#27"),(0,a.kt)("h3",{id:"\u9898\u76ee-26"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-26"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-25"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"28"},"#28"),(0,a.kt)("h3",{id:"\u9898\u76ee-27"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-27"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-26"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"29"},"#29"),(0,a.kt)("h3",{id:"\u9898\u76ee-28"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-28"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-27"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"30"},"#30"),(0,a.kt)("h3",{id:"\u9898\u76ee-29"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-29"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-28"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:""}),(0,a.kt)("h3",{id:"\u9898\u76ee-30"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-30"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-29"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-1"}),(0,a.kt)("h3",{id:"\u9898\u76ee-31"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-31"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-30"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-2"}),(0,a.kt)("h3",{id:"\u9898\u76ee-32"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-32"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-31"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-3"}),(0,a.kt)("h3",{id:"\u9898\u76ee-33"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-33"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-32"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"5-1"},"#5"),(0,a.kt)("h3",{id:"\u9898\u76ee-34"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-34"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-33"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"6-1"},"\uff036"),(0,a.kt)("h3",{id:"\u9898\u76ee-35"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-35"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-34"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-4"}),(0,a.kt)("h3",{id:"\u9898\u76ee-36"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-36"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-35"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-5"}),(0,a.kt)("h3",{id:"\u9898\u76ee-37"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-37"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-36"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-6"}),(0,a.kt)("h3",{id:"\u9898\u76ee-38"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-38"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-37"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848: "),(0,a.kt)("h2",{id:"-7"}),(0,a.kt)("h3",{id:"\u9898\u76ee-39"},"\u9898\u76ee"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672a\u5b9a\u4e49\u7684\u884c\u4e3a"),(0,a.kt)("li",{parentName:"ol"},"\u7f16\u8bd1\u5931\u8d25"),(0,a.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u786e\u5b9a\u4f1a\u8f93\u51fa: ","[ ]")),(0,a.kt)("h3",{id:"\u63d0\u793a-39"},"\u63d0\u793a"),(0,a.kt)("h3",{id:"\u9898\u89e3-38"},"\u9898\u89e3"),(0,a.kt)("p",null,"\u7b54\u6848:"))}s.isMDXComponent=!0}}]);