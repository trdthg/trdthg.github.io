"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[6228],{3905:(n,e,t)=>{t.d(e,{Zo:()=>i,kt:()=>d});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function p(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},p=Object.keys(n);for(a=0;a<p.length;a++)t=p[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(n);for(a=0;a<p.length;a++)t=p[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var u=a.createContext({}),o=function(n){var e=a.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},i=function(n){var e=o(n.components);return a.createElement(u.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,p=n.originalType,u=n.parentName,i=l(n,["components","mdxType","originalType","parentName"]),f=o(t),d=r,c=f["".concat(u,".").concat(d)]||f[d]||m[d]||p;return t?a.createElement(c,s(s({ref:e},i),{},{components:t})):a.createElement(c,s({ref:e},i))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var p=t.length,s=new Array(p);s[0]=f;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l.mdxType="string"==typeof n?n:r,s[1]=l;for(var o=2;o<p;o++)s[o]=t[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2775:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>p,metadata:()=>l,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const p={},s=void 0,l={permalink:"/blog/2023/01/01/[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map",source:"@site/blog/2023-01-01-[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map.md",title:"[\u8bd1] \u62d3\u5c55 Rust \u4e2d\u7684 Map",description:"\u539f\u6587\u94fe\u63a5\uff1ahttps://lucumr.pocoo.org/2022/1/6/rust-extension-map/",date:"2023-01-01T00:00:00.000Z",formattedDate:"2023\u5e741\u67081\u65e5",tags:[],readingTime:12.3,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86",permalink:"/blog/2023/01/02/[\u8bd1] \u672a\u521d\u59cb\u5316\u5185\u5b58: unsafe Rust\u592a\u96be\u4e86"},nextItem:{title:"[\u8bd1] \u53ef\u89c6\u5316 Rust \u5404\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u5e03\u5c40",permalink:"/blog/2022/05/04/[\u8bd1] \u53ef\u89c6\u5316 Rust \u5404\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u5e03\u5c40"}},u={authorsImageUrls:[]},o=[{value:"\u5f15\u5165 Any \u7279\u5f81",id:"\u5f15\u5165-any-\u7279\u5f81",level:2},{value:"\u5185\u90e8\u53ef\u53d8\u6027",id:"\u5185\u90e8\u53ef\u53d8\u6027",level:2},{value:"\u540c\u6b65\u652f\u6301",id:"\u540c\u6b65\u652f\u6301",level:2},{value:"\u4e3a map \u5b9e\u73b0 Debug",id:"\u4e3a-map-\u5b9e\u73b0-debug",level:2},{value:"\u7b80\u5316\u95ee\u9898",id:"\u7b80\u5316\u95ee\u9898",level:3},{value:"\u8d85\u7ea7\u7279\u5f81",id:"\u8d85\u7ea7\u7279\u5f81",level:3},{value:"\u53ef\u8c03\u8bd5\u7684 Extension Map",id:"\u53ef\u8c03\u8bd5\u7684-extension-map",level:2},{value:"\u4fdd\u7559\u7c7b\u578b\u540d\u79f0",id:"\u4fdd\u7559\u7c7b\u578b\u540d\u79f0",level:2}],i={toc:o};function m(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,a.Z)({},i,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u539f\u6587\u94fe\u63a5\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://lucumr.pocoo.org/2022/1/6/rust-extension-map/"},"https://lucumr.pocoo.org/2022/1/6/rust-extension-map/")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u7ffb\u8bd1\uff1a",(0,r.kt)("a",{parentName:"strong",href:"https://github.com/trdthg"},"trdthg"))),(0,r.kt)("p",{parentName:"blockquote"},"\u9009\u9898\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,r.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u7531 ",(0,r.kt)("a",{parentName:"p",href:"https://Rustt.org"},"Rustt")," \u7ffb\u8bd1\uff0c",(0,r.kt)("a",{parentName:"p",href:"https://studyrust.org"},"StudyRust")," \u8363\u8a89\u63a8\u51fa")),(0,r.kt)("h1",{id:"\u62d3\u5c55-rust-\u4e2d\u7684-map"},"\u62d3\u5c55 Rust \u4e2d\u7684 Map"),(0,r.kt)("p",null,"\u5728 Rust \u4e2d\uff0c\u5982\u679c\u4f60\u60f3\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u7075\u6d3b\u7684 API\uff0c\u4e00\u822c\u53ef\u4ee5\u5f15\u5165\u6cdb\u578b\u53c2\u6570\u3002\u4ee5\u4e00\u4e2a web\n\u6846\u67b6\u4e3a\u4f8b\uff0c\u5b83\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u7c7b\u578b\uff0c\u5e76\u4e14\u9700\u8981\u4f20\u9012\u7ed9\u5f88\u591a\u51fd\u6570\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7c7b\u578b\u9700\u8981\u80fd\u591f\u4ee5\u914d\u7f6e\u7684\u5f62\u5f0f\u88ab\u53c2\u6570\u5316\u3002"),(0,r.kt)("h2",{id:"\u5f15\u5165-any-\u7279\u5f81"},"\u5f15\u5165 Any \u7279\u5f81"),(0,r.kt)("p",null,"\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," \u7279\u5f81\u3002\u5b83\u9700\u8981\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"'static")," \u7684\u751f\u547d\u5468\u671f\uff0c\u5f53\u4f60\u4e4b\u540e\u4f7f\u7528\u5b83\u65f6\uff0c\u8fd8\u9700\u8981\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),"\n\u8fdb\u884c\u88c5\u7bb1\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u80fd\u5bf9\u5b83\u8fdb\u884c\u5411\u4e0b\u8f6c\u578b\uff0c\u5373\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u67d0\u4e2a\u5730\u65b9\uff08\u6bd4\u5982\u6211\u4eec\u7684 App\uff09\u4e2d\u5b58\u50a8\u548c\u83b7\u53d6\u4efb\u610f\u7c7b\u578b\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u671f\u671b\u7684 API \u5927\u81f4\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"let app = App::new();\n\n// place in extension map\napp.extensions().insert(Config { ... });\napp.extensions().insert(Database { ... });\n\n// retrieve from extension map\nlet config = app.extensions().get::<Config>();\n")),(0,r.kt)("p",null,"\u6211\u4eec\u7684 app \u9700\u8981\u5bb9\u7eb3\u5176\u4ed6\u62d3\u5c55\u7684\u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528\u3002"),(0,r.kt)("p",null,"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8bd5\u8bd5\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a\u51c6\u5907\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"Extensions")," \u5bf9\u8c61\uff0c\u8ba9\u5b83\u5b9e\u73b0\u63d2\u5165\u548c\u83b7\u53d6\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4e00\u4e2a\u62d3\u5c55\u8fd8\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u9ed8\u8ba4\u7684\uff08\u9700\u8981\u5b9e\u73b0\n",(0,r.kt)("inlineCode",{parentName:"p"},"Default")," \u7279\u5f81\uff09\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"use std::collections::HashMap;\nuse std::any::{Any, TypeId};\n\n#[derive(Default)]\npub struct Extensions {\n    map: HashMap<TypeId, Box<dyn Any>>,\n}\n\nimpl Extensions {\n    pub fn insert<T: 'static>(&mut self, value: T) {\n        self.map.insert(TypeId::of::<T>(), Box::new(value));\n    }\n\n    pub fn get<T: 'static>(&self) -> &T {\n        self.map.get(&TypeId::of::<T>())\n            .and_then(|b| b.downcast_ref())\n            .unwrap()\n    }\n\n    pub fn get_mut<T: Default + 'static>(&mut self) -> &mut T {\n        self.ensure::<T>();\n        self.map.get_mut(&TypeId::of::<T>())\n            .and_then(|b| b.downcast_mut())\n            .unwrap()\n    }\n\n    fn ensure<T: Default + 'static>(&mut self) {\n        if self.map.get(&TypeId::of::<T>()).is_none() {\n            self.insert(T::default());\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u662f\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a\u9996\u5148\uff0c\u53ea\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"get_mut")," \u80fd\u591f\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"ensure")," \u53bb\u63d2\u5165\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6709\u4eba\u76f4\u63a5\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," \u5c31\u4f1a\u5bfc\u81f4\npanic\u3002\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u501f\u7528\u68c0\u67e5\u5668\u4f1a\u8ba9\u4e4b\u540e\u7684\u7f16\u5199\u975e\u5e38\u56f0\u96be\u3002\u4e0a\u9762\u7684 map \u5bf9\u4e8e\u89e3\u51b3\u7ecf\u5178\u7684\u95ee\u9898\uff08\u4f8b\u5982 app\uff09\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f60\u53ea\u9700\u8981\u914d\u7f6e\u4e00\u6b21\uff0c\u81ea\u90a3\u4e4b\u540e map\n\u5c31\u50cf\u662f\u88ab\u51bb\u7ed3\u4e86\u4e00\u6837\uff0c\u56e0\u4e3a\u6709\u592a\u591a\u7684\u5f15\u7528\u5728\u98de\u6765\u5206\u98de\u53bb\uff0c\u4ee5\u81f3\u4e8e\u6ca1\u6709\u4eba\u80fd\u591f\u5f97\u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},"&mut")," \u7684\u5f15\u7528\u3002"),(0,r.kt)("p",null,"how does it work\uff1f"),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5982\u4f55\u505a\u5230\u7684\u5462\uff0cRust \u4e2d\u7684\u6bcf\u4e00\u79cd\u7c7b\u578b\u90fd\u4f1a\u6709\u4e00\u4e2a type ID\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeId::of::<T>()"),"\n\u83b7\u53d6\u3002\u4ed6\u662f\u552f\u4e00\u7684\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u8fdb\u884c\u6bd4\u8f83\uff0c\u6216\u8005\u662f\u4f5c\u4e3a map \u7684\u952e\u6765\u4f7f\u7528\u3002\u6bcf\u79cd\u7c7b\u578b\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u503c\u3002\u63a5\u7740\u6211\u4eec\u628a T \u4f5c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"dyn Any")," \u5b58\u50a8\u5728 map\n\u91cc\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Any")," \u7279\u5f81\u5141\u8bb8\u6211\u4eec\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"downcast_ref")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"downcast_mut")," \u65b9\u6cd5\u62ff\u5230\u539f\u59cb\u7c7b\u578b\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86 ensure\n\u65b9\u6cd5\u786e\u4fdd\u8fd9\u91cc\u7684\u7c7b\u578b\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u7684 unwrap\u3002"),(0,r.kt)("h2",{id:"\u5185\u90e8\u53ef\u53d8\u6027"},"\u5185\u90e8\u53ef\u53d8\u6027"),(0,r.kt)("p",null,"\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a web \u6846\u67b6\u6216\u8005\u662f\u6a21\u677f\u5f15\u64ce\u7684\u5e38\u89c1\u6848\u4f8b\u3002\u4ee5\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mitsuhiko/minijinja"},"MiniJinja"),"\uff08\u6a21\u677f\u5f15\u64ce\uff09\u4e3a\u4f8b\uff0c\u5b83\u91cc\u9762\u6709\u4e00\u4e2a State\n\u5bf9\u8c61\uff0c\u6bcf\u6b21\u6a21\u677f\u521d\u59cb\u5316\u65f6\u90fd\u4f1a\u521b\u5efa\u4e00\u6b21\uff0cState \u6ca1\u6709\u5b9e\u73b0 Send \u548c Sync\uff0cMiniJinja \u5728\u8bc4\u4f30\u65f6\u9700\u8981 State\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u7528\u6237\u80fd\u591f\u653e\u5165\u81ea\u5b9a\u4e49\u7684\nState \u5462\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5185\u90e8\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"RefCell")," \u6765\u8c03\u6574\u4e0a\u9762\u7684\u7c7b\u578b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"use std::collections::HashMap;\nuse std::any::{Any, TypeId};\nuse std::cell::{Ref, RefCell, RefMut};\n\n#[derive(Default)]\npub struct Extensions {\n    map: RefCell<HashMap<TypeId, Box<dyn Any>>>,\n}\n\nimpl Extensions {\n    pub fn insert<T: 'static>(&self, value: T) {\n        self.map.borrow_mut().insert(TypeId::of::<T>(), Box::new(value));\n    }\n\n    pub fn get<T: Default + 'static>(&self) -> Ref<'_, T> {\n        self.ensure::<T>();\n        Ref::map(self.map.borrow(), |m| {\n            m.get(&TypeId::of::<T>())\n                .and_then(|b| b.downcast_ref())\n                .unwrap()\n        })\n    }\n\n    pub fn get_mut<T: Default + 'static>(&self) -> RefMut<'_, T> {\n        self.ensure::<T>();\n        RefMut::map(self.map.borrow_mut(), |m| {\n            m.get_mut(&TypeId::of::<T>())\n                .and_then(|b| b.downcast_mut())\n                .unwrap()\n        })\n    }\n\n    fn ensure<T: Default + 'static>(&self) {\n        if self.map.borrow().get(&TypeId::of::<T>()).is_none() {\n            self.insert(T::default());\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002\u4e3b\u8981\u7684\u533a\u522b\u662f\u4f60\u4e0d\u9700\u8981\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u5c31\u80fd\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"get_mut"),"\uff0c\u8fd9\u4e00\u58ee\u4e3e\u662f\u7531 ",(0,r.kt)("inlineCode",{parentName:"p"},"RefCell")," \u5b9e\u73b0\u7684\uff0cRefcell\n\u80fd\u591f\u5c06\u68c0\u67e5\u79fb\u52a8\u5230\u8fd0\u884c\u65f6\u3002\u5f53\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"RefMut")," \u88ab\u7ed9\u51fa\u65f6\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4efb\u4f55\u7684\u53ef\u53d8\u6216\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u5c31\u4f1a\u53d1\u751f\npanic\u3002\u5bf9\u4e8e\u8fd9\u91cc\u7684\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u53ef\u53d8\u7684\u5f15\u7528\u5728\u4f7f\u7528\u3002\u7279\u522b\u68d2\u7684\u662f\uff0cRef \u548c RefMut\n\u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u7684 map \u65b9\u6cd5\uff0c\u8ba9\u4f60\u53ef\u4ee5\u8f7b\u677e\u6d3e\u751f\u51fa\u53e6\u4e00\u4e2a Ref \u6216 RefMut\uff0c\u5e76\u4fdd\u6301\u539f\u6765\u7684\u5f15\u7528\uff0c\u4f46\u5bf9\u503c\u8fdb\u884c\u8f6c\u6362\u3002"),(0,r.kt)("h2",{id:"\u540c\u6b65\u652f\u6301"},"\u540c\u6b65\u652f\u6301"),(0,r.kt)("p",null,"\u5982\u679c\u6211\u4eec\u60f3\u8981\u7528 Send \u548c Sync \u6765\u5b9e\u73b0\u548c\u4e0a\u9762\u76f8\u540c\u7684\u6548\u679c\u5462\uff1f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u9501\u3002\u53ef\u60dc\u7684\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Mutex \u548c RwLock \u4e0d\u80fd\u8ba9\u4f60\u5728\u62ff\u5230\u9501\u7684\u540c\u65f6\nmap\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"parking_lot")," \u66ff\u4ee3\uff0c\u5b83\u5b9e\u73b0\u4e86\u5fc5\u8981\u7684\u4e00\u4e9b\u65b9\u6cd5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"use parking_lot::{\n    MappedRwLockReadGuard,\n    MappedRwLockWriteGuard,\n    RwLock,\n    RwLockReadGuard,\n    RwLockWriteGuard,\n};\nuse std::any::{Any, TypeId};\nuse std::collections::HashMap;\n\n#[derive(Default)]\npub struct Extensions {\n    map: RwLock<HashMap<TypeId, Box<dyn Any>>>,\n}\n\nimpl Extensions {\n    pub fn insert<T: Send + Sync + 'static>(&self, value: T) {\n        self.map.write().insert(TypeId::of::<T>(), Box::new(value));\n    }\n\n    pub fn get<T: Send + Sync + Default + 'static>(&self) -> MappedRwLockReadGuard<'_, T> {\n        self.ensure::<T>();\n        RwLockReadGuard::map(self.map.read(), |m| {\n            m.get(&TypeId::of::<T>())\n                .and_then(|b| b.downcast_ref())\n                .unwrap()\n        })\n    }\n\n    pub fn get_mut<T: Send + Sync + Default + 'static>(&self) -> MappedRwLockWriteGuard<'_, T> {\n        self.ensure::<T>();\n        RwLockWriteGuard::map(self.map.write(), |m| {\n            m.get_mut(&TypeId::of::<T>())\n                .and_then(|b| b.downcast_mut())\n                .unwrap()\n        })\n    }\n\n    fn ensure<T: Default + Send + Sync + 'static>(&self) {\n        if self.map.read().get(&TypeId::of::<T>()).is_none() {\n            self.insert(T::default());\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u6ce8\u610f\uff1a\u7531\u4e8e Any \u5e76\u6ca1\u6709\u5b9e\u73b0 Debug\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u4e3a\u6211\u4eec\u7684 map \u5b9e\u73b0 Debug \u7279\u5f81\uff0c\u4e00\u4e9b\u7b80\u5355\u7684\u6539\u53d8\u5e76\u4e0d\u80fd\u89e3\u51b3\u76ee\u524d\u7684\u95ee\u9898\u3002\u4e0b\u534a\u90e8\u5206\u6211\u4eec\u5c06\u4ecb\u7ecd\n",(0,r.kt)("inlineCode",{parentName:"p"},"as-any")," \u6a21\u5f0f"),(0,r.kt)("p",null,"\u6211\u4eec\u9762\u4e34\u7684\u6311\u6218\u662f\uff0c\u5728 Rust \u91cc\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<Any + Debug>"),"\uff0c\u7136\u800c\u8fd8\u662f\u6709\u4e00\u4e9b\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002"),(0,r.kt)("h2",{id:"\u4e3a-map-\u5b9e\u73b0-debug"},"\u4e3a map \u5b9e\u73b0 Debug"),(0,r.kt)("h3",{id:"\u7b80\u5316\u95ee\u9898"},"\u7b80\u5316\u95ee\u9898"),(0,r.kt)("p",null,"\u6211\u4eec\u7684\u76ee\u6807\u662f\u5bf9 ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<dyn Any>")," \u505a\u4e00\u4e2a\u5305\u88c5\uff0c\u5e76\u8ba9 Wrapper \u5b9e\u73b0 Debug\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"#[derive(Debug)]\nstruct AnyBox(Box<dyn Any + Debug>);\n")),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\uff0c\u7f16\u8bd1\u5668\u5e94\u8be5\u4f1a\u5f88\u4e0d\u9ad8\u5174\u7684\u629b\u51fa\u9519\u8bef\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"error[E0225]: only auto traits can be used as additional traits in a trait object\n --\x3e src/main.rs:9:29\n  |\n9 | struct AnyBox(Box<dyn Any + Debug>);\n  |                       ---   ^^^^^ additional non-auto trait\n  |                       |\n  |                       first non-auto trait\n  |\n  = help: consider creating a new trait with all of these as supertraits and\n    using that trait here instead: `trait NewTrait: Any + Debug {}`\n")),(0,r.kt)("h3",{id:"\u8d85\u7ea7\u7279\u5f81"},"\u8d85\u7ea7\u7279\u5f81"),(0,r.kt)("p",null,"\u5e78\u8fd0\u7684\u662f\uff0c\u7f16\u8bd1\u5668\u518d\u6b21\u4e3a\u6211\u4eec\u6307\u660e\u4e86\u89e3\u51b3\u4e4b\u9053\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7236\u7279\u5f81\uff0c\u5e76\u5229\u7528\u7279\u5f81\u7ea6\u675f\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e3a\u6240\u6709\u5b9e\u73b0\u4e86 Any \u548c Debug\n\u7684\u7c7b\u578b\u5b9e\u73b0\u6211\u4eec\u7684\u8d85\u7ea7\u7279\u5f81\u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"#[derive(Debug)]\nstruct AnyBox(Box<dyn DebugAny>);\n\ntrait DebugAny: Any + Debug {}\n\nimpl<T: Any + Debug + 'static> DebugAny for T {}\n")),(0,r.kt)("p",null,"\u4f60\u53ef\u4ee5\u60f3\u8fd9\u6837\u6784\u5efa\u4e00\u4e2a Box\uff0c\u4f46\u662f\u771f\u6b63\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u7684\u662f\u5411\u4e0b\u8f6c\u578b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    let any_box = AnyBox(Box::new(42i32));\n    dbg!(any_box.0.downcast_ref::<i32>());\n}\n")),(0,r.kt)("p",null,"\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\uff0cAnyBox \u4e2d\u7684\u503c\u5e76\u6ca1\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"downcast_ref")," \u65b9\u6cd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"error[E0599]: no method named `downcast_ref` found for struct\n  `Box<(dyn DebugAny + 'static)>` in the current scope\n  --\x3e src/main.rs:15:20\n   |\n15 |     dbg!(any_box.0.downcast_ref::<i32>());\n   |                    ^^^^^^^^^^^^ method not found in `Box<(dyn DebugAny + 'static)>`\n")),(0,r.kt)("p",null,"\u539f\u56e0\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<dyn DebugAny>")," \u5e76\u4e0d\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<dyn Any>"),"\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u90a3\u91cc\u5f97\u5230 Any\n\u7279\u5f81\u62e5\u6709\u7684\u65b9\u6cd5\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f ",(0,r.kt)("strong",{parentName:"p"},'"as any"')," \u6a21\u5f0f\uff0c\u6211\u4eec\u5728\u6211\u4eec\u7684 DebugAny\n\u7279\u5f81\u4e0a\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c06\u5176\u5411\u4e0a\u8f6c\u6362\u4e3a\u4e00\u4e2a Any\u3002\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"trait DebugAny: Any + Debug {\n    fn as_any(&self) -> &dyn Any;\n    fn as_any_mut(&mut self) -> &mut dyn Any;\n}\n\nimpl<T: Any + Debug + 'static> DebugAny for T {\n    fn as_any(&self) -> &dyn Any { self }\n    fn as_any_mut(&mut self) -> &mut dyn Any { self }\n}\n")),(0,r.kt)("p",null,"\u73b0\u5728\u867d\u7136\u6211\u4eec\u4f9d\u7136\u4e0d\u80fd\u5728 DebugAny \u4e0a\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"downcast_ref"),"\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u62ff\u8d70\u5b83\u7684\u503c\uff0c\u5e76\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"as_any")," \u5f97\u5230\u4e00\u4e2a\n",(0,r.kt)("inlineCode",{parentName:"p"},"&dyn Any"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    let any_box = AnyBox(Box::new(42i32));\n    dbg!(any_box.0.as_any().downcast_ref::<i32>());\n    dbg!(&any_box);\n}\n")),(0,r.kt)("p",null,"\u4f46\u662f\u5f53\u6211\u4eec\u8fd0\u884c\u540e\uff0c\u5374\u5f97\u5230\u4e86\u4e00\u4e2a None\u3002\u53d1\u751f\u4ec0\u4e48\u4e8b\u4e86\uff1f\uff1f\uff1f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"[src/main.rs:23] any_box.0.as_any().downcast_ref::<i32>() = None\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u8c1c\u9898\u7684\u7b54\u6848\u4e0e\u65b9\u6cd5\u89e3\u6790\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u7a7a\u767d\u5b9e\u73b0\u6709\u5173\u3002\u5f53\u6211\u4eec\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<dyn DebugAny>")," \u4e0a\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"as_any")," \u65f6\uff0cBox\n\u5e76\u6ca1\u6709\u53d1\u751f\u81ea\u52a8\u89e3\u5f15\u7528\uff0c\u4e8b\u5b9e\u4e0a\u8c03\u7528\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Box<dyn DebugAny>")," \u7684 as_any\uff0c\u56e0\u4e3a Box \u73b0\u5728\u4e5f\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\nDebugAny\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u7a7f\u8fc7\u8fd9\u4e2a Box \u5462\uff1f\u901a\u8fc7\u624b\u52a8\u89e3\u5f15\u7528\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    let any_box = AnyBox(Box::new(42i32));\n    dbg!((*any_box.0).as_any().downcast_ref::<i32>());\n    dbg!(&any_box);\n}\n")),(0,r.kt)("p",null,"\u8fd9\u6837\u5c31\u662f\u6211\u4eec\u9884\u671f\u7684\u503c\u4e86"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"[src/main.rs:23] (*any_box.0).as_any().downcast_ref::<i32>() = Some(\n    42,\n)\n[src/main.rs:24] &any_box = AnyBox(\n    42,\n)\n")),(0,r.kt)("h2",{id:"\u53ef\u8c03\u8bd5\u7684-extension-map"},"\u53ef\u8c03\u8bd5\u7684 Extension Map"),(0,r.kt)("p",null,"\u6709\u4e86\u4e0a\u9762\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u62ff\u51fa\u4e4b\u524d\u7684\u975e\u540c\u6b65 map\uff0c\u7a0d\u52a0\u6539\u9020\u5c31\u80fd\u4e3a\u5176\u5b9e\u73b0 Debug\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"use std::any::{Any, TypeId};\nuse std::cell::{Ref, RefCell, RefMut};\nuse std::collections::HashMap;\nuse std::fmt::Debug;\n\ntrait DebugAny: Any + Debug {\n    fn as_any(&self) -> &dyn Any;\n    fn as_any_mut(&mut self) -> &mut dyn Any;\n}\n\nimpl<T: Any + Debug + 'static> DebugAny for T {\n    fn as_any(&self) -> &dyn Any { self }\n    fn as_any_mut(&mut self) -> &mut dyn Any { self }\n}\n\n#[derive(Default, Debug)]\npub struct Extensions {\n    map: RefCell<HashMap<TypeId, Box<dyn DebugAny>>>,\n}\n\nimpl Extensions {\n    pub fn insert<T: Debug + 'static>(&self, value: T) {\n        self.map\n            .borrow_mut()\n            .insert(TypeId::of::<T>(), Box::new(value));\n    }\n\n    pub fn get<T: Default + Debug + 'static>(&self) -> Ref<'_, T> {\n        self.ensure::<T>();\n        Ref::map(self.map.borrow(), |m| {\n            m.get(&TypeId::of::<T>())\n                .and_then(|b| (**b).as_any().downcast_ref())\n                .unwrap()\n        })\n    }\n\n    pub fn get_mut<T: Default + Debug + 'static>(&self) -> RefMut<'_, T> {\n        self.ensure::<T>();\n        RefMut::map(self.map.borrow_mut(), |m| {\n            m.get_mut(&TypeId::of::<T>())\n                .and_then(|b| (**b).as_any_mut().downcast_mut())\n                .unwrap()\n        })\n    }\n\n    fn ensure<T: Default + Debug + 'static>(&self) {\n        if self.map.borrow().get(&TypeId::of::<T>()).is_none() {\n            self.insert(T::default());\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u5411 map \u91cc\u9762\u6dfb\u52a0\u70b9\u4e1c\u897f\uff0c\u6253\u5370\u4e00\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"[src/main.rs:63] &extensions = Extensions {\n    map: RefCell {\n        value: {\n            TypeId {\n                t: 13431306602944299956,\n            }: 42,\n        },\n    },\n}\n")),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u5728 map \u4e2d\u653e\u7f6e\u4e86\u4e00\u4e2a 32 \u4f4d\u7684\u6574\u6570 42\uff0c\u5b83\u6253\u5370\u51fa\u4e86\u4f5c\u4e3a\u952e\u7684 TypeId\uff0c\u548c\u4f5c\u4e3a\u503c\u7684 42\u3002"),(0,r.kt)("h2",{id:"\u4fdd\u7559\u7c7b\u578b\u540d\u79f0"},"\u4fdd\u7559\u7c7b\u578b\u540d\u79f0"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u4fdd\u7559\u539f\u6765\u7684\u7c7b\u578b\u540d\u79f0\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u7684 ID\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u4f5c\u4e3a map \u7684\u952e\u3002\u901a\u8fc7\u5bf9 TypeId \u548c TypeName\n\u505a\u4e00\u6b21\u7b80\u5355\u7684\u5305\u88c5\u5c31\u80fd\u8f7b\u677e\u5b9e\u73b0\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"use std::any::{TypeId, type_name};\nuse std::hash::{Hash, Hasher};\nuse std::fmt::{self, Debug};\n\npub struct TypeKey(TypeId, &'static str);\n\nimpl TypeKey {\n    pub fn of<T: 'static>() -> TypeKey {\n        TypeKey(TypeId::of::<T>(), type_name::<T>())\n    }\n}\n\nimpl Hash for TypeKey {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        self.0.hash(state);\n    }\n}\n\nimpl PartialEq for TypeKey {\n    fn eq(&self, other: &Self) -> bool {\n        self.0 == other.0\n    }\n}\n\nimpl Eq for TypeKey {}\n\nimpl Debug for TypeKey {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"{}\", self.1)\n    }\n}\n")),(0,r.kt)("p",null,"\u63a5\u7740\u7528\u5b83\u66ff\u6362\u6389\u539f\u6765\u7684\u952e\uff0c\u8c03\u8bd5\u4e00\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"[src/main.rs:90] &extensions = Extensions {\n    map: RefCell {\n        value: {\n            i32: 42,\n            alloc::vec::Vec<i32>: [\n                1,\n                2,\n                3,\n            ],\n        },\n    },\n}\n")),(0,r.kt)("p",null,"\u6ce8\u610f\uff0c\u6211\u5728 map \u4e2d\u989d\u5916\u63d2\u5165\u4e86\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec<i32>"),"\uff0c\u4ee5\u83b7\u5f97\u66f4\u660e\u663e\u7684\u8f93\u51fa\u3002"))}m.isMDXComponent=!0}}]);