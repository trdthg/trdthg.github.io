"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[9186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=l.createContext({}),p=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return l.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(i,".").concat(d)]||m[d]||c[d]||a;return n?l.createElement(g,o(o({ref:t},s),{},{components:n})):l.createElement(g,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var p=2;p<a;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>p});var l=n(7462),r=(n(7294),n(3905));const a={},o="\u534f\u7a0b\u4e0e\u5f02\u6b65",u={unversionedId:"magic/async",id:"magic/async",title:"\u534f\u7a0b\u4e0e\u5f02\u6b65",description:"\u534f\u7a0b",source:"@site/docs/magic/async.md",sourceDirName:"magic",slug:"/magic/async",permalink:"/docs/magic/async",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u65e5\u5fd7",permalink:"/docs/log"},next:{title:"CI/CD",permalink:"/docs/magic/cicd"}},i={},p=[{value:"\u534f\u7a0b",id:"\u534f\u7a0b",level:2},{value:"Rust \u5f02\u6b65\u539f\u7406",id:"rust-\u5f02\u6b65\u539f\u7406",level:2},{value:"Future \u7279\u5f81",id:"future-\u7279\u5f81",level:3},{value:"\u7f16\u8bd1\u5f02\u6b65\u4ee3\u7801\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48",id:"\u7f16\u8bd1\u5f02\u6b65\u4ee3\u7801\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48",level:3},{value:"\u72b6\u6001\u673a",id:"\u72b6\u6001\u673a",level:3},{value:"Unpolled",id:"unpolled",level:4},{value:"GettingRow",id:"gettingrow",level:4},{value:"Writing",id:"writing",level:4},{value:"Ready",id:"ready",level:4},{value:"\u4f7f\u7528 enum \u8282\u7701\u5185\u5b58",id:"\u4f7f\u7528-enum-\u8282\u7701\u5185\u5b58",level:3},{value:"\u6027\u80fd",id:"\u6027\u80fd",level:3},{value:"drop",id:"drop",level:4},{value:"\u5927\u6570\u636e",id:"\u5927\u6570\u636e",level:4}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u534f\u7a0b\u4e0e\u5f02\u6b65"},"\u534f\u7a0b\u4e0e\u5f02\u6b65"),(0,r.kt)("h2",{id:"\u534f\u7a0b"},"\u534f\u7a0b"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/xiaobing94/coroutine"},"C \u8bed\u8a00\u534f\u7a0b\u7684\u7b80\u5355\u5b9e\u73b0")),(0,r.kt)("p",null,"linux\n\u4e0b\u5728\u5934\u6587\u4ef6",(0,r.kt)("inlineCode",{parentName:"p"},"ucontext.h"),"\u63d0\u4f9b\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"getcontext(),setcontext(),makecontext(),swapcontext()"),"\u56db\u4e2a\u51fd\u6570\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"mcontext_t \u548c ucontext_t"),"\u7ed3\u6784\u4f53\u3002"),(0,r.kt)("p",null,"\u8fd9 4 \u4e2a\u51fd\u6570\u80fd\u591f\u5b9e\u73b0\u4fdd\u5b58\uff0c\u83b7\u53d6\uff0c\u8bbe\u7f6e\uff0c\u5207\u6362\u4e0a\u4e0b\u6587\uff0c\u662f\u534f\u7a0b\u5b9e\u73b0\u7684\u6838\u5fc3\uff0c\u4e5f\u662f yield \u7684\u6838\u5fc3"),(0,r.kt)("p",null,"\u7ed3\u6784\u4f53\u5219\u4fdd\u7559\u4e86\u534f\u7a0b\u7684 id\uff0c\u8fd0\u884c\u5806\u6808\u7b49\u4fe1\u606f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u4e0d\u540c\u534f\u7a0b\u4fdd\u5b58\u5728\u961f\u5217\u4e2d\uff0c\u7531\u4e00\u4e2a\u8c03\u5ea6\u5668\u8fdb\u884c\u63a8\u8fdb\u5404\u4e2a\u534f\u7a0b")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u8c03\u5ea6\u5668\u4f1a\u4f9d\u6b21\u6267\u884c\u6bcf\u4e2a\u534f\u7a0b\uff0c\u6bcf\u5f53\u67d0\u4e00\u4e2a\u534f\u7a0b\u8fdb\u884c\u4e86 yield \u64cd\u4f5c (",(0,r.kt)("inlineCode",{parentName:"p"},"swapcontext()"),"), \u8c03\u5ea6\u5668\u5c31\u4f1a\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u534f\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u7ee7\u7eed\u63a8\u8fdb")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f53\u6240\u6709\u534f\u7a0b\u90fd\u6267\u884c\u5b8c\u6210\uff0c\u5c31\u7ed3\u675f"))),(0,r.kt)("p",null,"\u4e0b\u9762\u7684\u56fe\u7247\u662f\u9605\u8bfb\u4e86\u4e0a\u9762\u4ee3\u7801\u540e\u7684\u6574\u7406\n",(0,r.kt)("img",{parentName:"p",src:"https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202203262211252.png",alt:null})),(0,r.kt)("h2",{id:"rust-\u5f02\u6b65\u539f\u7406"},"Rust \u5f02\u6b65\u539f\u7406"),(0,r.kt)("h3",{id:"future-\u7279\u5f81"},"Future \u7279\u5f81"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"trait Future {\n    type Output;\n    fn poll(self: Pin<&mut Self>, cx: &mut Context)\n        -> Poll<Self::Output>;\n}\n\nenum Poll<T> {\n    Pending,\n    Ready(T),\n}\n")),(0,r.kt)("h3",{id:"\u7f16\u8bd1\u5f02\u6b65\u4ee3\u7801\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48"},"\u7f16\u8bd1\u5f02\u6b65\u4ee3\u7801\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48"),(0,r.kt)("p",null,"\u4e0b\u9762\u662f\u4e00\u6bb5\u5f02\u6b65\u4ee3\u7801\uff0c\u5b83\u5411 server \u5f02\u6b65\u8bf7\u6c42\u4e86\u4e00\u6bb5\u6570\u636e\uff0c\u63a5\u7740\u628a\u7ed3\u679c\u8fdb\u884c\u683c\u5f0f\u8f6c\u6362\uff0c\u6700\u540e\u5c06\u6570\u636e\u901a\u8fc7 stream \u5f02\u6b65\u53d1\u9001\u51fa\u53bb\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"async fn handle_request(\n    server: &RpcServer,\n    mut stream: TcpStream,\n    id: i32,\n) -> impl Future<Output = ()> {\n    let row = get_row(&server, id).await;\n\n    let encoded = json::encode(&row);\n\n    stream.write_all(encoded.as_bytes()).await;\n}\n")),(0,r.kt)("p",null,"\u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e3a\u8fd9\u4e2a\u5f02\u6b65\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u80fd\u591f\u8868\u73b0\u5f53\u524d\u5f02\u6b65\u64cd\u4f5c\u7684\u72b6\u6001\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"struct RequestHandler {\n    server: &RpcServer,\n    stream: TcpStream,\n    id: i32,\n}\n")),(0,r.kt)("p",null,"\u63a5\u7740\u9700\u8981\u4e3a\u5b83\u5b9e\u73b0 Future \u7279\u5f81"),(0,r.kt)("p",null,"\u5728 poll \u65b9\u6cd5\u5185\u90e8\u5c31\u662f\u4e00\u4e2a\u72b6\u6001\u673a\uff0c\u6bcf\u6b21\u8c03\u7528 poll \u5c31\u4f1a\u5c1d\u8bd5\u63a8\u8fdb\u5f02\u6b65\u4efb\u52a1\uff0c\u5e76\u6839\u636e\u72b6\u6001\u4f5c\u51fa\u5bf9\u5e94\u7684\u6d3b\u52a8"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"impl Future for RequestHandler {\n    type Output = ();\n    fn poll(&mut self, cx: &mut Context) -> Pool<()> {\n        loop {\n            match self.state {\n                ...\n            }\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"\u72b6\u6001\u673a"},"\u72b6\u6001\u673a"),(0,r.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u8981\u4e3a\u5b83\u624b\u52a8\u7f16\u5199\u4e00\u4e2a\u72b6\u6001\u673a"),(0,r.kt)("p",null,"\u9996\u5148\u4e3a\u4e86\u80fd\u591f\u8ddf\u8e2a\u8bf7\u6c42\u7684\u72b6\u6001\uff0c\u6211\u4eec\u8981\u4e3a\u7ed3\u6784\u4f53\u6dfb\u52a0\u4e00\u4e2a state \u5b57\u6bb5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"struct RequestHandler {\n    ...\n    state: RHState\n}\n")),(0,r.kt)("p",null,"\u63a5\u7740 match \u72b6\u6001\uff0c\u5e76\u6267\u884c\u5bf9\u5e94\u7684\u884c\u4e3a\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e00\u4e2a\u72b6\u6001\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"Unpolled"),"\uff0c\u6b64\u65f6\u8fd9\u4e2a\u5f02\u6b65\u51fd\u6570\u8fd8\u6ca1\u6709\u88ab poll \u8fc7\uff0c\u5b83\u8981\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c"),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e8c\u4e2a\u72b6\u6001\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"GettingRow"),"\uff0c\u6211\u4eec\u7b49\u5f85\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u6570\u636e"),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e09\u4e2a\u72b6\u6001\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"Writing"),"\uff0c\u7b49\u5f85\u5199\u5165 tcpstream"),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u56db\u4e2a\u72b6\u6001\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"Ready"),"\uff0c\u5b8c\u6210\u5e76\u51c6\u5907\u8fd4\u56de\u7ed3\u679c")),(0,r.kt)("h4",{id:"unpolled"},"Unpolled"),(0,r.kt)("p",null,"\u6211\u4eec\u9996\u5148\u8c03\u7528 get_row \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5f02\u6b65\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a future \u5bf9\u8c61\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"match self.state {\n    Unpolled => {\n        self.row_fut = Some(get_row(&self.server, self.id));\n        self.state = GettingRow\n    }\n}\n")),(0,r.kt)("p",null,"\u540c\u65f6\u6211\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5\u4fdd\u5b58\u8fd9\u4e2a future"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"struct RequestHandler {\n    ...\n    row_fut: Option<RowGet>,\n}\n")),(0,r.kt)("h4",{id:"gettingrow"},"GettingRow"),(0,r.kt)("p",null,"\u7b2c\u4e8c\u9636\u6bb5\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u5c1d\u8bd5\u63a8\u8fdb\u5f02\u6b65\u4efb\u52a1\uff0c\u5982\u679c\u4efb\u52a1\u5b8c\u6210\u7684\u8bdd\u5c31\u628a\u9700\u8981\u7684\u53d8\u91cf\u8d4b\u503c\u5230\u7ed3\u6784\u4f53\uff0c\u5e76\u521d\u59cb\u5316\u4e0b\u4e00\u4e2a future \u4efb\u52a1\uff0c\u63a8\u8fdb\u72b6\u6001\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"match self.state {\n    ...\n    GettingRow => {\n        match self.row_fut.unwrap().poll(cx) {\n            Poll::Pending => return Poll::Pending,\n            Poll::Ready(row) => {\n                self.row_fut = None;\n                self.encoded = json::encode(row);\n                self.write_fut = Some(self.stream.write_all(\n                    self.encoded.as_bytes()));\n                self.state = Writing;\n            }\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u7ed3\u6784\u4f53\u9700\u8981\u6dfb\u52a0 encoded \u5b57\u6bb5\uff0c\u548c\u4e0b\u4e00\u4e2a future \u4efb\u52a1\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"struct RequestHandler {\n    ...\n    encoded: String,\n    write_fut: Option<WriteAll>,\n}\n")),(0,r.kt)("h4",{id:"writing"},"Writing"),(0,r.kt)("p",null,"\u7b2c\u4e09\u9636\u6bb5\u4efb\u52a1\u5f88\u7b80\u5355\uff0c\u5982\u679c\u5199\u5165\u5b8c\u6210\u5c31\u63a8\u8fdb\u72b6\u6001\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"match self.state {\n    ...\n    Writing => {\n        match self.row_fut.unwrap().poll(cx) {\n            Poll::Pending => return Poll::Pending,\n            Poll::Ready(_) => self.state = Ready,\n        }\n    }\n}\n")),(0,r.kt)("h4",{id:"ready"},"Ready"),(0,r.kt)("p",null,"\u6700\u540e\u5c31\u8fd4\u56de\u5f02\u6b65\u51fd\u6570\u771f\u6b63\u7684\u7684\u8fd0\u884c\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"match self.state {\n    ...\n    Ready => return Poll::Ready(())\n}\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204110021532.png",alt:null})),(0,r.kt)("h3",{id:"\u4f7f\u7528-enum-\u8282\u7701\u5185\u5b58"},"\u4f7f\u7528 enum \u8282\u7701\u5185\u5b58"),(0,r.kt)("p",null,"\u4f7f\u7528 struct \u4fdd\u5b58\u5f02\u6b65\u4efb\u52a1\u65f6\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4e3a\u6240\u6709\u53d8\u91cf\u548c\u5f02\u6b65\u4efb\u52a1\u90fd\u63d0\u524d\u5206\u914d\u597d\u5185\u5b58\u3002"),(0,r.kt)("p",null,"\u4e0b\u56fe\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5185\u5b58\u5e03\u5c40\n",(0,r.kt)("img",{parentName:"p",src:"https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204110022570.png",alt:null}),"\n\u5982\u679c\u4e24\u4e2a\u5f02\u6b65\u4efb\u52a1\u4e0d\u4f1a\u540c\u65f6\u8fd0\u884c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u9636\u6bb5\u7684\u5f02\u6b65\u4efb\u52a1\u5e94\u8be5\u80fd\u591f\u590d\u7528\u540c\u4e00\u5757\u5185\u5b58\uff0c\u5c31\u50cf\u4e0b\u56fe\u91cc\u90a3\u6837\uff1a\n",(0,r.kt)("img",{parentName:"p",src:"https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204110025475.png",alt:null}),"\n\u5047\u8bbe\u5f02\u6b65\u4efb\u52a1\u91cc\u9762\u8fd8\u5d4c\u5957\u7740\u5176\u4ed6\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u5d4c\u5957\u5c42\u7ea7\u8d8a\u6df1\uff0c\u5185\u5b58\u5360\u7528\u5c31\u8d8a\u5927"),(0,r.kt)("h3",{id:"\u6027\u80fd"},"\u6027\u80fd"),(0,r.kt)("h4",{id:"drop"},"drop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},'async fn do_stuff(context: Arc<Context>) {\n    info!("running foo with context {}", context);\n    foo().await;\n} // <- std::mem::drop(context);\n')),(0,r.kt)("p",null,"\u5bf9\u4e8e\u4e0a\u9762\u7684\u5f02\u6b65\u51fd\u6570\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6027\u80fd\u95ee\u9898\uff0c\u6bcf\u5f53\u4e00\u4e2a\u53d8\u91cf\u8d85\u51fa\u4f5c\u7528\u57df\u65f6\uff0cRust \u90fd\u4f1a\u9690\u5f0f\u7684\u5728\u51fd\u6570\u672b\u5c3e\u63d2\u5165 drop\uff0c\u6240\u4ee5\u76f4\u5230\u51fd\u6570\u8fd0\u884c\u7ed3\u675f context\n\u53d8\u91cf\u624d\u4f1a\u88ab\u91ca\u653e\u3002\u4f46\u662f\u6211\u4eec\u5728\u6253\u5b8c\u65e5\u5fd7\u4e4b\u540e\u5c31\u4e0d\u9700\u8981 context \u4e86\uff0c\u6ca1\u5fc5\u8981\u7b49\u5230 foo \u6267\u884c\u5b8c\u5728\u91ca\u653e\u6389 context"),(0,r.kt)("p",null,"\u5176\u4e2d\u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u65f6\u5c06 context \u79fb\u52a8\u5230\u51fd\u6570\u7684\u5185\u90e8\u4f5c\u7528\u57df\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},'async fn do_stuff(context: Arc<Context>) {\n    {\n        let context = context;\n        info!("running foo with context {}", context);\n    } // <- std::mem::drop(context);\n    foo().await;\n}\n')),(0,r.kt)("p",null,"drop \u4f1a\u88ab\u79fb\u52a8\u5230\u5185\u90e8\u4f5c\u7528\u57df\u7684\u672b\u5c3e\uff0c\u4f46\u662f\u8fd9\u6837\u4f9d\u7136\u4e0d\u5b8c\u7f8e\u3002future \u5728\u88ab poll \u4e4b\u524d\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u505a\uff0c\u51fd\u6570\u5f00\u59cb\u7684\u4efb\u4f55\u4e00\u884c\u90fd\u4e0d\u4f1a\u6267\u884c\uff0c\u6240\u4ee5\u5728\u6ca1\u6709 poll\n\u65f6\u6211\u4eec\u8fd8\u662f\u4e00\u53ea\u6301\u6709\u7740 context \u53d8\u91cf\u3002"),(0,r.kt)("p",null,"\u89e3\u51b3\u95ee\u9898\u7684\u6700\u597d\u529e\u6cd5\u5b9e\u9645\u4e0a\u662f\u8131\u7cd6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},'fn do_stuff(context: Arc<Context>) -> impl Future<Output = ()> {\n    info!("running foo with context {}", context);\n    async {\n        foo().await;\n    }\n}\n')),(0,r.kt)("p",null,"\u8fd9\u6837 context \u6839\u672c\u5c31\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u5728\u6211\u4eec\u7684\u72b6\u6001\u673a\u91cc\uff0c\u6211\u4eec\u4e5f\u6c38\u8fdc\u4e0d\u4f1a\u6301\u6709\u5bf9 context \u7684\u5f15\u7528"),(0,r.kt)("h4",{id:"\u5927\u6570\u636e"},"\u5927\u6570\u636e"),(0,r.kt)("p",null,"\u53e6\u4e00\u4e2a\u6ce8\u610f\u7684\u70b9\u662f\uff0c\u5f53\u4f60\u5728 await \u4e00\u4e2a\u975e\u5e38\u5927\u7684\u4e34\u65f6\u53d8\u91cf\u6216\u8005\u8868\u8fbe\u5f0f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},'struct Big([u8; 1024]);\n\nimpl Drop for Big { /* print "GOODBYE" */ }\n\nasync fn foo(x: usize) -> usize { /* ... */ }\n\nasync fn bar() -> usize {\n    let result = foo(Big::new().0.len()).await;\n    result\n}\n')),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u5c1d\u8bd5\u6253\u5370 bar \u7684\u5927\u5c0f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    dng!(std::mem::size_of_val(&bar())); // 1024\n}\n")),(0,r.kt)("p",null,"\u7ed3\u679c\u4f1a\u975e\u5e38\u5927\uff0c\u90a3\u662f\u56e0\u4e3a Rust \u4f1a\u5728\u72b6\u6001\u673a\u91cc\u63d2\u5165 Big \u7684\u526f\u672c\u3002\u539f\u56e0\u662f \u53ea\u8981\u4f60\u5728\u8bed\u53e5\u4e2d\u521b\u5efa\u4e34\u65f6\u53d8\u91cf\uff0c\u90fd\u4f1a\u5728\u8bed\u53e5\u7684\u6700\u540e\u8c03\u7528\u8be5\u4e34\u65f6\u53d8\u91cf\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"drop"),"\n\u51fd\u6570\u3002\u56e0\u6b64\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},".await")," \u8fd0\u884c\u540e\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"drop")," \u51fd\u6570\u91cc\u7684\u6253\u5370\u4f1a\u6267\u884c\u3002"),(0,r.kt)("p",null,"\u5f02\u6b65\u51fd\u6570\u91cc\u7684\u4e34\u65f6\u53d8\u91cf\u90fd\u4f1a\u5b58\u6d3b\u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},".await")," \u4e4b\u540e\u3002"),(0,r.kt)("p",null,"\u89e3\u51b3\u65b9\u6cd5\uff1a\u8ba9\u83b7\u53d6 len \u548c \u8c03\u7528 foo \u65b9\u6cd5\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u5206\u53f7"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"async fn bar() -> usize {\n    let len = Big::new().0.len();\n    let result = foo(len).await;\n    result\n}\n")),(0,r.kt)("p",null,"\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"async fn bar() -> usize {\n    let fut = foo(Big::new().0.len());\n    let result = fut.await;\n    result\n}\n")),(0,r.kt)("p",null,"\u56e0\u4e3a\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5728\u72b6\u6001\u673a\u4e2d\u4fdd\u5b58 Big \u7684\u526f\u672c\uff0c\u6240\u4ee5\u73b0\u5728 bar \u5c31\u5c0f\u7684\u591a\u4e86\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    dng!(std::mem::size_of_val(&bar())); // 24\n}\n")),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u6ca1\u6709\u4e3a Big \u5b9e\u73b0 Drop\uff0c\u7f16\u8bd1\u5668\u5e94\u8be5\u4e3a\u6b64\u505a\u51fa\u4e00\u4e9b\u4f18\u5316\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u73b0\u5728\u4e0d\u8c08"))}c.isMDXComponent=!0}}]);