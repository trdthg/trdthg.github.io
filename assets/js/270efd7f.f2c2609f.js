"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[9444],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,d=c["".concat(l,".").concat(h)]||c[h]||m[h]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2224:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Rust Quiz#1",s={permalink:"/blog/draft/rust-quiz/01",source:"@site/blog/draft/rust-quiz/01.md",title:"Rust Quiz#1",description:"\u9898\u76ee",date:"2022-10-21T08:15:00.000Z",formattedDate:"2022\u5e7410\u670821\u65e5",tags:[],readingTime:6.445,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"\u8ba1\u7b97\u673a\u7f51\u7edc",permalink:"/blog/draft/\u8ba1\u7b97\u673a\u7f51\u7edc"},nextItem:{title:"[\u8bd1] \u53ef\u89c6\u5316 Rust \u5404\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u5e03\u5c40",permalink:"/blog/2022/05/04/[\u8bd1] \u53ef\u89c6\u5316 Rust \u5404\u6570\u636e\u7c7b\u578b\u7684\u5185\u5b58\u5e03\u5c40"}},l={authorsImageUrls:[]},p=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u89e3\u7b54",id:"\u89e3\u7b54",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u4e0b\u9762\u7684 1 \u8f93\u51fa\u662f\u4ec0\u4e48\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'macro_rules! m {\n    ($( $s:stmt )*) => {\n        $(\n            { stringify!($s); 1 }\n        )<<*\n    };\n}\n\nfn main() {\n    print!(\n        "{}{}{}",\n        m! { return || true },\n        m! { (return) || true },\n        m! { {return} || true },\n    );\n}\n')),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The program exhibits undefined behavior"),(0,a.kt)("li",{parentName:"ol"},"The program does not compile"),(0,a.kt)("li",{parentName:"ol"},"The program is guaranteed to output: ","[ ]")),(0,a.kt)("h2",{id:"\u89e3\u7b54"},"\u89e3\u7b54"),(0,a.kt)("p",null,"122"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u56f4\u7ed5\u7740 Rust \u7684\u8bed\u6cd5\u8fb9\u754c\u8bbe\u8ba1\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This question revolves around where the Rust grammar places statement\nboundaries.")),(0,a.kt)("p",null,"\u5b8f\u7684\u8f93\u5165\u89c4\u5219\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"$( $s:stmt )*"),", \u5b83\u80fd\u591f\u5339\u914d\u5230 0 \u6216\u591a\u4e2a Rust \u8bed\u53e5\u3002\u8be5\u89c4\u5219\u5185\u90e8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"$s: stmt"),"\n\u662f\u4e00\u4e2a\u7247\u6bb5\u5206\u7c7b\u7b26\uff0c\u5b83\u80fd\u591f\u5339\u914d\u5230\u4e00\u4e2a\u7b26\u5408 Rust \u8bed\u6cd5\u89c4\u8303\u7684\u8868\u8fbe\u5f0f\u3002\u88ab\u5339\u914d\u5230\u7684\u8bed\u53e5\u53ef\u4ee5\u5728\u5c55\u5f00\u540e\u7684\u4ee3\u7801\u4e2d\u4f5c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"$s")," \u3002\u800c\u5916\u90e8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)*"),"\n\u90e8\u5206\u8868\u793a\u4e00\u4e2a\u91cd\u590d\uff0c\u5b83\u53ef\u4ee5\u91cd\u590d\u5339\u914d 0 \u6216\u591a\u6b21\u5185\u5bb9\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The input rule of the macro m! is $($s:stmt)",(0,a.kt)("em",{parentName:"p"}," which matches zero or more Rust\nstatements. The $(...)")," part of the rule is a repetition which matches the\ncontents of the repetition zero or more times, and the $s:stmt is a fragment\nspecifier that matches a Rust statement (stmt) conforming to the rules of the\nRust grammar. The matched statements are available within the expanded code as\nthe fragment variable $s.")),(0,a.kt)("p",null,"\u8bed\u53e5\u662f\u51fd\u6570\u4f53\u4e2d\u5141\u8bb8\u7684\u6700\u9ad8\u7ea7\u522b\u7684\u8bed\u6cd5\u5355\u4f4d\u3002\u4e0b\u9762\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u8bed\u53e5\u7684\u4f8b\u5b50\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A statement is the top-level unit of syntax permitted within a function body.\nAll of the following are examples of statements.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// Items are statements.\nstruct S { x: u64 }\n\n// Let-bindings are statements.\nlet mut s = S { x: 1 }\n\n// Expressions are statements.\ns.x + 1\n")),(0,a.kt)("p",null,"\u51fd\u6570\u4f53\u7684\u8bed\u6cd5\u8981\u6c42\u67d0\u4e9b\u7c7b\u578b\u7684\u8bed\u53e5\u540e\u9762\u6709\u4e00\u4e2a\u5206\u53f7\uff0c\u4f46\u5bf9\u4e8e\u5b8f\u7684\u8bed\u6cd5\u800c\u8a00\uff0c\u5206\u53f7\u5e76\u4e0d\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The grammar of function bodies requires that some types of statements are\nfollowed by a semicolon, but the semicolon is not part of the statement for\nthe purpose of macro syntax.")),(0,a.kt)("p",null,"m! \u5c06\u4f1a\u5c55\u5f00\u4e3a 0 \u6216\u591a\u4e2a\u7531 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u5206\u5272\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }"),"\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)<<*")," \u90e8\u5206\u8868\u793a\u91cd\u590d\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<"),"\n\u4f5c\u4e3a\u5206\u9694\u7b26"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The macro m! expands to zero or more copies of ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }"),"\nseparated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," token. The ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...)<<*")," part of the rule is a repetition\nusing ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," as the separator.")),(0,a.kt)("p",null,"\u5728\u5b8f\u4e2d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," \u4f5c\u4e3a\u5206\u9694\u7b26\u975e\u5e38\u4e0d\u5e38\u89c1\u3002\u6700\u5e38\u7528\u7684\u5206\u9694\u7b26\u662f\u9017\u53f7\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"$(...),*"),"\uff0c\u5176\u4ed6\u7684\u5355\u4e00\u7b26\u53f7\u4e5f\u662f\u5141\u8bb8\u7684\u3002\u91cd\u8981\u7684\u662f\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"macro_rules!")," \u628a\u6240\u6709\u7684 Rust \u5185\u7f6e\u64cd\u4f5c\u7b26\u90fd\u5f53\u6210\u5355 token"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," as a separator in a repetition in a macro is highly unusual. The\nmost commmonly used separator is the comma, written as ",(0,a.kt)("inlineCode",{parentName:"p"},"$(...),*"),", but any\nother single token is allowed here. Crucially, macro_rules! treats all\nbuilt-in Rust operators as single tokens, even those that consist of multiple\ncharacters like <<.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stringify!($s); 1 }")," is an expression whose value is always 1. The value\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," is discarded, so this is equivalent to the expression\n",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 }"),". The reason for having ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify!($s)")," in there is to control the\nnumber of times the repetition is repeated, which is determined by which\nfragment variables are used within the repetition. Writing a repetition without\nusing any fragment variables inside of it would not be legal."),(0,a.kt)("p",null,"Suppose we call this macro with three of the statements shown above as input."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"m! {\n    struct S { x: u64 }\n    let mut s = S { x: 1 }\n    s.x + 1\n}\n")),(0,a.kt)("p",null,"The macro expands to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"{ stringify!(struct S { x: u64 }); 1 }\n    << { stringify!(let mut s = S { x: 1 }); 1 }\n    << { stringify!(s.x + 1); 1 }\n")),(0,a.kt)("p",null,"Each of the stringifys expands to a string literal:\n2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'{ "struct S { x: u64 }"; 1 }\n    << { "let mut s = S { x: 1 }"; 1 }\n    << { "s.x + 1"; 1 }\n')),(0,a.kt)("p",null,"The values of the string literals are not used. In this case the expression is\nequivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"{ 1 } << { 1 } << { 1 }"),", which is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"1 << 1 << 1"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," operator is left-associative; the numeric value of this expression\nis 4."),(0,a.kt)("p",null,"Altogether, the relevant behavior of this macro is that it evaluates to\n",(0,a.kt)("inlineCode",{parentName:"p"},"1 << 1 << 1 << ...")," where the number of ones is equal to the number of Rust\nstatements in the input of the macro. In closed form, the numeric value is\n",(0,a.kt)("inlineCode",{parentName:"p"},"1 << (n - 1)")," where n is the number of statements, except in the case that n is\nzero where the macro expands to nothing and we get a syntax error at the call\nsite."),(0,a.kt)("p",null,"It remains to determine how many statements are in the three invocations of m!\nin the quiz code."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"return || true"))),(0,a.kt)("p",null,"This is a return-expression that would return the closure ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),". It is\nequivalent to return ",(0,a.kt)("inlineCode",{parentName:"p"},"(|| true)"),". It is parsed as a single statement so the m!\ninvocation evaluates to"),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"(return) || true"))),(0,a.kt)("p",null,"This is a logical-OR expression. The ",(0,a.kt)("inlineCode",{parentName:"p"},"||")," is a binary operator, where the\nleft-hand side is the expression ",(0,a.kt)("inlineCode",{parentName:"p"},"(return)")," (of diverging type ",(0,a.kt)("inlineCode",{parentName:"p"},"!"),") and the\nright-hand side is the expression ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". This expression is a single statement\nso m! again evaluates to 1."),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"{return} || true"))),(0,a.kt)("p",null,"This one is two statements! A block-statement ",(0,a.kt)("inlineCode",{parentName:"p"},"{return}")," followed by a closure\nexpression ",(0,a.kt)("inlineCode",{parentName:"p"},"|| true"),"."),(0,a.kt)("p",null,"The Rust grammar distinguishes between expressions that require a semicolon in\norder to stand alone as a statement, and expressions that can be statements even\nwithout a semicolon. Consider two examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// No trailing semicolon required.\nfor t in vec {\n    /* ... */\n}\n\n// Trailing semicolon required.\nself.skip_whitespace()?;\n")),(0,a.kt)("p",null,"The list of expression types that stand alone without a semicolon is defined\nhere in libsyntax. The distinction informs a few different early bail-out cases\nwhere the parser decides to finish parsing the current expression."),(0,a.kt)("p",null,"Relevant to our case is that block expressions ",(0,a.kt)("inlineCode",{parentName:"p"},"{ /* ... */ }")," terminate an\nexpression if doing so would be syntactically sensible. The parser does not\neagerly consume binary operators after a block expression. Thus one might write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn f() -> &'static &'static bool {\n    // Block expression.\n    {\n        println!(\"What a silly function.\");\n    }\n\n    // Reference to reference to true.\n    &&true\n}\n")),(0,a.kt)("p",null,"In order to parse a block followed by a binary operator, we would need to make\nit syntactically insensible for the parser to terminate an expression at the\nclose curly brace. This would usually be done by wrapping in parentheses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn f() -> bool {\n    ({ true } && true)\n}\n")),(0,a.kt)("p",null,"Anyhow, the output of the program is 112."),(0,a.kt)("p",null,"You have answered 2 of 33 questions correctly."))}m.isMDXComponent=!0}}]);