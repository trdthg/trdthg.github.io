"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[6067],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>c});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),u=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},m=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},i={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},k=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),k=u(r),c=o,_=k["".concat(p,".").concat(c)]||k[c]||i[c]||a;return r?t.createElement(_,l(l({ref:n},m),{},{components:r})):t.createElement(_,l({ref:n},m))}));function c(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=k;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var u=2;u<a;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}k.displayName="MDXCreateElement"},6328:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>i,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=r(7462),o=(r(7294),r(3905));const a={},l=void 0,s={permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784",source:"@site/blog/2022-04-03-[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784.md",title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784",description:"\u539f\u6587\u94fe\u63a5\uff1ahttps://alexis-lozano.com/hexagonal-architecture-in-rust-4/",date:"2022-04-03T00:00:00.000Z",formattedDate:"2022\u5e744\u67083\u65e5",tags:[],readingTime:9.25,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API"},nextItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 5 \u5176\u4ed6\u7528\u4f8b",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 5 \u5176\u4ed6\u7528\u4f8b"}},p={authorsImageUrls:[]},u=[{value:"\u5f00\u59cb\u4e4b\u524d",id:"\u5f00\u59cb\u4e4b\u524d",level:2},{value:"\u4f7f\u7528 <code>Result</code> \u66ff\u6362\u81ea\u5b9a\u4e49\u679a\u4e3e",id:"\u4f7f\u7528-result-\u66ff\u6362\u81ea\u5b9a\u4e49\u679a\u4e3e",level:2},{value:"\u66f4\u6539\u7528\u4f8b\u7684\u8fd4\u56de\u503c\u7c7b\u578b",id:"\u66f4\u6539\u7528\u4f8b\u7684\u8fd4\u56de\u503c\u7c7b\u578b",level:3},{value:"\u66f4\u6539 Repository \u7684\u8fd4\u56de\u7c7b\u578b",id:"\u66f4\u6539-repository-\u7684\u8fd4\u56de\u7c7b\u578b",level:3},{value:"\u586b\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b",id:"\u586b\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b",level:2},{value:"\u521b\u5efa\u4e00\u4e9b\u6d4b\u8bd5\u503c",id:"\u521b\u5efa\u4e00\u4e9b\u6d4b\u8bd5\u503c",level:2},{value:"\u5b9d\u53ef\u68a6\u7f16\u53f7",id:"\u5b9d\u53ef\u68a6\u7f16\u53f7",level:3},{value:"\u5b9d\u53ef\u68a6\u540d\u5b57",id:"\u5b9d\u53ef\u68a6\u540d\u5b57",level:3},{value:"\u5b9d\u53ef\u68a6\u7c7b\u578b",id:"\u5b9d\u53ef\u68a6\u7c7b\u578b",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],m={toc:u};function i(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u539f\u6587\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-4/"},"https://alexis-lozano.com/hexagonal-architecture-in-rust-4/")),(0,o.kt)("p",{parentName:"blockquote"},"\u7ffb\u8bd1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u9009\u9898\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u7531 ",(0,o.kt)("a",{parentName:"p",href:"https://Rustt.org"},"Rustt")," \u7ffb\u8bd1\uff0c",(0,o.kt)("a",{parentName:"p",href:"https://studyrust.org"},"StudyRust")," \u8363\u8a89\u63a8\u51fa")),(0,o.kt)("h1",{id:"2021-09-02---rust-\u516d\u8fb9\u5f62\u67b6\u6784-4---\u91cd\u6784"},"2021-09-02 - Rust \u516d\u8fb9\u5f62\u67b6\u6784 #4 - \u91cd\u6784"),(0,o.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e0b\u9762\u7cfb\u5217\u7684\u4e00\u90e8\u5206"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-1/"},"Hexagonal architecture in Rust #1 - Domain")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-2/"},"Hexagonal architecture in Rust #2 - In-memory repository")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-3/"},"Hexagonal architecture in Rust #3 - HTTP API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-4/"},"Hexagonal architecture in Rust #4 - Refactoring")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-5/"},"Hexagonal architecture in Rust #5 - Remaining use-cases")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-6/"},"Hexagonal architecture in Rust #6 - CLI")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-7/"},"Hexagonal architecture in Rust #7 - Long-lived repositories"))),(0,o.kt)("p",null,"\u55e8\uff0c\u53c8\u662f\u6211\uff01\u8d77\u521d\uff0c\u6211\u60f3\u5b9e\u73b0\u6211\u4eec\u4ecd\u7136\u9700\u8981\u5904\u7406\u7684\u5269\u4f59\u7684\u7528\u4f8b\u3002\u4f46\u8fd9\u5c06\u4f1a\u662f\u4e0b\u4e00\u6b21\u7684\u5185\u5bb9\u3002\u4eca\u5929\u6211\u4eec\u5c06\u505a\u4e00\u4e9b\u91cd\u6784 :)"),(0,o.kt)("h2",{id:"\u5f00\u59cb\u4e4b\u524d"},"\u5f00\u59cb\u4e4b\u524d"),(0,o.kt)("p",null,"\u6211\u505a\u4e86\u4e24\u4e2a\u6211\u5728\u7b2c\u4e00\u7bc7\u6587\u7ae0\u4e2d\u6ca1\u6709\u770b\u5230\u7684\u66f4\u6539\u3002\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"domain/entities.rs")," \u4e2d\uff0c\u6211\u7528 Self \u66ff\u6362\u4e86 u16\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"impl From<PokemonNumber> for u16 {\n    fn from(n: PokemonNumber) -> Self {\n        n.0\n    }\n}\n")),(0,o.kt)("p",null,"\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"repositories/pokemons.rs")," \u4e2d\uff0c\u6211\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"with_error")," \u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u6ce8\u91ca\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"impl InMemoryRepository {\n    #[cfg(test)]\n    pub fn with_error(self) -> Self {\n        Self {\n            error: true,\n            ..self\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u73b0\u5728\u8fdb\u884c\u91cd\u6784 :)"),(0,o.kt)("h2",{id:"\u4f7f\u7528-result-\u66ff\u6362\u81ea\u5b9a\u4e49\u679a\u4e3e"},"\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"h2"},"Result")," \u66ff\u6362\u81ea\u5b9a\u4e49\u679a\u4e3e"),(0,o.kt)("p",null,"\u4e4b\u524d\u6211\u4eec\u4f7f\u7528\u81ea\u5b9a\u4e49\u679a\u4e3e\u4f5c\u4e3a\u7528\u4f8b\u548c \u5b58\u50a8\u5e93 \u7684\u8fd4\u56de\u503c\uff0c\u73b0\u5728\u628a\u4ed6\u4eec\u91cd\u6784\u4e3a Result\u3002"),(0,o.kt)("h3",{id:"\u66f4\u6539\u7528\u4f8b\u7684\u8fd4\u56de\u503c\u7c7b\u578b"},"\u66f4\u6539\u7528\u4f8b\u7684\u8fd4\u56de\u503c\u7c7b\u578b"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u7528\u4f8b\u7684\u8fd4\u56de\u503c\u6682\u65f6\u8bbe\u7f6e\u4e3a 500 \u4ee5\u65b9\u4fbf\u6d4b\u8bd5\u3001"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub fn serve(repo: Arc<dyn Repository>, req: &rouille::Request) -> rouille::Response {\n    let req = ...\n    rouille::Response::from(Status::InternalServerError)\n    // match create_pokemon::execute(repo, req) {\n    //     create_pokemon::Response::Ok(number) => rouille::Response::json(&Response { number }),\n    //     create_pokemon::Response::BadRequest => rouille::Response::from(Status::BadRequest),\n    //     create_pokemon::Response::Conflict => rouille::Response::from(Status::Conflict),\n    //     create_pokemon::Response::Error => rouille::Response::from(Status::InternalServerError),\n    // }\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u5c06\u6d4b\u8bd5\u7684\u8fd4\u56de\u503c\u4fee\u6539\u4e3a Result \u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"    #[test]\n    fn it_should_return_a_bad_request_error_when_request_is_invalid() {\n        ...\n        match res {\n            Err(Error::BadRequest) => {}\n            _ => unreachable!(),\n        };\n    }\n\n    #[test]\n    fn it_should_return_a_conflict_error_when_pokemon_number_already_exists() {\n        ...\n        match res {\n            Err(Error::Conflict) => {}\n            _ => unreachable!(),\n        }\n    }\n\n    #[test]\n    fn it_should_return_an_unknown_error_when_an_unexpected_error_happens() {\n        ...\n        match res {\n            Err(Error::Unknown) => {}\n            _ => unreachable!(),\n        };\n    }\n\n    #[test]\n    fn it_should_return_the_pokemon_number_otherwise() {\n        ...\n        match res {\n            Ok(res_number) => assert_eq!(res_number, number),\n            _ => unreachable!(),\n        };\n    }\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\u518d\u4fee\u6539\u7528\u4f8b\uff0c\u628a\u5b83\u7684\u8fd4\u56de\u503c\u4fee\u6539\u4e3a Result\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<u16, Error> {\n    ...\n        (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n            Insert::Ok(number) => Ok(u16::from(number)),\n            Insert::Conflict => Err(Error::Conflict),\n            Insert::Error => Err(Error::Unknown),\n        },\n        _ => Err(Error::BadRequest),\n    }\n}\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u73b0\u5728\u5e94\u8be5\u901a\u8fc7\u4e86\uff01"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 4 tests\ntest it_should_return_a_conflict_error_when_pokemon_number_already_exists ... ok\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\ntest it_should_return_the_pokemon_number_otherwise ... ok\n")),(0,o.kt)("p",null,"\u6700\u540e\u518d\u53bb\u4fee\u6539\u6211\u4eec\u7684 API\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub fn serve(repo: Arc<dyn Repository>, req: &rouille::Request) -> rouille::Response {\n    let req = ...\n    match create_pokemon::execute(repo, req) {\n        Ok(number) => rouille::Response::json(&Response { number }),\n        Err(create_pokemon::Error::BadRequest) => rouille::Response::from(Status::BadRequest),\n        Err(create_pokemon::Error::Conflict) => rouille::Response::from(Status::Conflict),\n        Err(create_pokemon::Error::Unknown) => rouille::Response::from(Status::InternalServerError),\n    }\n}\n")),(0,o.kt)("p",null,"Usecase \u4fee\u6539\u5b8c\u6210\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53bb\u5904\u7406 Reposity"),(0,o.kt)("h3",{id:"\u66f4\u6539-repository-\u7684\u8fd4\u56de\u7c7b\u578b"},"\u66f4\u6539 Repository \u7684\u8fd4\u56de\u7c7b\u578b"),(0,o.kt)("p",null,"Repository \u6ca1\u6709\u6d4b\u8bd5\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u4fee\u6539\u7528\u4f8b\u8c03\u7528 repo \u7684\u8fd4\u56de\u503c\u5f00\u59cb\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::{InsertError, ...};\n\n...\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<u16, Error> {\n    ...\n        (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n            Ok(number) => Ok(u16::from(number)),\n            Err(InsertError::Conflict) => Err(Error::Conflict),\n            Err(InsertError::Unknown) => Err(Error::Unknown),\n        },\n        _ => Err(Error::BadRequest),\n    }\n}\n")),(0,o.kt)("p",null,"\u5728\u5b9d\u53ef\u68a6\u7f16\u53f7\u51b2\u7a81\u7684\u6d4b\u8bd5\u65f6\uff0c\u60a8\u5e94\u8be5\u5c06 ",(0,o.kt)("inlineCode",{parentName:"p"},".ok()")," \u6dfb\u52a0\u5230\u5b58\u50a8\u5e93 insert \u64cd\u4f5c\u4e4b\u540e\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u5728 ",(0,o.kt)("em",{parentName:"p"},"repositories/pokemon.rs"),"\n\u4e2d\u5220\u9664 ",(0,o.kt)("inlineCode",{parentName:"p"},"Insert")," \u5e76\u521b\u5efa ",(0,o.kt)("inlineCode",{parentName:"p"},"InsertError"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum InsertError {\n    Conflict,\n    Unknown,\n}\n")),(0,o.kt)("p",null,"\u6700\u540e\u5728\u66f4\u6539 ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," Trait \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository")," \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5373\u53ef\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository: Send + Sync {\n    fn insert(&self,\n        number: PokemonNumber,\n        name: PokemonName,\n        types: PokemonTypes,\n    ) -> Result<PokemonNumber, InsertError>;\n}\n\nimpl Repository for InMemoryRepository {\n    fn insert(\n        &self,\n        number: PokemonNumber,\n        name: PokemonName,\n        types: PokemonTypes,\n    ) -> Result<PokemonNumber, InsertError> {\n        if self.error {\n            return Err(InsertError::Unknown);\n        }\n\n        let mut lock = match self.pokemons.lock() {\n            Ok(lock) => lock,\n            _ => return Err(InsertError::Unknown),\n        };\n\n        if lock.iter().any(|pokemon| pokemon.number == number) {\n            return Err(InsertError::Conflict);\n        }\n\n        let number_clone = number.clone();\n        lock.push(Pokemon::new(number_clone, name, types));\n        Ok(number)\n    }\n}\n")),(0,o.kt)("h2",{id:"\u586b\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b"},"\u586b\u52a0\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b"),(0,o.kt)("p",null,"\u5728\u5e38\u89c4\u7684 HTTP API \u4e2d\uff0c\u6bcf\u6b21\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u6211\u901a\u5e38\u4f1a\u628a\u8fd9\u4e2a\u5bf9\u8c61\u5728\u8fd4\u56de\u56de\u53bb\u3002\u7279\u522b\u662f\u5f53\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\u5305\u542b\u4e00\u5207\u524d\u7aef\u6ca1\u6709\u4f20\u6765\u7684\u5b57\u6bb5\u3002\u6bd4\u5982 ",(0,o.kt)("inlineCode",{parentName:"p"},"create_at"),"\n\u7b49\u7531\u5b58\u50a8\u5e93\u6dfb\u52a0\u7684\u5b57\u6bb5\u3002"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u6211\u9700\u8981\u4f60\u50cf\u6211\u4eec\u4e00\u5f00\u59cb\u90a3\u6837\u6682\u65f6\u6ce8\u91ca\u6389 ",(0,o.kt)("inlineCode",{parentName:"p"},"api/create_pokemon.rs"),"\u3002\u4ee5\u4fbf\u4e8e\u6211\u4eec\u4e13\u6ce8\u4e8e\u6d4b\u8bd5\u3002"),(0,o.kt)("p",null,"\u5728 ",(0,o.kt)("em",{parentName:"p"},"domain/create","_","pokemon.rs")," \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'#[test]\nfn it_should_return_the_pokemon_number_otherwise() {\n    let repo = Arc::new(InMemoryRepository::new());\n    let req = Request {\n        number: 25,\n        name: String::from("Pikachu"),\n        types: vec![String::from("Electric")],\n    };\n\n    let res = execute(repo, req);\n\n    match res {\n        Ok(Response {\n            number,\n            name,\n            types,\n        }) => {\n            assert_eq!(number, 25);\n            assert_eq!(name, String::from("Pikachu"));\n            assert_eq!(types, vec![String::from("Electric")]);\n        }\n        _ => unreachable!(),\n    };\n}\n')),(0,o.kt)("p",null,"\u540c\u65f6\u521b\u5efa\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," \u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Response {\n    pub number: u16,\n    pub name: String,\n    pub types: Vec<String>,\n}\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\uff0c\u5728\u63d2\u5165\u6210\u529f\u65f6\u5e94\u8be5\u8fd4\u56de ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon")," \u7684\u6240\u6709\u5b57\u6bb5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::{Pokemon, ...};\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<Response, Error> {\n    ...\n        (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n            Ok(Pokemon {\n                number,\n                name,\n                types,\n            }) => Ok(Response {\n                number: u16::from(number),\n                name: String::from(name),\n                types: Vec::<String>::from(types),\n            }),\n            Err(InsertError::Conflict) => Err(Error::Conflict),\n            Err(InsertError::Unknown) => Err(Error::Unknown),\n        },\n        _ => Err(Error::BadRequest),\n    }\n}\n")),(0,o.kt)("p",null,"\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"insert")," \u6267\u884c\u6210\u529f\u540e\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon")," \u7ed3\u6784\u4f53\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository: Send + Sync {\n    fn insert(\n        &self,\n        number: PokemonNumber,\n        name: PokemonName,\n        types: PokemonTypes,\n    ) -> Result<Pokemon, InsertError>;\n}\n\nimpl Repository for InMemoryRepository {\n    fn insert(\n        &self,\n        number: PokemonNumber,\n        name: PokemonName,\n        types: PokemonTypes,\n    ) -> Result<Pokemon, InsertError> {\n        ...\n        let pokemon = Pokemon::new(number, name, types);\n        lock.push(pokemon.clone());\n        Ok(pokemon)\n    }\n}\n")),(0,o.kt)("p",null,"\u4e3a\u4e86\u4f7f ",(0,o.kt)("inlineCode",{parentName:"p"},"pokemon.clone()")," \u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon")," \u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Clone")," Trait\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[derive(Clone)]\npub struct PokemonName(String);\n\n#[derive(Clone)]\npub struct PokemonTypes(Vec<PokemonType>);\n\n#[derive(Clone)]\nenum PokemonType {\n\n#[derive(Clone)]\npub struct Pokemon {\n")),(0,o.kt)("p",null,"\u73b0\u5728\u5b58\u50a8\u5e93\u7684\u63d2\u5165\u903b\u8f91\u5df2\u7ecf\u5b8c\u6210\uff0c\u7528\u4f8b\u5e0c\u671b\u80fd\u591f\u76f4\u63a5\u62ff\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon")," \u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"types")," \u5b57\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e24\u4e2a\u5b57\u7aef\u4e5f\u8f6c\u4e3a\u516c\u5f00\u7684\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Pokemon {\n    pub number: PokemonNumber,\n    pub name: PokemonName,\n    pub types: PokemonTypes,\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," \u5b9e\u73b0\u7c7b\u578b\u8f6c\u6362\uff0c\u4ece ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonNumber")," \u8f6c\u6362\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"u16"),"\u3001\u4ece ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonName")," \u8f6c\u6362\u4e3a\n",(0,o.kt)("inlineCode",{parentName:"p"},"String"),"\u3001\u4ece ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonTypes")," \u8f6c\u6362\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec<String>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'impl From<PokemonName> for String {\n    fn from(n: PokemonName) -> Self {\n        n.0\n    }\n}\n\nimpl From<PokemonTypes> for Vec<String> {\n    fn from(pts: PokemonTypes) -> Self {\n        let mut ts = vec![];\n        for pt in pts.0.into_iter() {\n            ts.push(String::from(pt));\n        }\n        ts\n    }\n}\n\nimpl From<PokemonType> for String {\n    fn from(t: PokemonType) -> Self {\n        String::from(match t {\n            PokemonType::Electric => "Electric",\n            PokemonType::Fire => "Fire",\n        })\n    }\n}\n')),(0,o.kt)("p",null,"\u73b0\u5728\u6d4b\u8bd5\u5e94\u8be5\u80fd\u591f\u901a\u8fc7\u4e86\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 4 tests\ntest it_should_return_a_conflict_error_when_pokemon_number_already_exists ... ok\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\ntest it_should_return_the_pokemon_number_otherwise ... ok\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u53bb\u66f4\u65b0 api \u7684\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[derive(Serialize)]\nstruct Response {\n    number: u16,\n    name: String,\n    types: Vec<String>,\n}\n\npub fn serve(repo: Arc<dyn Repository>, req: &rouille::Request) -> rouille::Response {\n    let req = ...\n    match create_pokemon::execute(repo, req) {\n        Ok(create_pokemon::Response {\n            number,\n            name,\n            types,\n        }) => rouille::Response::json(&Response {\n            number,\n            name,\n            types,\n        }),\n        Err(create_pokemon::Error::BadRequest) => rouille::Response::from(Status::BadRequest),\n        Err(create_pokemon::Error::Conflict) => rouille::Response::from(Status::Conflict),\n        Err(create_pokemon::Error::Unknown) => rouille::Response::from(Status::InternalServerError),\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cargo run")," \u4e4b\u540e\uff0c\u518d\u6b21\u5411 server \u53d1\u9001\u6570\u636e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": 17,\n  "name": "Charmander",\n  "types": [\n    "Fire"\n  ]\n}\n')),(0,o.kt)("h2",{id:"\u521b\u5efa\u4e00\u4e9b\u6d4b\u8bd5\u503c"},"\u521b\u5efa\u4e00\u4e9b\u6d4b\u8bd5\u503c"),(0,o.kt)("p",null,"\u4f60\u559c\u6b22\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},'PokemonName::try_from(String::from("Pikachu")).unwrap()'),"\n\u4e4b\u7c7b\u7684\u4e1c\u897f\u5417\uff1f\u8ba9\u6211\u4eec\u5728 ",(0,o.kt)("em",{parentName:"p"},"domain/entities.rs")," \u4e2d\u521b\u5efa\u4e00\u4e9b\u51fd\u6570\uff1a"),(0,o.kt)("h3",{id:"\u5b9d\u53ef\u68a6\u7f16\u53f7"},"\u5b9d\u53ef\u68a6\u7f16\u53f7"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nimpl PokemonNumber {\n    pub fn pikachu() -> Self {\n        Self(25)\n    }\n\n    pub fn charmander() -> Self {\n        Self(4)\n    }\n}\n")),(0,o.kt)("h3",{id:"\u5b9d\u53ef\u68a6\u540d\u5b57"},"\u5b9d\u53ef\u68a6\u540d\u5b57"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'#[cfg(test)]\nimpl PokemonName {\n    pub fn pikachu() -> Self {\n        Self(String::from("Pikachu"))\n    }\n\n    pub fn charmander() -> Self {\n        Self(String::from("Charmander"))\n    }\n\n    pub fn bad() -> Self {\n        Self(String::from(""))\n    }\n}\n')),(0,o.kt)("h3",{id:"\u5b9d\u53ef\u68a6\u7c7b\u578b"},"\u5b9d\u53ef\u68a6\u7c7b\u578b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nimpl PokemonTypes {\n    pub fn pikachu() -> Self {\n        Self(vec![PokemonType::Electric])\n    }\n\n    pub fn charmander() -> Self {\n        Self(vec![PokemonType::Fire])\n    }\n}\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u5728\u7528\u4f8b\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6d4b\u8bd5\u503c\u3002\u9996\u5148\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," \u6dfb\u52a0\u4e00\u4e2a\u6d4b\u8bd5\u7528\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," \u65b9\u6cd5\uff0c\u4ee5\u4fbf\u6211\u4eec\u66f4\u8f7b\u677e\u7684\u6a21\u62df\u4e00\u4e2a\u8bf7\u6c42\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nmod tests {\n    ...\n\n    impl Request {\n        fn new(number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Self {\n            Self {\n                number: u16::from(number),\n                name: String::from(name),\n                types: Vec::<String>::from(types),\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u5c31\u662f\u5404\u79cd\u7684\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[test]\nfn it_should_return_a_bad_request_error_when_request_is_invalid() {\n    ...\n    let req = Request::new(\n        PokemonNumber::pikachu(),\n        PokemonName::bad(),\n        PokemonTypes::pikachu(),\n    );\n    ...\n}\n\n#[test]\nfn it_should_return_a_conflict_error_when_pokemon_number_already_exists() {\n    ...\n    repo.insert(\n        PokemonNumber::pikachu(),\n        PokemonName::pikachu(),\n        PokemonTypes::pikachu(),\n    )\n    .ok();\n    let req = Request::new(\n        PokemonNumber::pikachu(),\n        PokemonName::charmander(),\n        PokemonTypes::charmander(),\n    );\n    ...\n}\n\n#[test]\nfn it_should_return_an_unknown_error_when_an_unexpected_error_happens() {\n    ...\n    let req = Request::new(\n        PokemonNumber::pikachu(),\n        PokemonName::pikachu(),\n        PokemonTypes::pikachu(),\n    );\n    ...\n}\n\n#[test]\nfn it_should_return_the_pokemon_otherwise() {\n    ...\n    let req = Request::new(\n        PokemonNumber::pikachu(),\n        PokemonName::pikachu(),\n        PokemonTypes::pikachu(),\n    );\n    ...\n    match res {\n        Ok(res) => {\n            assert_eq!(res.number, u16::from(PokemonNumber::pikachu()));\n            assert_eq!(res.name, String::from(PokemonName::pikachu()));\n            assert_eq!(res.types, Vec::<String>::from(PokemonTypes::pikachu()));\n        }\n        _ => unreachable!(),\n    };\n}\n")),(0,o.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,o.kt)("p",null,"\u6211\u4eec\u7ec8\u4e8e\u5b8c\u6210\u4e86\u8fd9\u4e2a\u6f2b\u957f\u7684\u91cd\u6784\uff0c\u5e0c\u671b\u4e00\u5207\u987a\u5229 :) \u6211\u4fdd\u8bc1\uff0c\u4e0b\u6b21\u6211\u4eec\u5c06\u53bb\u5b9e\u73b0\u4e00\u4e9b\u65b0\u7684\u7528\u4f8b\uff01"),(0,o.kt)("p",null,"\u4ee3\u7801\u53ef\u4ee5\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alexislozano/pokedex/tree/article-4"},"Github")," \u4e0a\u67e5\u770b"))}i.isMDXComponent=!0}}]);