"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[2729],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7878:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const l={},i="\u539f\u5b50\u64cd\u4f5c\u4e0e\u5185\u5b58\u987a\u5e8f",o={unversionedId:"magic/memory_ordering",id:"magic/memory_ordering",title:"\u539f\u5b50\u64cd\u4f5c\u4e0e\u5185\u5b58\u987a\u5e8f",description:"\u539f\u5b50\u64cd\u4f5c\u80fd\u591f\u7528\u6765\u5b9e\u73b0\u65e0\ud83d\udd13\u5e76\u53d1",source:"@site/docs/magic/memory_ordering.md",sourceDirName:"magic",slug:"/magic/memory_ordering",permalink:"/docs/magic/memory_ordering",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IO \u591a\u8def\u590d\u7528",permalink:"/docs/magic/linuxIO"},next:{title:"2022 \u79cb\u51ac\u5b63\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u8bad\u7ec3\u8425",permalink:"/docs/magic/oscamp2022"}},s={},d=[{value:"\u7a0b\u5e8f\u8fd0\u884c\u95ee\u9898",id:"\u7a0b\u5e8f\u8fd0\u884c\u95ee\u9898",level:2},{value:"1. \u7f16\u8bd1\u5668\u91cd\u6392",id:"1-\u7f16\u8bd1\u5668\u91cd\u6392",level:3},{value:"2.\u6307\u4ee4\u91cd\u6392",id:"2\u6307\u4ee4\u91cd\u6392",level:3},{value:"3. CPU Cache",id:"3-cpu-cache",level:3},{value:"\u672f\u8bed",id:"\u672f\u8bed",level:2},{value:"<strong>1. happens-before</strong>",id:"1-happens-before",level:3},{value:"2. sequenced-before",id:"2-sequenced-before",level:3},{value:"<strong>3. synchronized-with</strong>",id:"3-synchronized-with",level:3},{value:"4. inter-thread",id:"4-inter-thread",level:3},{value:"\u5185\u5b58\u987a\u5e8f",id:"\u5185\u5b58\u987a\u5e8f",level:2},{value:"1. Relaxed",id:"1-relaxed",level:3},{value:"2. Acquire-Release",id:"2-acquire-release",level:3},{value:"3. Sequence",id:"3-sequence",level:3},{value:"4. Fence",id:"4-fence",level:3},{value:"\u5176\u4ed6",id:"\u5176\u4ed6",level:2},{value:"1. Tips",id:"1-tips",level:3},{value:"2. Atomic \u80fd\u66ff\u4ee3\u9501\u5417\uff1f",id:"2-atomic-\u80fd\u66ff\u4ee3\u9501\u5417",level:3},{value:"3. Atomic \u7684\u5e94\u7528\u573a\u666f",id:"3-atomic-\u7684\u5e94\u7528\u573a\u666f",level:3},{value:"\u5f15\u7528",id:"\u5f15\u7528",level:2},{value:"\u8d44\u6599",id:"\u8d44\u6599",level:2}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u539f\u5b50\u64cd\u4f5c\u4e0e\u5185\u5b58\u987a\u5e8f"},"\u539f\u5b50\u64cd\u4f5c\u4e0e\u5185\u5b58\u987a\u5e8f"),(0,a.kt)("p",null,"\u539f\u5b50\u64cd\u4f5c\u80fd\u591f\u7528\u6765\u5b9e\u73b0\u65e0\ud83d\udd13\u5e76\u53d1"),(0,a.kt)("h2",{id:"\u7a0b\u5e8f\u8fd0\u884c\u95ee\u9898"},"\u7a0b\u5e8f\u8fd0\u884c\u95ee\u9898"),(0,a.kt)("p",null,"\u4e0b\u9762\u5217\u4e3e\u4e86\u5f71\u54cd\u4ee3\u7801\u6267\u884c\u987a\u5e8f\u7684\u8bf8\u591a\u539f\u56e0"),(0,a.kt)("h3",{id:"1-\u7f16\u8bd1\u5668\u91cd\u6392"},"1. \u7f16\u8bd1\u5668\u91cd\u6392"),(0,a.kt)("p",null,"\u7f16\u8bd1\u5668\u4f1a\u5c3d\u53ef\u80fd\u4f18\u5316\u4ee3\u7801\uff0c\u5728\u5355\u7ebf\u7a0b\u4e0b\u4e00\u822c\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"x = 1;\ny = 3;\nx = 2;\n")),(0,a.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u80fd\u88ab\u4f18\u5316\u4e3a\u4e0b\u9762\u7684\u6837\u5b50"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"x = 2;\ny = 3;\n")),(0,a.kt)("p",null,"\u4f46\u662f\u5728\u591a\u7ebf\u7a0b\u4e0b\u53ef\u80fd\u4f1a\u6709\u95ee\u9898"),(0,a.kt)("h3",{id:"2\u6307\u4ee4\u91cd\u6392"},"2.\u6307\u4ee4\u91cd\u6392"),(0,a.kt)("p",null,"\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d y = 200 \u53ef\u80fd\u4f1a\u5148\u4e8e x = 100 \u6267\u884c\uff0c\u6253\u5370\u51fa\u7684 x \u53ef\u80fd\u662f 0 \u6216 100 \u4f8b 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"    int x = 0;     // global variable\n    int y = 0;     // global variable\n\n    Thread-1:           Thread-2:\n    x = 100;            while (y != 200) {};\n    y = 200;            std::cout << x;\n")),(0,a.kt)("p",null,"\u4f8b 2:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"\u521d\u59cb\u72b6\u6001: x = 0, y = 1\n\u7ebf\u7a0b 1        \u7ebf\u7a0b 2\ny = 3;      if x == 1 {\nx = 1;          y *= 2;\n            }\n")),(0,a.kt)("p",null,"\u8fd9\u6bb5\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"y = 3\uff1a\u7ebf\u7a0b 2 \u5728\u7ebf\u7a0b 1 \u5b8c\u6210\u4e4b\u524d\u68c0\u67e5\u4e86 x \u7684\u503c"),(0,a.kt)("li",{parentName:"ul"},"y = 6\uff1a\u7ebf\u7a0b 2 \u5728\u7ebf\u7a0b 1 \u5b8c\u6210\u4e4b\u540e\u68c0\u67e5\u4e86 x \u7684\u503c"),(0,a.kt)("li",{parentName:"ul"},"y = 2\uff1a\u7ebf\u7a0b 2 \u770b\u5230\u4e86 x = 1\uff0c\u4f46\u662f\u6ca1\u770b\u5230 y = 3\uff0c\u63a5\u4e0b\u6765\u7528\u8ba1\u7b97\u7ed3\u679c\u8986\u76d6\u4e86 y = 3")),(0,a.kt)("h3",{id:"3-cpu-cache"},"3. CPU Cache"),(0,a.kt)("p",null,"\u7531\u4e8e\u4e00\u6b21\u590d\u5236\u64cd\u4f5c\u6d89\u53ca\u5230 move(\u5185\u5b58 -> \u5bc4\u5b58\u5668) add mov(\u5bc4\u5b58\u5668 -> \u5185\u5b58) \u4e09\u6761\u6c47\u7f16\u6307\u4ee4\uff0c\u5728 add\n\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u6570\u636e\u8fd8\u6ca1\u6709\u88ab\u62f7\u8d1d\u5230\u5185\u5b58\u65f6\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u8bfb\u53d6\u5230\u6b64\u65f6\u8fd8\u6ca1\u6709\u88ab\u4fee\u6539\u7684\u6570\u636e\uff0c\u6216\u8005\u662f\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u4fee\u6539\uff0c\u7ed3\u679c\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u7684\u7ed3\u679c\u88ab\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u8986\u76d6"),(0,a.kt)("h2",{id:"\u672f\u8bed"},"\u672f\u8bed"),(0,a.kt)("p",null,"\u4e0b\u5217\u672f\u8bed\u5b9a\u4e49\u4e86\u591a\u7ebf\u7a0b\u548c\u5355\u7ebf\u7a0b\u4e2d\u5404\u4e2a\u53d8\u91cf\u64cd\u4f5c\u4e4b\u95f4\u7684\u5173\u7cfb \u8fd9\u4e9b\u5173\u7cfb\u53ea\u662f\u6211\u4eec\u671f\u671b\u7684\uff0c\u60f3\u8981\u786e\u4fdd\u4e0b\u9762\u7684\u5173\u7cfb\u5728\u6d3b\u52a8\u4e2d\u662f\u6b63\u5e38\u7684\uff0c\u5c31\u9700\u8981\u5185\u5b58\u987a\u5e8f\u4e86"),(0,a.kt)("h3",{id:"1-happens-before"},(0,a.kt)("strong",{parentName:"h3"},"1. happens-before")),(0,a.kt)("p",null,"\u5148\u4e8e\uff0c\u6216\u8005\u8bf4 B \u80fd\u770b\u5230 A \u64cd\u4f5c\u7684\u7ed3\u679c\uff0cAB \u5206\u522b\u5728\u4e24\u4e2a\u7ebf\u7a0b\u91cc"),(0,a.kt)("h3",{id:"2-sequenced-before"},"2. sequenced-before"),(0,a.kt)("p",null,"\u540c\u4e0a A,B \u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185"),(0,a.kt)("h3",{id:"3-synchronized-with"},(0,a.kt)("strong",{parentName:"h3"},"3. synchronized-with")),(0,a.kt)("p",null,"x \u662f\u652f\u6301\u539f\u5b50\u64cd\u4f5c\u7684\u53d8\u91cf A \u5199\u5165 (store)x\uff0cB \u8bfb\u53d6 (load)x\uff0c\u5206\u522b\u5728\u4e24\u4e2a\u7ebf\u7a0b\u5185\uff0c\u5219 A((store) \u5c31\u662f\nsynchornized-with B(load) \u7684"),(0,a.kt)("h3",{id:"4-inter-thread"},"4. inter-thread"),(0,a.kt)("p",null,"\u8de8\u7ebf\u7a0b \u7b2c\u4e09\u70b9\u8bf4\u5230 A\uff1astore synchornized-with B: load \u90a3\u4e48 A happens-before B \u591a\u7ebf\u7a0b\u4e2d\u5199\u5165\u5148\u4e8e\u8bfb\u53d6"),(0,a.kt)("h2",{id:"\u5185\u5b58\u987a\u5e8f"},"\u5185\u5b58\u987a\u5e8f"),(0,a.kt)("h3",{id:"1-relaxed"},"1. Relaxed"),(0,a.kt)("p",null,"\u53ea\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6ee1\u8db3 Happens-before\uff0c\u8fd9\u662f\u6700\u5bbd\u677e\u7684\u89c4\u5219\uff0c\u4ed6\u5bf9\u7f16\u8bd1\u5668\u548c CPU \u4e0d\u505a\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5\u4e71\u9700\uff0c\u56e0\u6b64\u4e0b\u9762\u7684\u4f8b\u5b50\u4e0d\u4fdd\u8bc1\u4f1a\u6210\u529f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[test]\nfn to_relaxed() {\n    let x: &'static _ = Box::leak(Box::new(AtomicUsize::new(0)));\n    let y: &'static _ = Box::leak(Box::new(AtomicUsize::new(0)));\n    let t1 = thread::spawn(move || {\n        // \u8bfb\u53d6 x \u5b58\u5230 y \u91cc\n        let r1 = y.load(Ordering::Relaxed);\n        x.store(r1, Ordering::Relaxed);\n        r1\n    });\n    let t2 = thread::spawn(move || {\n        // \u8bfb\u53d6 y \u5b58\u5230 x \u91cc\n        let r2 = x.load(Ordering::Relaxed); // \u4e0b\u9762\u4e24\u884c\u53ef\u80fd\u4f1a\u88ab\u91cd\u6392\n        y.store(42, Ordering::Relaxed);\n        r2\n    });\n\n    let r1 = t1.join().unwrap();\n    let r2 = t2.join().unwrap();\n    // \u53ef\u80fd\u51fa\u73b0 r1 == r2 == 42\n}\n")),(0,a.kt)("h3",{id:"2-acquire-release"},"2. Acquire-Release"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Release \u91ca\u653e")," \uff0c\u8bbe\u5b9a\u5185\u5b58\u5c4f\u969c (Memory barrier)\uff0c\u4fdd\u8bc1\u5b83\u4e4b\u524d\u7684\u64cd\u4f5c\u6c38\u8fdc\u5728\u5b83\u4e4b\u524d\uff0c\u4f46\u662f\u5b83\u540e\u9762\u7684\u64cd\u4f5c\u53ef\u80fd\u88ab\u91cd\u6392\u5230\u5b83\u524d\u9762\n",(0,a.kt)("strong",{parentName:"p"},"Acquire \u83b7\u53d6")," , \u8bbe\u5b9a\u5185\u5b58\u5c4f\u969c\uff0c\u4fdd\u8bc1\u5728\u5b83\u4e4b\u540e\u7684\u8bbf\u95ee\u6c38\u8fdc\u5728\u5b83\u4e4b\u540e\uff0c\u4f46\u662f\u5b83\u4e4b\u524d\u7684\u64cd\u4f5c\u5374\u6709\u53ef\u80fd\u88ab\u91cd\u6392\u5230\u5b83\u540e\u9762\uff0c\u5f80\u5f80\u548c\n",(0,a.kt)("inlineCode",{parentName:"p"},"Release"),"\u5728\u4e0d\u540c\u7ebf\u7a0b\u4e2d\u8054\u5408\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"p"},"AcqRel"),": Acquire \u548c Release \u7684\u7ed3\u5408\uff0c\u540c\u65f6\u62e5\u6709\u5b83\u4eec\u4fe9\u63d0\u4f9b\u7684\u4fdd\u8bc1\u3002\u6bd4\u5982\u4f60\u8981\u5bf9\u4e00\u4e2a\natomic \u81ea\u589e 1\uff0c\u540c\u65f6\u5e0c\u671b\u8be5\u64cd\u4f5c\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u8bfb\u53d6\u6216\u5199\u5165\u64cd\u4f5c\u4e0d\u4f1a\u88ab\u91cd\u65b0\u6392\u5e8f"),(0,a.kt)("p",null,"\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u901a\u5e38\u6210\u5bf9\u4f7f\u7528\uff0c\u5bf9 store \u4f7f\u7528 Release\uff0c\u5bf9 load \u4f7f\u7528 Acquire \u5148\u540e\u987a\u5e8f\u5177\u4f53\u770b\u4e0b\u9762\u7684\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn write_x_then_y() {\n    X.store(true, Ordering::Relaxed);\n    Y.store(true, Ordering::Release);\n}\n\nfn read_y_then_x() {\n    while !Y.load(Ordering::Acquire) {}\n    if X.load(Ordering::Relaxed) {\n        Z.fetch_add(1, Ordering::SeqCst);\n    }\n}\n\nfn main() {\n    let t1 = thread::spawn(move || {\n        write_x_then_y();\n    });\n\n    let t2 = thread::spawn(move || {\n        read_y_then_x();\n    });\n\n    t1.join().unwrap();\n    t2.join().unwrap();\n\n    assert_ne!(Z.load(Ordering::SeqCst), 0);\n}\n")),(0,a.kt)("h3",{id:"3-sequence"},"3. Sequence"),(0,a.kt)("p",null,"\u987a\u5e8f\u4e00\u81f4\u6027\uff0c\u5f3a\u5236\u6240\u6709\u7ebf\u7a0b\u770b\u5230\u4e00\u81f4\u7684\u539f\u5b50\u64cd\u4f5c\uff0c\u5b8c\u5168\u7684\u5206\u754c\u70b9\uff0cSeqCst \u5c31\u50cf\u662f AcqRel\n\u7684\u52a0\u5f3a\u7248\uff0c\u5b83\u4e0d\u7ba1\u539f\u5b50\u64cd\u4f5c\u662f\u5c5e\u4e8e\u8bfb\u53d6\u8fd8\u662f\u5199\u5165\u7684\u64cd\u4f5c\uff0c\u53ea\u8981\u67d0\u4e2a\u7ebf\u7a0b\u6709\u7528\u5230 SeqCst \u7684\u539f\u5b50\u64cd\u4f5c\uff0c\u7ebf\u7a0b\u4e2d\u8be5 SeqCst \u64cd\u4f5c\u524d\u7684\u6570\u636e\u64cd\u4f5c\u7edd\u5bf9\u4e0d\u4f1a\u88ab\u91cd\u65b0\u6392\u5728\u8be5\nSeqCst \u64cd\u4f5c\u4e4b\u540e\uff0c\u4e14\u8be5 SeqCst \u64cd\u4f5c\u540e\u7684\u6570\u636e\u64cd\u4f5c\u4e5f\u7edd\u5bf9\u4e0d\u4f1a\u88ab\u91cd\u65b0\u6392\u5728 SeqCst \u64cd\u4f5c\u524d\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u53ea\u6709\u4f7f\u7528 SeqCst\nordering\uff0c\u624d\u80fd\u4fdd\u8bc1 Z \u6700\u540e\u7684\u503c\u4e0d\u4e3a 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn write_x() {\n    X.store(true, Ordering::SeqCst);    // 1\n}\n\nfn write_y() {\n    Y.store(true, Ordering::SeqCst);    // 2\n}\n\nfn read_x_then_y() {\n    while !X.load(Ordering::SeqCst) {}\n    if Y.load(Ordering::SeqCst) {       // 3\n        Z.fetch_add(1, Ordering::SeqCst);\n    }\n}\n\nfn read_y_then_x() {\n    while !Y.load(Ordering::SeqCst) {}\n    if X.load(Ordering::SeqCst) {       // 4\n        Z.fetch_add(1, Ordering::SeqCst);\n    }\n}\n\nfn main() {\n        let t1 = thread::spawn(move || {\n        write_x();\n    });\n\n    let t2 = thread::spawn(move || {\n        write_y();\n    });\n\n    let t3 = thread::spawn(move || {\n        read_x_then_y();\n    });\n\n    let t4 = thread::spawn(move || {\n        read_y_then_x();\n    });\n\n    t1.join().unwrap();\n    t2.join().unwrap();\n    t3.join().unwrap();\n    t4.join().unwrap();\n\n    assert_ne!(Z.load(Ordering::SeqCst), 0);\n}\n")),(0,a.kt)("h3",{id:"4-fence"},"4. Fence"),(0,a.kt)("p",null,"fence \u662f\u652f\u6301 synchornized-with \u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u548c Acquire-Release \u5bf9\u6bd4\u4e00\u4e0b"),(0,a.kt)("p",null,"\u4f8b 1\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn producer() -> JoinHandle<()> {\n    thread::spawn(move || {\n        unsafe {\n            DATA = 100;                                 // A\n        }\n        READY.store(true, Ordering::Release);           // B: \u5185\u5b58\u5c4f\u969c \u2191\n    })\n}\n\nfn consumer() -> JoinHandle<()> {\n    thread::spawn(move || {\n        while !READY.load(Ordering::Acquire) {}         // C: \u5185\u5b58\u5c4f\u969c \u2193\n\n        assert_eq!(100, unsafe { DATA });               // D\n    })\n}\n")),(0,a.kt)("p",null,"\u4f8b 2\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn write_x_then_y() {\n    X.store(true, Ordering::Relaxed); // 1\n    fence(Ordering::Release);         // 2\n    Y.store(true, Ordering::Relaxed); // 3\n}\n\nfn read_y_then_x() {\n    while !Y.load(Ordering::Relaxed) {}  // 4\n    fence(Ordering::Acquire);            // 5\n    if X.load(Ordering::Relaxed) {       // 6\n        Z.fetch_add(1, Ordering::SeqCst);\n    }\n}\n\nfn main() {\n    let t1 = thread::spawn(move || {\n        write_x_then_y();\n    });\n\n    let t2 = thread::spawn(move || {\n        read_y_then_x();\n    });\n\n    t1.join().unwrap();\n    t2.join().unwrap();\n\n    assert_ne!(Z.load(Ordering::SeqCst), 0);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/sync/atomic/fn.fence.html"},"fence \u7684\u5b98\u65b9\u6587\u6863")," An atomic\nfence. Depending on the specified order, a fence prevents the compiler and CPU\nfrom reordering certain types of memory operations around it. That creates\nsynchronizes-with relationships between it and atomic operations or fences in\nother threads."),(0,a.kt)("p",null,"A fence \u2018A\u2019 which has (at least) Release ordering semantics, synchronizes with a\nfence \u2018B\u2019 with (at least) Acquire semantics, if and only if there exist\noperations X and Y, both operating on some atomic object \u2018M\u2019 such that A is\nsequenced before X, Y is synchronized before B and Y observes the change to M.\nThis provides a happens-before dependence between A and B."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Thread 1                                          Thread 2\n\nfence(Release);      A --------------\nx.store(3, Relaxed); X ---------    |\n                               |    |\n                               |    |\n                               -------------\x3e Y  if x.load(Relaxed) == 3 {\n                                    |-------\x3e B      fence(Acquire);\n                                                     ...\n                                                 }\n")),(0,a.kt)("h2",{id:"\u5176\u4ed6"},"\u5176\u4ed6"),(0,a.kt)("h3",{id:"1-tips"},"1. Tips"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4e0d\u77e5\u9053\u600e\u4e48\u9009\u62e9\u65f6\uff0c\u4f18\u5148\u4f7f\u7528 SeqCst\uff0c\u867d\u7136\u4f1a\u7a0d\u5fae\u51cf\u6162\u901f\u5ea6\uff0c\u4f46\u662f\u6162\u4e00\u70b9\u4e5f\u6bd4\u51fa\u73b0\u9519\u8bef\u597d"),(0,a.kt)("li",{parentName:"ul"},"\u591a\u7ebf\u7a0b\u53ea\u8ba1\u6570 fetch_add \u800c\u4e0d\u4f7f\u7528\u8be5\u503c\u89e6\u53d1\u5176\u4ed6\u903b\u8f91\u5206\u652f\u7684\u7b80\u5355\u4f7f\u7528\u573a\u666f\uff0c\u53ef\u4ee5\u4f7f\u7528 Relaxed \u53c2\u8003\n",(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/30407121/which-stdsyncatomicordering-to-use"},"Which std::sync::atomic::Ordering to use?")),(0,a.kt)("li",{parentName:"ul"},"\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u8981\u4f7f\u7528 Atomic \u9700\u8981\u914d\u5408 Arc")),(0,a.kt)("h3",{id:"2-atomic-\u80fd\u66ff\u4ee3\u9501\u5417"},"2. Atomic \u80fd\u66ff\u4ee3\u9501\u5417\uff1f"),(0,a.kt)("p",null,"\u90a3\u4e48\u539f\u5b50\u7c7b\u578b\u65e2\u7136\u8fd9\u4e48\u5168\u80fd\uff0c\u5b83\u53ef\u4ee5\u66ff\u4ee3\u9501\u5417\uff1f\u7b54\u6848\u662f\u4e0d\u884c\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u590d\u6742\u7684\u573a\u666f\u4e0b\uff0c\u9501\u7684\u4f7f\u7528\u7b80\u5355\u7c97\u66b4\uff0c\u4e0d\u5bb9\u6613\u6709\u5751"),(0,a.kt)("li",{parentName:"ul"},"std::sync::atomic \u5305\u4e2d\u4ec5\u63d0\u4f9b\u4e86\u6570\u503c\u7c7b\u578b\u7684\u539f\u5b50\u64cd\u4f5c\uff1aAtomicBool, AtomicIsize, AtomicUsize,\nAtomicI8, AtomicU16 \u7b49\uff0c\u800c\u9501\u53ef\u4ee5\u5e94\u7528\u4e8e\u5404\u79cd\u7c7b\u578b"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u4f7f\u7528\u9501\u6765\u914d\u5408\uff0c\u4f8b\u5982\u4e0a\u4e00\u7ae0\u8282\u4e2d\u4f7f\u7528 Mutex \u914d\u5408 Condvar")),(0,a.kt)("h3",{id:"3-atomic-\u7684\u5e94\u7528\u573a\u666f"},"3. Atomic \u7684\u5e94\u7528\u573a\u666f"),(0,a.kt)("p",null,"\u4e8b\u5b9e\u4e0a\uff0cAtomic \u867d\u7136\u5bf9\u4e8e\u7528\u6237\u4e0d\u592a\u5e38\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u9ad8\u6027\u80fd\u5e93\u7684\u5f00\u53d1\u8005\u3001\u6807\u51c6\u5e93\u5f00\u53d1\u8005\u90fd\u975e\u5e38\u5e38\u7528\uff0c\u5b83\u662f\u5e76\u53d1\u539f\u8bed\u7684\u57fa\u77f3\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u573a\u666f\u9002\u7528\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65e0\u9501 (lock free) \u6570\u636e\u7ed3\u6784"),(0,a.kt)("li",{parentName:"ul"},"\u5168\u5c40\u53d8\u91cf\uff0c\u4f8b\u5982\u5168\u5c40\u81ea\u589e ID\uff0c\u5728\u540e\u7eed\u7ae0\u8282\u4f1a\u4ecb\u7ecd"),(0,a.kt)("li",{parentName:"ul"},"\u8de8\u7ebf\u7a0b\u8ba1\u6570\u5668\uff0c\u4f8b\u5982\u53ef\u4ee5\u7528\u4e8e\u7edf\u8ba1\u6307\u6807")),(0,a.kt)("h2",{id:"\u5f15\u7528"},"\u5f15\u7528"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.jianshu.com/p/511cde6b62a6"},"Rust \u5e76\u53d1\u7f16\u7a0b - Memory Ordering (siddontang\n)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.zhihu.com/question/24301047"},"\u77e5\u4e4e")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://senlinzhan.github.io/2017/12/04/cpp-memory-order/"},"\u7406\u89e3 C++ \u7684 Memory Order (Senlin","'","s Blog)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://skyao.io/learning-rust/std/sync/atomic-type.html"},"Rust \u5b66\u4e60\u7b14\u8bb0")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://course.rs/advance/concurrency-with-threads/sync2.html"},"rust \u8bed\u8a00\u5723\u7ecf")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://learnku.com/docs/nomicon/2018/83-atomic-operation/4742"},"Rust \u9ad8\u7ea7\u7f16\u7a0b"))),(0,a.kt)("h2",{id:"\u8d44\u6599"},"\u8d44\u6599"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://zhuanlan.zhihu.com/p/343688629"},"C \u8bed\u8a00\u4e28\u6df1\u5165\u7406\u89e3 volatile \u5173\u952e\u5b57")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.jianshu.com/p/765e3abbe89a"},"Java volatile \u4e09\u5927\u7279\u6027\u8be6\u89e3")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://juejin.cn/post/6844904177856937991"},"Java CAS \u5b9e\u73b0\u539f\u7406")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://monkeysayhi.github.io/2017/12/28/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/"},"\u4e00\u6587\u89e3\u51b3\u5185\u5b58\u5c4f\u969c"))))}c.isMDXComponent=!0}}]);