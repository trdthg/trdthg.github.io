"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[6483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=m(n),f=a,d=c["".concat(p,".").concat(f)]||c[f]||s[f]||i;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},310:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const i={},l="`print!` \u5b8f\u8be6\u89e3",o={unversionedId:"rust/print_into_detail",id:"rust/print_into_detail",title:"`print!` \u5b8f\u8be6\u89e3",description:"1. print! \u5b8f",source:"@site/docs/rust/print_into_detail.md",sourceDirName:"rust",slug:"/rust/print_into_detail",permalink:"/docs/rust/print_into_detail",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Too-Many-Lists",permalink:"/docs/rust/lists"},next:{title:"channel \u6e90\u4ee3\u7801\u5256\u6790",permalink:"/docs/rust/rs_channel"}},p={},m=[{value:"1. <code>print!</code> \u5b8f",id:"1-print-\u5b8f",level:2},{value:"2. <code>format_args!</code>",id:"2-format_args",level:2},{value:"3. _print()",id:"3-_print",level:2},{value:"4. <code>w.write_fmt(args)</code>",id:"4-wwrite_fmtargs",level:2},{value:"5.\u6700\u540e\u662f fmt::write(&amp;mut output, fmt)",id:"5\u6700\u540e\u662f-fmtwritemut-output-fmt",level:2},{value:"6. \u4e3a\u4ec0\u4e48 <code>print!(&quot;{}&quot;, &amp;a)</code> \u65e0\u6cd5\u6253\u5370\u51fa\u5730\u5740",id:"6-\u4e3a\u4ec0\u4e48-print-a-\u65e0\u6cd5\u6253\u5370\u51fa\u5730\u5740",level:2}],u={toc:m};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"print-\u5b8f\u8be6\u89e3"},(0,a.kt)("inlineCode",{parentName:"h1"},"print!")," \u5b8f\u8be6\u89e3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'print!("{}", &a)\n')),(0,a.kt)("h2",{id:"1-print-\u5b8f"},"1. ",(0,a.kt)("inlineCode",{parentName:"h2"},"print!")," \u5b8f"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"print!")," \u5b8f\u4f1a\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"format_args!")," \u5c06",(0,a.kt)("inlineCode",{parentName:"p"},'"{}", &a'),"\u8f6c\u6362\u4e3a\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"Arguments")," \u7ed3\u6784\u4f53\uff0c\u63a5\u7740\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 ",(0,a.kt)("inlineCode",{parentName:"p"},"_print"),"\n\u51fd\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"macro_rules! print {\n    ($($arg:tt)*) => {\n        $crate::io::_print($crate::format_args!($($arg)*))\n    };\n}\n")),(0,a.kt)("h2",{id:"2-format_args"},"2. ",(0,a.kt)("inlineCode",{parentName:"h2"},"format_args!")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"format_args!")," \u7684\u5b9e\u73b0\u9700\u8981\u7f16\u8bd1\u5668\u4ecb\u5165 (\u8fd9\u91cc\u6709\u61c2\u7684\u5927\u4f6c\u53ef\u4ee5\u5e2e\u5fd9\u89e3\u7b54)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'macro_rules! format_args {\n    ($fmt:expr) => {{ /* compiler built-in */ }};\n    ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n}\n\nuse std::fmt;\nlet s = fmt::format(format_args!("hello {}", "world")); assert_eq!(s,\nformat!("hello {}", "world"));\n')),(0,a.kt)("p",null,"Arguements \u7ed3\u6784\u4f53\u7b7e\u540d\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Arguments<'a> {\n    // \u5b57\u7b26\u4e32\n    pieces: &'a [&'static str],\n\n    // \u53c2\u6570\u5217\u8868\n    // `ArgumentV1` \u7ed3\u6784\u4f53\u5305\u542b\u53c2\u6570\u7684\u503c\uff0c\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u65b9\u5f0f\uff08\u901a\u8fc7 {} {:p} \u6307\u5b9a\uff09\n    args: &'a [ArgumentV1<'a>],\n\n    // \u5177\u4f53\u7684\u683c\u5f0f\u5316\u4fe1\u606f\u3002\n    // Arguement \u7ed3\u6784\u4f53\u4e2d\u4fdd\u5b58\u4e86 \u5bf9\u5e94\u7684\u53c2\u6570\u5728 args \u4e2d\u7684\u7d22\u5f15\n    // \u8fd8\u6709\u989d\u5916\u7684\u683c\u5f0f\u5316\u4fe1\u606f\uff0c\u6bd4\u5982\u53c2\u6570\u4f4d\u7f6e\uff0c\u5bbd\u5ea6\uff0c\u586b\u5145\u5b57\u7b26\u7b49\n    fmt: Option<&'a [rt::v1::Argument]>,\n}\n")),(0,a.kt)("p",null,"\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn main() {\n    let a = 1;\n    print!("hello{}aa{0}too{:p}ohmygod{:p}", a, &a, &a);\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5b57\u7b26\u4e32\u7247\u6bb5\u6709 4 \u4e2a\uff0c\u6240\u4ee5 pieces \u7684\u503c\u4e3a ",'["hello", "aa", "too", "ohmygod"]'),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\u4e24\u4e2a\u8fde\u7eed\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"{}"),", \u5b83\u4eec\u4e2d\u95f4\u76f8\u5f53\u4e8e\u88ab\u63d2\u5165\u4e86\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u53c2\u6570\u53ea\u6709\u4e09\u4e2a\uff0c\u6240\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"li"},"arg")," \u53ea\u6709\u4e09\u4e2a\u5143\u7d20\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u7531\u4e8e\u540e\u4e24\u4e2a\u90fd\u662f\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"{:p}")," \u6253\u5370\u5730\u5740\uff0c\u6240\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"li"},"args[1]")," \u548c ",(0,a.kt)("inlineCode",{parentName:"li"},"args[2]")," \u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"formatter")," \u7684\u503c\u76f8\u540c"),(0,a.kt)("li",{parentName:"ul"},"\u6709\u56db\u4e2a\u4f4d\u7f6e\u9700\u8981\u586b\u5145\u53c2\u6570\uff0c\u6240\u4ee5 fmt \u6709 4 \u4e2a\u5143\u7d20\u3002")),(0,a.kt)("p",null,"\u751f\u6210\u7684 Arguements \u7ed3\u6784\u4f53\u5982\u56fe\u6240\u793a\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202205221334215.jpg",alt:null})),(0,a.kt)("p",null,"\u4e0b\u9762\u662f cargo expand \u5c55\u5f00\u540e\u7684\u7ed3\u679c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nuse std::fmt::Display;\nfn main() {\n    let a = 1;\n    ::std::io::_print(::core::fmt::Arguments::new_v1_formatted(\n        &["hello", "aa", "too", "ohmygod"],\n        &[\n            ::core::fmt::ArgumentV1::new_display(&a),\n            ::core::fmt::ArgumentV1::new_pointer(&&a),\n            ::core::fmt::ArgumentV1::new_pointer(&&a),\n        ],\n        &[\n            ::core::fmt::rt::v1::Argument {\n                position: 0usize,\n                format: ::core::fmt::rt::v1::FormatSpec {\n                    fill: \' \',\n                    align: ::core::fmt::rt::v1::Alignment::Unknown,\n                    flags: 0u32,\n                    precision: ::core::fmt::rt::v1::Count::Implied,\n                    width: ::core::fmt::rt::v1::Count::Implied,\n                },\n            },\n            ::core::fmt::rt::v1::Argument {\n                position: 0usize,\n                format: ::core::fmt::rt::v1::FormatSpec {\n                    fill: \' \',\n                    align: ::core::fmt::rt::v1::Alignment::Unknown,\n                    flags: 0u32,\n                    precision: ::core::fmt::rt::v1::Count::Implied,\n                    width: ::core::fmt::rt::v1::Count::Implied,\n                },\n            },\n            ::core::fmt::rt::v1::Argument {\n                position: 1usize,\n                format: ::core::fmt::rt::v1::FormatSpec {\n                    fill: \' \',\n                    align: ::core::fmt::rt::v1::Alignment::Unknown,\n                    flags: 0u32,\n                    precision: ::core::fmt::rt::v1::Count::Implied,\n                    width: ::core::fmt::rt::v1::Count::Implied,\n                },\n            },\n            ::core::fmt::rt::v1::Argument {\n                position: 2usize,\n                format: ::core::fmt::rt::v1::FormatSpec {\n                    fill: \' \',\n                    align: ::core::fmt::rt::v1::Alignment::Unknown,\n                    flags: 0u32,\n                    precision: ::core::fmt::rt::v1::Count::Implied,\n                    width: ::core::fmt::rt::v1::Count::Implied,\n                },\n            },\n        ],\n        unsafe { ::core::fmt::UnsafeArg::new() },\n    ));\n    ::std::io::_print(::core::fmt::Arguments::new_v1(\n        &[""],\n        &[::core::fmt::ArgumentV1::new_display(&&a)],\n    ));\n}\n')),(0,a.kt)("h2",{id:"3-_print"},"3. _print()"),(0,a.kt)("p",null,"\u53ea\u662f\u7b80\u5355\u7684\u8c03\u7528\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"print_to"),", \u6307\u5b9a\u4e86\u8f93\u51fa\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"stdout")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'pub fn _print(args: fmt::Arguments<\'_>) {\n    print_to(args, stdout, "stdout");\n}\n')),(0,a.kt)("p",null,"print_to \u51fd\u6570\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\uff0c\u4e3b\u8981\u5c31\u662f\u8c03\u7528\u4e86\u7f13\u51b2\u533a\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"write_fmt")," \u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn print_to<T>(args: fmt::Arguments<\'_>, global_s: fn() -> T, label: &str)\nwhere\n    T: Write,\n{\n    // \u5c1d\u8bd5\u62ff\u5230\u8f93\u51fa\u7684\u7f13\u51b2\u533a w\n    if OUTPUT_CAPTURE_USED.load(Ordering::Relaxed) && OUTPUT_CAPTURE.try_with(|s| {\n            s.take().map(|w| { // w: Arc<Mutex<Vec<u8>>>\n                // \u8c03\u7528 write_fmt \u65b9\u6cd5\n                let _ = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);\n                s.set(Some(w));\n            })\n        }) == Ok(Some(()))\n    {\n        // Successfully wrote to capture buffer.\n        return;\n    }\n    //\n    if let Err(e) = global_s().write_fmt(args) {\n        panic!("failed printing to {label}: {e}");\n    }\n}\n')),(0,a.kt)("h2",{id:"4-wwrite_fmtargs"},"4. ",(0,a.kt)("inlineCode",{parentName:"h2"},"w.write_fmt(args)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {\n    // \u521b\u5efa\u4e00\u4e2a Adapter \u5c06 fmt \u8f6c\u5316\u4e3a\u4e00\u4e2a impl Write\uff0c\u987a\u4fbf\u50a8\u5b58\u9519\u8bef\u4fe1\u606f\n    struct Adapter<'a, T: ?Sized + 'a> {\n        inner: &'a mut T,\n        error: Result<()>,\n    }\n\n    // \u8fd9\u4e2a write_str \u5b9e\u9645\u4e0a\u5c31\u662f\u8c03\u7528\u4e86 Vec<u8> \u7684 write_all() \u65b9\u6cd5\n    impl<T: Write + ?Sized> fmt::Write for Adapter<'_, T> {\n        fn write_str(&mut self, s: &str) -> fmt::Result {\n            match self.inner.write_all(s.as_bytes()) {\n                ...\n            }\n        }\n    }\n\n    let mut output = Adapter { inner: self, error: Ok(()) };\n    match fmt::write(&mut output, fmt) {\n        Ok(()) => Ok(()),\n        ...\n    }\n}\n")),(0,a.kt)("h2",{id:"5\u6700\u540e\u662f-fmtwritemut-output-fmt"},"5.\u6700\u540e\u662f fmt::write(&mut output, fmt)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n    let mut formatter = Formatter::new(output);\n    let mut idx = 0;\n    match args.fmt {\n        None => {\n            // \u5982\u679c\u6ca1\u6709\u683c\u5f0f\u5316\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684\u683c\u5f0f\u5316\u65b9\u6cd5\u3002\n            // \u904d\u5386\u6240\u6709`\u53c2\u6570`\uff0c\u6bcf\u6b21\u5148\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u518d\u4f7f\u7528\u683c\u5f0f\u5316\u65b9\u6cd5\u8f93\u51fa\u4e00\u4e2a\u53c2\u6570\n            for (i, arg) in args.args.iter().enumerate() {\n                // \u5b89\u5168\u6027\uff1aargs.args \u548c args.pieces \u6765\u81ea\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8fd9\u91cc\u7684 get_unchecked \u662f\u5b89\u5168\u7684\n                let piece = unsafe { args.pieces.get_unchecked(i) };\n                if !piece.is_empty() {\n                    // \u8fd9\u91cc\u7684 formatter \u5c31\u662f\u4e4b\u524d\u7684 Adapter,\n                    // write_str \u5c31\u662f\u8c03\u7528 Vec<u8> \u5bf9\u5e94\u7684\u5b9e\u73b0\n                    formatter.buf.write_str(*piece)?;\n                }\n                (arg.formatter)(arg.value, &mut formatter)?;\n                idx += 1;\n            }\n        }\n        Some(fmt) => {\n            // \u6bcf\u4e2a\u683c\u5f0f\u5316\u65b9\u6cd5\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u6bcf\u6b21\u8f93\u51fa\u53c2\u6570\u524d\uff0c\u90fd\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u7247\u6bb5\n            // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u5bf9 fmt \u8fdb\u884c\u904d\u5386\uff0c\u56e0\u4e3a\u53c2\u6570\u6570\u91cf\u548c\u9700\u8981\u586b\u5145\u6570\u91cf\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\n            for (i, arg) in fmt.iter().enumerate() {\n                ...\u540c\u4e0a\n                // \u8fd9\u91cc\u7684 run \u8fd8\u662f\u4f1a\u8c03\u7528\n                // (arg.formatter)(arg.value, &mut formatter)?;\n                // \u53ea\u4e0d\u8fc7\u4f1a\u4e3a formatter \u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\n                unsafe { run(&mut formatter, arg, args.args) }?;\n                idx += 1;\n            }\n        }\n    }\n\n    // \u6253\u5370\u672b\u5c3e\u591a\u4f59\u7684\u5b57\u7b26\u4e32\n    if let Some(piece) = args.pieces.get(idx) {\n        formatter.buf.write_str(*piece)?;\n    }\n\n    Ok(())\n}\n")),(0,a.kt)("p",null,"\u81f3\u6b64\uff0c\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"print!")," \u7684\u5927\u4f53\u6d41\u7a0b\u5c31\u7ed3\u675f\u4e86"),(0,a.kt)("h2",{id:"6-\u4e3a\u4ec0\u4e48-print-a-\u65e0\u6cd5\u6253\u5370\u51fa\u5730\u5740"},"6. \u4e3a\u4ec0\u4e48 ",(0,a.kt)("inlineCode",{parentName:"h2"},'print!("{}", &a)')," \u65e0\u6cd5\u6253\u5370\u51fa\u5730\u5740"),(0,a.kt)("p",null,"\u901a\u8fc7\u4e0a\u9762\u7684\u8bb2\u89e3\uff0c\u6253\u5370\u7684\u5173\u952e\u5c31\u5728\u4e8e\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// arg\uff1aArgumentV1\n(arg.formatter)(arg.value, &mut formatter)?\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"formatter")," \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// This struct represents the generic \"argument\" which is taken by the Xprintf family of functions. It contains a function to format the given value.\n// At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type.\n\n// \u8be5\u7ed3\u6784\u8868\u793a Xprintf \u7cfb\u5217\u51fd\u6570\u91c7\u7528\u7684\u901a\u7528\u201c\u53c2\u6570\u201d\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u683c\u5f0f\u5316\u7ed9\u5b9a\u503c\u7684\u51fd\u6570\u3002\n// \u5728\u7f16\u8bd1\u65f6\uff0c\u786e\u4fdd\u51fd\u6570\u548c\u503c\u5177\u6709\u6b63\u786e\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6b64\u7ed3\u6784\u5c06\u53c2\u6570\u89c4\u8303\u5316\u4e3a\u4e00\u79cd\u7c7b\u578b\u3002\n\npub struct ArgumentV1<'a> {\n    value: &'a Opaque,\n    formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n}\n// NB. Argument is essentially an optimized partially applied formatting function,\n// equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\nextern \"C\" {\n    type Opaque;\n}\n\npub struct Formatter<'a> {\n    flags: u32,\n    fill: char,\n    align: rt::v1::Alignment,\n    width: Option<usize>,\n    precision: Option<usize>,\n\n    buf: &'a mut (dyn Write + 'a),\n}\n")),(0,a.kt)("p",null,"\u4e0b\u9762\u662f stackoverflow \u4e0a\u7684\u89e3\u7b54"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"print!"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"println!"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"eprint!"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"eprintln!"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"write!"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"writeln!")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"format!"),"\n\u8fd9\u4e9b\u5b8f\u4f1a\u9690\u5f0f\u7684\u62ff\u8d70\u53c2\u6570\u7684\u5f15\u7528"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn main() {\n    let x = 5;\n    println!("{}", x);\n}\n')),(0,a.kt)("p",null,"\u5728 nightly \u7684\u7f16\u8bd1\u5668\u4e0a\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"rustc -Z unstable-options --pretty")," \u5c55\u5f00\u4e0a\u9762\u7684\u4ee3\u7801\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u6216\u8005\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo expand"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::v1::*;\n#[macro_use]\nextern crate std;\nfn main() {\n    let x = 5;\n    {\n        ::std::io::_print(::core::fmt::Arguments::new_v1(\n            &["", "\\n"],\n            &match (&x,) {\n                (arg0,) => [::core::fmt::ArgumentV1::new(\n                    arg0,\n                    ::core::fmt::Display::fmt,\n                )],\n            },\n        ));\n    };\n}\n')),(0,a.kt)("p",null,"\u6574\u7406\u4e4b\u540e\u5c31\u662f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use std::{fmt, io};\n\nfn main() {\n    let x = 5;\n    io::_print(fmt::Arguments::new_v1(\n        &["", "\\n"],\n        &[fmt::ArgumentV1::new(&x, fmt::Display::fmt)],\n        //                     ^^\n    ));\n}\n')),(0,a.kt)("p",null,"\u6ce8\u610f ",(0,a.kt)("inlineCode",{parentName:"p"},"&x"),"."),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u5199\u7684\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},'println!("{}", &x)'),"\uff0cRust \u7f16\u8bd1\u5668\u4f9d\u7136\u80fd\u591f\u5e2e\u4f60\u5904\u7406\u8fd9\u4e24\u5c42\u5f15\u7528;"),(0,a.kt)("p",null,"\u56e0\u4e3a Rust \u4e3a &T(T: Display) \u4e5f\u5b9e\u73b0\u4e86 Display"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// \u6709\u70b9\u50cf\u667a\u80fd\u6307\u9488\u7684 Deref\nimpl<'a, T> Display for &'a T where T: Display + ?Sized\n")))}s.isMDXComponent=!0}}]);