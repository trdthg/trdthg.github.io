"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[583],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=i(t),k=a,d=c["".concat(s,".").concat(k)]||c[k]||m[k]||o;return t?r.createElement(d,p(p({ref:n},u),{},{components:t})):r.createElement(d,p({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var i=2;i<o;i++)p[i]=t[i];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8465:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const o={},p=void 0,l={permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API",source:"@site/blog/2022-04-03-[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API.md",title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API",description:"\u539f\u6587\u94fe\u63a5\uff1ahttps://alexis-lozano.com/hexagonal-architecture-in-rust-3/",date:"2022-04-03T00:00:00.000Z",formattedDate:"2022\u5e744\u67083\u65e5",tags:[],readingTime:14.84,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 2 \u5185\u5b58\u5b58\u50a8\u5e93",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 2 \u5185\u5b58\u5b58\u50a8\u5e93"},nextItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784"}},s={authorsImageUrls:[]},i=[{value:"HTTP API",id:"http-api",level:2},{value:"\u83b7\u53d6\u8bf7\u6c42",id:"\u83b7\u53d6\u8bf7\u6c42",level:2},{value:"\u6dfb\u52a0\u5b58\u50a8\u5e93",id:"\u6dfb\u52a0\u5b58\u50a8\u5e93",level:2},{value:"\u6253\u8d25\u501f\u7528\u68c0\u67e5\u5668",id:"\u6253\u8d25\u501f\u7528\u68c0\u67e5\u5668",level:2},{value:"\u57df\u4e5f\u9700\u8981\u7231 \ud83d\udc93",id:"\u57df\u4e5f\u9700\u8981\u7231-",level:2},{value:"API + domain =&lt; 3",id:"api--domain--3",level:2},{value:"\u4e0b\u4e00\u6b65",id:"\u4e0b\u4e00\u6b65",level:2}],u={toc:i};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u539f\u6587\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-3/"},"https://alexis-lozano.com/hexagonal-architecture-in-rust-3/")),(0,a.kt)("p",{parentName:"blockquote"},"\u7ffb\u8bd1\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,a.kt)("p",{parentName:"blockquote"},"\u9009\u9898\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,a.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u7531 ",(0,a.kt)("a",{parentName:"p",href:"https://Rustt.org"},"Rustt")," \u7ffb\u8bd1\uff0c",(0,a.kt)("a",{parentName:"p",href:"https://studyrust.org"},"StudyRust")," \u8363\u8a89\u63a8\u51fa")),(0,a.kt)("h1",{id:"2021-08-26---rust-\u516d\u8fb9\u5f62\u67b6\u6784-3---http-api"},"2021-08-26 - Rust \u516d\u8fb9\u5f62\u67b6\u6784 #3 - HTTP API"),(0,a.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e0b\u9762\u7cfb\u5217\u7684\u4e00\u90e8\u5206"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-1/"},"Hexagonal architecture in Rust #1 - Domain")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-2/"},"Hexagonal architecture in Rust #2 - In-memory repository")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-3/"},"Hexagonal architecture in Rust #3 - HTTP API")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-4/"},"Hexagonal architecture in Rust #4 - Refactoring")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-5/"},"Hexagonal architecture in Rust #5 - Remaining use-cases")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-6/"},"Hexagonal architecture in Rust #6 - CLI")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-7/"},"Hexagonal architecture in Rust #7 - Long-lived repositories"))),(0,a.kt)("p",null,"\u96c6\u7ed3\u5427\uff0c\u6211\u7684\u6218\u53cb\u4eec\u3002\u4eca\u5929\u6211\u4eec\u5c06\u8981\u6218\u6597\uff01\u8c01\uff1f\u4f60\u95ee\u6211\u3002\u5b83\u662f\u8fd9\u7247\u571f\u5730\u4e0a\u4e0d\u8a00\u800c\u55bb\u7684\u6076\u9b54\uff1a\ud83d\udc7f\u501f\u7528\u68c0\u67e5\uff01"),(0,a.kt)("p",null,"\u597d\u4e86\uff0c\u8ba9\u6211\u4eec\u6682\u65f6\u505c\u6b62\u8fd9\u4e2a\u6307\u73af\u738b\u98ce\u683c\u7684\u5370\u8c61\uff0c\u5de5\u4f5c\u7b49\u5f85\u7740\u6211\u4eec : )"),(0,a.kt)("p",null,"\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u6211\u4eec\u7684\u57df\u5b9e\u4f53\uff0c\u5e76\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7528\u4f8b\u548c\u4e00\u4e2a\u5b58\u50a8\u5e93\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src\n\u251c\u2500\u2500 domain\n\u2502   \u251c\u2500\u2500 create_pokemon.rs\n\u2502   \u251c\u2500\u2500 entities.rs\n\u2502   \u2514\u2500\u2500 mod.rs\n\u251c\u2500\u2500 repositories\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u2514\u2500\u2500 pokemon.rs\n\u2514\u2500\u2500 main.rs\n")),(0,a.kt)("p",null,"\u6211\u4eec\u672c\u53ef\u4ee5\u628a\u5b83\u4ea4\u7ed9\u6211\u4eec\u7684\u5ba2\u6237\uff0c\u4f46\u662f\u9664\u4e86\u8fd0\u884c\u6d4b\u8bd5\u80fd\u591f\u901a\u8fc7\u4e4b\u5916\uff0c",(0,a.kt)("em",{parentName:"p"},"main.rs")," \u6587\u4ef6\u4ecd\u7136\u53ea\u8f93\u51fa\u4e00\u4e2a hello\nworld\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u628a\u6211\u4eec\u7684\u9879\u76ee\u8f6c\u6362\u6210\u4e00\u4e2a\u8fd4\u56de JSON \u7684 HTTP API\u3002"),(0,a.kt)("h2",{id:"http-api"},"HTTP API"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u6ca1\u8bb0\u9519\u7684\u8bdd\uff0c\u6211\u6ca1\u6709\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u5f02\u6b65\u3002\u8fd9\u662f\u4e3a\u4e86\u4e13\u6ce8\u4e8e\u8003\u8651\u6211\u4eec\u5e94\u7528\u7a0b\u5e8f\u7684\u67b6\u6784\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u4f7f\u7528\u5f02\u6b65\uff0c\u90a3\u5c31\u53bb\u5427 : ) \u975e\u5f02\u6b65\u7684 Web\n\u6846\u67b6\u5e76\u4e0d\u591a\uff0c\u4f46\u4ecd\u7136\u6709\u4e00\u4e9b\u3002\u6211\u518d\u672c\u6587\u4e2d\u7684\u9009\u62e9\u662f\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tomaka/rouille"},"rouille"),"\uff0c\u5b83\u80fd\u5f88\u597d\u5730\u5904\u7406\u6211\u4eec\u7684\u7528\u4f8b\u3002"),(0,a.kt)("p",null,"\u6240\u4ee5\u9996\u5148\uff0c\u6211\u4eec\u6253\u5f00 ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml")," \u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u4e2d\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nrouille = "3.2.1"\n')),(0,a.kt)("p",null,"\u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6211\u4eec\u6240\u6709\u7684 API \u7684\u6587\u4ef6\u5939\u3002\u8fd9\u91cc\u9762\u5305\u62ec ",(0,a.kt)("em",{parentName:"p"},"mod.rs")," \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4e2d\u6dfb\u52a0\u57fa\u672c\u7684\u8def\u7531\u903b\u8f91\u3002\u6211\u8fd8\u5c06\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\n",(0,a.kt)("em",{parentName:"p"},"health.rs")," \u6587\u4ef6\u6765\u5904\u7406\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u8def\u7531\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src\n\u2514\u2500\u2500 api\n    \u251c\u2500\u2500 health.rs\n    \u2514\u2500\u2500 mod.rs\n")),(0,a.kt)("p",null,"\u6211\u4eec\u53ea\u4f1a\u5728 ",(0,a.kt)("em",{parentName:"p"},"api")," \u6587\u4ef6\u5939\u4e2d\u4f7f\u7528\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"rouille"),"\uff0c\u5982\u679c\u5728\u4ee5\u540e\uff0c\u6211\u4eec\u60f3\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"actix")," \u4ee3\u66ff ",(0,a.kt)("inlineCode",{parentName:"p"},"rouille"),"\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fee\u6539 ",(0,a.kt)("em",{parentName:"p"},"api"),"\n\u7684\u90e8\u5206\u5373\u53ef (\u5176\u5b9e\u6211\u4eec\u8fd8\u8981\u628a\u4e00\u4e9b\u51fd\u6570\u8f6c\u6362\u4e3a\u5f02\u6b65\u7684\uff0c\u4f46\u662f\u5b83\u4e0e Web \u6846\u67b6\u7684\u9009\u62e9\u5e76\u4e0d\u76f8\u5173)"),(0,a.kt)("p",null,"\u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u53ef\u7528\u7684 API\uff0c\u5f53\u6211\u4eec\u5728\u5411 ",(0,a.kt)("inlineCode",{parentName:"p"},"/health")," \u4e0a\u53d1\u9001 GET \u8bf7\u6c42\u65f6\uff0c\u5b83\u5e94\u8be5\u8fd4\u56de\u4e00\u4e9b\u6587\u672c\u3002\u9996\u5148\uff0c\u6211\u4eec\u8981\u5728 ",(0,a.kt)("em",{parentName:"p"},"main.rs")," \u4e2d\u5f15\u5165\n",(0,a.kt)("inlineCode",{parentName:"p"},"rutille"),", \u5e76\u4f7f\u7528\u4e4b\u540e\u4f1a\u521b\u5efa\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"serve")," \u51fd\u6570\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'mod api;\nmod domain;\nmod repositories;\n\n#[macro_use]\nextern crate rouille;\n\nfn main() {\n    api::serve("localhost:8000");\n}\n')),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u5728 ",(0,a.kt)("em",{parentName:"p"},"api/mod.rs")," \u91cc\u6dfb\u52a0 ",(0,a.kt)("inlineCode",{parentName:"p"},"serve")," \u51fd\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"mod health;\n\npub fn serve(url: &str) {\n    rouille::start_server(url, move |req| {\n        router!(req,\n            (GET) (/health) => {\n                health::serve()\n            },\n            _ => {\n                rouille::Response::from(Status::NotFound)\n            }\n        )\n    });\n}\n")),(0,a.kt)("p",null,"\u73b0\u5728\u53ea\u9700\u8981\u7f16\u8f91 ",(0,a.kt)("em",{parentName:"p"},"api/health.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use rouille;\n\npub fn serve() -> rouille::Response {\n    rouille::Response::text("Gotta catch them all!")\n}\n')),(0,a.kt)("p",null,"\u73b0\u5728\u60a8\u5e94\u8be5\u53ef\u4ee5\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," \u8fd0\u884c\u7a0b\u5e8f\u5e76\u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:8000/health\u3002\n\u5728\u90a3\u91cc\uff0c\u4e00\u6761\u7f8e\u4e3d\u7684\u4fe1\u606f\u5728\u7b49\u7740\u4f60\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Gotta catch them all!\n")),(0,a.kt)("p",null,"\u592a\u68d2\u4e86\uff01\u4f46\u6211\u4e4b\u524d\u8bf4\u8fc7\u6211\u4eec\u60f3\u8981\u4e00\u4e2a JSON API\u3002\u8ba9\u6211\u4eec\u5c06\u8fd9\u4e2a API \u63a5\u53e3\u8f6c\u6362\u4e3a\u8fd4\u56de JSON\u3002\u6211\u4eec\u5c06\u7528\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"serde"),"\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"rouille"),"\n\u672c\u8eab\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e9b ",(0,a.kt)("inlineCode",{parentName:"p"},"serde")," \u7684\u7279\u5f81\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo tree | grep serde")," \u67e5\u770b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 serde v1.0.129\n\u251c\u2500\u2500 serde_derive v1.0.129 (proc-macro)\n\u251c\u2500\u2500 serde_json v1.0.66\n\u2502   \u2514\u2500\u2500 serde v1.0.129\n")),(0,a.kt)("p",null,"\u63a5\u7740\u8ba9\u6211\u4eec\u5728 ",(0,a.kt)("em",{parentName:"p"},"Cargo.toml")," \u4e2d\u6dfb\u52a0\u4e0e ",(0,a.kt)("inlineCode",{parentName:"p"},"rouille")," \u4f7f\u7528\u7684\u7248\u672c\u76f8\u540c\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"serde")," \u4f9d\u8d56\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nrouille = "3.2.1"\nserde = { version = "1.0.129", features = ["derive"] }\nserde_json = "1.0.66"\n')),(0,a.kt)("p",null,"\u73b0\u5728\u6765\u4fee\u6539 ",(0,a.kt)("em",{parentName:"p"},"api/health.rs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use rouille;\nuse serde::Serialize;\n\n#[derive(Serialize)]\nstruct Response {\n    message: String,\n}\n\npub fn serve() -> rouille::Response {\n    rouille::Response::json(&Response {\n        message: String::from("Gotta catch them all!"),\n    })\n}\n')),(0,a.kt)("p",null,"\u5728\u6b21\u8bbf\u95ee\u4f60\u7684\u6d4f\u89c8\u5668 \ud83c\udf89 :D"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Gotta catch them all!"\n}\n')),(0,a.kt)("h2",{id:"\u83b7\u53d6\u8bf7\u6c42"},"\u83b7\u53d6\u8bf7\u6c42"),(0,a.kt)("p",null,"\u6211\u4eec\u7684\u5ba2\u6237\u60f3\u8981\u7684\u662f\u80fd\u591f\u521b\u9020\u4e00\u4e2a\u5b9d\u53ef\u68a6\u3002\u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684 API \u5c06\u662f RESTful\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u4f7f\u7528\u7684 HTTP \u8bf7\u6c42\u7684\u793a\u4f8b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'- POST http://localhost:8000\n- Headers\n    Content-Type: application/json\n- Body\n    {\n        "number": 4,\n        "name": "Charmander",\n        "types": ["Fire"]\n    }\n')),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u56de\u5230 ",(0,a.kt)("em",{parentName:"p"},"api/mod.rs")," \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8def\u7531"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"mod create_pokemon;\nmod health;\n\npub fn serve(url: &str) {\n    rouille::start_server(url, move |req| {\n        router!(req,\n            ...\n            (POST) (/) => {\n                create_pokemon::serve(req)\n            },\n            ...\n        )\n    });\n}\n")),(0,a.kt)("p",null,"\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 ",(0,a.kt)("em",{parentName:"p"},"api/create","_","pokemon.rs")," \u5e76\u5199\u5165\u4e0b\u9762\u7684\u5185\u5bb9\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use rouille;\nuse serde::Serialize;\n\n#[derive(Serialize)]\nstruct Response {\n    message: String,\n}\n\npub fn serve(_req: &rouille::Request) -> rouille::Response {\n    rouille::Response::json(&Response {\n        message: String::from("Pokemon created!"),\n    })\n}\n')),(0,a.kt)("p",null,"\u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528 REST \u5ba2\u6237\u7aef (postman\u3001curl\u3001...) \u5728 http://localhost:8000 \u4e0a\u53d1\u9001 POST \u8bf7\u6c42\uff0cbody\n\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\u3002\u4f60\u5e94\u8be5\u4f1a\u6536\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Pokemon created!"\n}\n')),(0,a.kt)("p",null,"\u4f46\u662f\u5f53\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u65f6\uff0cAPI \u6700\u597d\u80fd\u8fd4\u56de 400 \u72b6\u6001\u7801\u3002\u8ba9\u6211\u4eec\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b ",(0,a.kt)("em",{parentName:"p"},"api/create","_","pokemon.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::api::Status;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Deserialize)]\nstruct Request {\n    number: u16,\n    name: String,\n    types: Vec<String>,\n}\n\npub fn serve(req: &rouille::Request) -> rouille::Response {\n    match rouille::input::json_input::<Request>(req) {\n        Ok(_) => {}\n        _ => return rouille::Response::from(Status::BadRequest),\n    };\n    ...\n}\n")),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u5982\u679c\u5411 API \u53d1\u9001\u4e00\u4e2a\u6ca1\u6709 ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," \u503c\u7684\u8bf7\u6c42\uff0c\u6216\u8005\u5982\u679c ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," \u4e3a\u8d1f\u6570\uff0c\u7528\u6237\u5c06\u4f1a\u6536\u5230 400 \u72b6\u6001\u7801\u3002"),(0,a.kt)("h2",{id:"\u6dfb\u52a0\u5b58\u50a8\u5e93"},"\u6dfb\u52a0\u5b58\u50a8\u5e93"),(0,a.kt)("p",null,"\u597d\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u73b0\u5728\u5b9d\u53ef\u68a6\u65e2\u6ca1\u6709\u521b\u5efa\u4e5f\u6ca1\u6709\u6dfb\u52a0\u5230\u5b58\u50a8\u5e93\u4e2d\u3002\u800c\u4e14 API \u4e5f\u4e0d\u4f1a\u8c03\u7528\u7528\u4f8b\uff01\u9996\u5148\u8ba9\u6211\u4eec\u5728 ",(0,a.kt)("em",{parentName:"p"},"main.rs"),"\n\u4e2d\u521b\u5efa\u4e00\u4e2a\u5185\u5b58\u5b58\u50a8\u5e93\uff0c\u5e76\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 API\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use repositories::pokemon::InMemoryRepository;\n\nfn main() {\n    let repo = InMemoryRepository::new();\n    api::serve("localhost:8000", &mut repo);\n}\n')),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u76f8\u5e94\u5730\u7f16\u8f91 ",(0,a.kt)("em",{parentName:"p"},"api/mod.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::Repository;\n\npub fn serve(url: &str, repo: &mut dyn Repository) {\n    rouille::start_server(url, move |req| {\n        router!(req,\n            ...\n            (POST) (/) => {\n                create_pokemon::serve(repo, req)\n            },\n            ...\n        )\n    });\n}\n")),(0,a.kt)("p",null,"\u522b\u5fd8\u4e86\u4fee\u6539 ",(0,a.kt)("em",{parentName:"p"},"api/create","_","pokemon.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::Repository;\n\npub fn serve(_repo: &mut dyn Repository, req: &rouille::Request) -> rouille::Response {\n")),(0,a.kt)("p",null,"\u4f60\u73b0\u5728\u53ef\u4ee5\u8fd0\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," \u4e86\uff0c\u5b83\u5e94\u8be5 ..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"error[E0277]: `dyn Repository` cannot be sent between threads safely\n= help: the trait `Send` is not implemented for `dyn Repository`\nerror[E0277]: `dyn Repository` cannot be shared between threads safely\n= help: the trait `Sync` is not implemented for `dyn Repository`\nerror: aborting due to 2 previous errors\n")),(0,a.kt)("p",null,"\u6211\u53ea\u4fdd\u7559\u4e86\u6700\u57fa\u7840\u7684\u9519\u8bef\u65e5\u5fd7\u3002\u6709\u4e9b\u4e1c\u897f\u4e0d\u8d77\u4f5c\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a......\u501f\u7528\u68c0\u67e5\u5668\u3002\u6211\u7684\u610f\u601d\u662f\u8fd9\u5176\u5b9e\u662f\u6211\u7684\u9519\uff0c\u4f46\u662f\u501f\u7528\u68c0\u67e5\u5668\u5728\u7f69\u7740\u6211\u4eec : )"),(0,a.kt)("h2",{id:"\u6253\u8d25\u501f\u7528\u68c0\u67e5\u5668"},"\u6253\u8d25\u501f\u7528\u68c0\u67e5\u5668"),(0,a.kt)("p",null,"\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u7f16\u8bd1\u5668\u5f88\u6709\u5e2e\u52a9\uff1a\u5b83\u544a\u8bc9\u6211\u4eec\u9700\u8981\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Repository")," \u4e0a\u5b9e\u73b0 ",(0,a.kt)("inlineCode",{parentName:"p"},"Send")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"Sync"),"\u3002\u8ba9\u6211\u4eec\u4fee\u6539\n",(0,a.kt)("inlineCode",{parentName:"p"},"repositories/pokemon.rs")," \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository: Send + Sync {\n    fn insert(&mut self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert;\n}\n")),(0,a.kt)("p",null,"Rust \u5f88\u5bb9\u6613\uff0c\u5bf9\u5427\uff1f\u6211\u4eec\u7684\u4fee\u590d\u5c06\u975e\u5e38\u5feb\uff0c\u56e0\u4e3a\u4e00\u65e6\u8fd0\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"error[E0621]: explicit lifetime required in the type of `repo`\n --\x3e src/api/mod.rs:7:5\n  |\n6 | pub fn serve(url: &str, repo: &mut dyn Repository) {\n  |                               ------------------- help: add explicit lifetime `'static` to the type of `repo`: `&'static mut (dyn Repository + 'static)`\n")),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u7f16\u8bd1\u5668\u544a\u8bc9\u6211\u4eec\u5b58\u50a8\u5e93\u4e0a\u9700\u8981\u4e00\u4e2a\n\u201c\u9759\u6001\u751f\u547d\u5468\u671f\u201d\u3002\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u8fd9\u91cc\u771f\u6b63\u7684\u95ee\u9898\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u5e0c\u671b\u5c06\u5b58\u50a8\u5e93\u7684\u5f15\u7528\u53d1\u9001\u5230\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u751f\u6210\u7684\u7ebf\u7a0b\u4e2d\u3002\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684\n",(0,a.kt)("inlineCode",{parentName:"p"},"InMemoryRepository"),"\n\u7ed3\u6784\u4f53\u521b\u5efa\u4e86\u4e00\u4e2a\u5b58\u50a8\u5e93\u3002\u95ee\u9898\u662f\uff0c\u5f53\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u5230\u4e3b\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e2a\u5b58\u50a8\u5e93\u7684\u8d44\u6e90\u5c06\u88ab\u91ca\u653e\u3002\u4f46\u4e5f\u8bb8\u6709\u4e9b\u7ebf\u7a0b\u4ecd\u7136\u4f1a\u5f15\u7528\u5230\u5b83\u3002\u6700\u7ec8\u5bfc\u81f4\u7f16\u8bd1\u5668\u9519\u8bef\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u60f3\u8981\u7684\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9\u7a0b\u5e8f\uff0c\u53ea\u6709\u5728\u5f15\u7528\u4e0d\u518d\u5b58\u5728\u65f6\u518d\u91ca\u653e\u6389\u6211\u4eec\u7684\u5b58\u50a8\u5e93\u3002\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u5f15\u7528\u8ba1\u6570\u5668\u3002\u6211\u4eec\u5f88\u5e78\u8fd0\uff0cRust\n\u4e3a\u6b64\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\uff0c\u5176\u4e2d\u4e00\u79cd\u662f\u4e13\u95e8\u4e3a\u4e86\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5b89\u5168\u5171\u4eab\u800c\u521b\u5efa\u7684\u3002\u5b83\u7684\u540d\u5b57\u662f ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Arc")),"\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5c06\u8981\u4f7f\u7528\u7684\u3002"),(0,a.kt)("p",null,"\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u5728 ",(0,a.kt)("em",{parentName:"p"},"main.rs")," \u4e2d\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"Arc")," \u5305\u88c5\u6211\u4eec\u7684\u5b58\u50a8\u5e93\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'use std::sync::Arc;\n\nfn main() {\n    let repo = Arc::new(InMemoryRepository::new());\n    api::serve("localhost:8000", repo);\n}\n')),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u79fb\u9664\u4e86\u4e24\u4e2a\u4e1c\u897f\uff1a\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," \u548c\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"mut"),"\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"Arc"),"\n\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u6b64\u5b83\u7684\u5927\u5c0f\u5728\u7f16\u8bd1\u65f6\u662f\u5df2\u77e5\u7684\u3002\u5b83\u6307\u5411\u4f4d\u4e8e\u5806\u4e2d\u7684\u5b58\u50a8\u5e93\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u5f15\u7528\u5b83\u3002\u5176\u6b21\uff0cArc\n\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u5185\u90e8\u53ef\u53d8\u6027\u3002\u8fd9\u70b9\u6211\u4eec\u7a0d\u540e\u518d\u8c08\u3002"),(0,a.kt)("p",null,"\u73b0\u5728\u8ba9\u6211\u4eec\u4fee\u6539 ",(0,a.kt)("em",{parentName:"p"},"api/mod.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use std::sync::Arc;\n\npub fn serve(url: &str, repo: Arc<dyn Repository>) {\n    rouille::start_server(url, move |req| {\n        router!(req,\n            ...\n            (POST) (/) => {\n                create_pokemon::serve(repo.clone(), req)\n            },\n            ...\n        )\n    });\n}\n")),(0,a.kt)("p",null,"\u6700\u540e\u518d\u6765\u4fee\u6539 ",(0,a.kt)("em",{parentName:"p"},"api/create","_","pokemon.rs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use std::sync::Arc;\n\npub fn serve(_repo: Arc<dyn Repository>, req: &rouille::Request) -> rouille::Response {\n")),(0,a.kt)("p",null,"\u7f16\u8bd1\u6210\u529f \\o/"),(0,a.kt)("h2",{id:"\u57df\u4e5f\u9700\u8981\u7231-"},"\u57df\u4e5f\u9700\u8981\u7231 \ud83d\udc93"),(0,a.kt)("p",null,"\u6211\u4eec\u56f4\u7ed5\u7740\u4e00\u4e2a\u57df\u8bbe\u8ba1\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u7528\u4f8b\u83b7\u53d6\u6570\u636e\u548c\u4e00\u4e2a\u5b58\u50a8\u5e93\u7528\u6765\u4fdd\u5b58\u6570\u636e\u3002\u50cf\u4e4b\u524d\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u5728\u7528\u4f8b\u4e2d\u628a\u5b58\u50a8\u5e93\u66ff\u6362\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Arc"),"\n\u7684\u53ef\u53d8\u5f15\u7528\u3002\u597d\u5728\u6211\u73b0\u5728\u53ea\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7528\u4f8b : ) \u8ba9\u6211\u4eec\u5728 ",(0,a.kt)("em",{parentName:"p"},"domain/create","_","pokemon.rs")," \u4e2d\u4fee\u6539\u51fd\u6570\u7b7e\u540d\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use std::sync::Arc;\n\nfn execute(repo: Arc<dyn Repository>, req: Request) -> Response {\n")),(0,a.kt)("p",null,"\u4e0d\u8981\u5fd8\u8bb0\u6d4b\u8bd5\u4e2d\u4e5f\u8981\u4fee\u6539\uff01"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"let repo = Arc::new(InMemoryRepository::new());\nlet res = execute(repo, req);\n")),(0,a.kt)("p",null,"\u5728\u8fd0\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," \u4e4b\u540e\uff0c\u6211\u4eec\u5076\u7136\u53d1\u73b0\u4e86\u6211\u4e4b\u524d\u8ba8\u8bba\u8fc7\u7684\u4e00\u4e2a\u95ee\u9898\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"Arc")," \u662f\u4e0d\u53ef\u53d8\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"25 |         (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n   |                                                    ^^^^ cannot borrow as mutable\n")),(0,a.kt)("p",null,"\u5982\u679c\u6211\u4eec\u68c0\u67e5 ",(0,a.kt)("em",{parentName:"p"},"repositories/pokemon.rs")," \u4e2d\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"Repository")," Trait\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"insert"),"\n\u65b9\u6cd5\u5e0c\u671b\u5b58\u50a8\u5e93\u662f\u53ef\u53d8\u7684\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository: Send + Sync {\n    fn insert(&mut self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert;\n}\n")),(0,a.kt)("p",null,"\u6240\u4ee5\u6211\u4eec\u5c06\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Repository")," Trait \u548c\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\u5220\u9664\u8fd9\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"mut")," : ) \u8ba9\u6211\u4eec\u8fd0\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"36 |     fn insert(&self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert {\n   |               ----- help: consider changing this to be a mutable reference: `&mut self`\n...\n46 |         self.pokemons.push(Pokemon::new(number_clone, name, types));\n   |         ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n")),(0,a.kt)("p",null,"\u54ce\u5440\uff0c\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u4e0d\u662f\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u4eec\u521a\u521a\u5220\u9664\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"mut"),"\uff0c\u73b0\u5728\u7f16\u8bd1\u5668\u5e0c\u671b\u6211\u4eec\u91cd\u65b0\u6dfb\u52a0\u5b83\u3002\u5b9e\u9645\u4e0a\u8fd9\u662f\u5408\u4e4e\u903b\u8f91\u7684\uff0c\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u5b58\u50a8\u5e93\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Arc")," \u4e2d\u3002"),(0,a.kt)("p",null,"\u6709\u8da3\u7684\u662f\uff0c\u95ee\u9898\u4e0d\u518d\u5728\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"trait"),"\uff0c\u800c\u5728\u4e8e\u6211\u4eec\u7684\u5b58\u50a8\u5e93\u5b9e\u73b0\u3002\u6211\u4eec\u9700\u8981\u80fd\u591f\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," \u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u6539\u53d8\u5185\u90e8\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"pokemons"),"\u3002\n\u8fd9\u5c31\u662f\u5185\u90e8\u53ef\u53d8\u6027\u3002\u800c\u4e14\uff0cRust \u518d\u6b21\u4e3a\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e9b\u539f\u8bed\uff01\u6211\u4eec\u5c06\u9009\u62e9 ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutex")," \u539f\u8bed\uff0c\u56e0\u4e3a\u5b83\u662f\u4e3a\u4e86\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u800c\u8bbe\u8ba1\u7684\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u5c06\n",(0,a.kt)("inlineCode",{parentName:"p"},"pokemons")," \u5305\u88c5\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutex")," \u4e2d\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use std::sync::Mutex;\n\npub struct InMemoryRepository {\n    error: bool,\n    pokemons: Mutex<Vec<Pokemon>>,\n}\n\nimpl InMemoryRepository {\n    pub fn new() -> Self {\n        let pokemons: Mutex<Vec<Pokemon>> = Mutex::new(vec![]);\n        Self {\n            error: false,\n            pokemons,\n        }\n    }\n}\n")),(0,a.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u9501\u5b9a ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutex")," \u624d\u80fd\u8bfb\u53d6\u6216\u5199\u5165\u5b9d\u53ef\u68a6\u3002\u9501\u5b9a ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutex"),"\n\u610f\u5473\u7740\u6240\u6709\u7ebf\u7a0b\u5fc5\u987b\u8f6e\u6d41\u7b49\u5f85\u8bfb\u53d6\u6216\u5199\u5165\u5b83\u6240\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u56e0\u6b64\u540c\u65f6\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u6570\u636e\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Repository for InMemoryRepository {\n    fn insert(&self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert {\n        if self.error {\n            return Insert::Error;\n        }\n\n        let mut lock = match self.pokemons.lock() {\n            Ok(lock) => lock,\n            _ => return Insert::Error,\n        };\n\n        if lock.iter().any(|pokemon| pokemon.number == number) {\n            return Insert::Conflict;\n        }\n\n        let number_clone = number.clone();\n        lock.push(Pokemon::new(number_clone, name, types));\n        Insert::Ok(number)\n    }\n}\n")),(0,a.kt)("p",null,"\u73b0\u5728\u5b83\u7f16\u8bd1\u901a\u8fc7\uff0c\u5e76\u4e14\u6240\u6709\u7684\u6d4b\u8bd5\u4e5f\u4ecd\u7136\u901a\u8fc7\uff01"),(0,a.kt)("h2",{id:"api--domain--3"},"API + domain =< 3"),(0,a.kt)("p",null,"\u662f\u65f6\u5019\u5c06 API \u8fde\u63a5\u5230 Domain \u4e86\u3002\u8ba9\u6211\u4eec\u4fee\u6539 ",(0,a.kt)("inlineCode",{parentName:"p"},"api/create_pokemon.rs"),"\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::create_pokemon;\n\npub fn serve(repo: Arc<dyn Repository>, req: &rouille::Request) -> rouille::Response {\n    let req = match rouille::input::json_input::<Request>(req) {\n        Ok(req) => create_pokemon::Request {\n            number: req.number,\n            name: req.name,\n            types: req.types,\n        },\n        _ => return rouille::Response::from(Status::BadRequest),\n    };\n    match create_pokemon::execute(repo, req) {\n        create_pokemon::Response::Ok(number) => rouille::Response::json(&Response { number }),\n        create_pokemon::Response::BadRequest => rouille::Response::from(Status::BadRequest),\n        create_pokemon::Response::Conflict => rouille::Response::from(Status::Conflict),\n        create_pokemon::Response::Error => rouille::Response::from(Status::InternalServerError),\n    }\n}\n")),(0,a.kt)("p",null,"\u8bb0\u5f97\u628a\u57df\u4e2d\u9700\u8981\u7684\u4ee3\u7801\u6539\u4e3a pub\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"// domain/mod.rs\npub mod create_pokemon;\n\n// domain/create_pokemon.rs\npub struct Request {\n    pub number: u16,\n    pub name: String,\n    pub types: Vec<String>,\n}\n\npub enum Response {\n    ...\n}\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Response {\n    ...\n}\n")),(0,a.kt)("p",null,"\u5728\u6b21\u8fd0\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run")," \u5e76\u5411 ",(0,a.kt)("inlineCode",{parentName:"p"},"create_pokemon")," \u8def\u7531\u53d1\u9001\u6709\u6548\u8bf7\u6c42\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": 30\n}\n')),(0,a.kt)("p",null,"\\o/"),(0,a.kt)("h2",{id:"\u4e0b\u4e00\u6b65"},"\u4e0b\u4e00\u6b65"),(0,a.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u6bd4\u9884\u671f\u7684\u8981\u957f\uff0c\u5bf9\u6b64\u6211\u611f\u5230\u62b1\u6b49\u3002\u5e0c\u671b\u5b83\u5bf9\u4f60\u6709\u7528 :) \u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5b9e\u73b0\u5176\u4ed6\u7684\u7528\u4f8b (\u5ba2\u6237\u538c\u5026\u4e86\u7b49\u5f85\u6211\u89e3\u91ca\u4e00\u5207\uff0c\u5ba2\u6237\u771f\u7cdf\u7cd5 :p)\n\u518d\u4e4b\u540e\uff0c\u6211\u5c06\u5b9e\u73b0\u5176\u4ed6\u7684\u524d\u7aef\u548c\u5b58\u50a8\u5e93\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u516d\u8fb9\u5f62\u67b6\u6784\u7684\u5f3a\u5927\u529f\u80fd\u3002"),(0,a.kt)("p",null,"\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u4ee3\u7801\u53ef\u4ee5\u5728 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/alexislozano/pokedex/tree/article-3"},"github"),"\n\u4e0a\u67e5\u770b\u3002"))}m.isMDXComponent=!0}}]);