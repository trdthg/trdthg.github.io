"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[4192],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),k=i(t),f=a,m=k["".concat(u,".").concat(f)]||k[f]||p[f]||l;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=k;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var i=2;i<l;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},5929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const l={},o="\u4e00\u4e9b\u7b80\u5355\u7684\u5f02\u6b65\u8fd0\u884c\u65f6\ud83d\udc99",s={unversionedId:"projects/mini_tokio",id:"projects/mini_tokio",title:"\u4e00\u4e9b\u7b80\u5355\u7684\u5f02\u6b65\u8fd0\u884c\u65f6\ud83d\udc99",description:"project1",source:"@site/docs/projects/mini_tokio.md",sourceDirName:"projects",slug:"/projects/mini_tokio",permalink:"/docs/projects/mini_tokio",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b9e\u73b0\u4e00\u4e2a mini-bundle",permalink:"/docs/projects/mini_bundle"},next:{title:"Vue Mastery",permalink:"/docs/projects/mini_vue"}},u={},i=[{value:"project1",id:"project1",level:2},{value:"\u6846\u67b6",id:"\u6846\u67b6",level:3},{value:"project2",id:"project2",level:3},{value:"project2",id:"project2-1",level:2},{value:"\u6846\u67b6",id:"\u6846\u67b6-1",level:3},{value:"wake \u5b9e\u73b0",id:"wake-\u5b9e\u73b0",level:3},{value:"\u4e0d\u4f18\u96c5\u7684\u5173\u95ed",id:"\u4e0d\u4f18\u96c5\u7684\u5173\u95ed",level:3},{value:"project3",id:"project3",level:3}],c={toc:i};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4e00\u4e9b\u7b80\u5355\u7684\u5f02\u6b65\u8fd0\u884c\u65f6"},"\u4e00\u4e9b\u7b80\u5355\u7684\u5f02\u6b65\u8fd0\u884c\u65f6\ud83d\udc99"),(0,a.kt)("h2",{id:"project1"},"project1"),(0,a.kt)("p",null,"\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u5c0f\u7684 runtime"),(0,a.kt)("h3",{id:"\u6846\u67b6"},"\u6846\u67b6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"executor(MiniTokio): \u4fdd\u5b58\u4efb\u52a1\u961f\u5217\uff0c\u4e0d\u65ad\u5c1d\u8bd5 poll \u6bcf\u4e2a task\uff0c\u5982\u679c\u4efb\u52a1\u5b8c\u6210\u5c31\u79fb\u9664\u961f\u5217\uff0c\u5982\u679c\u6ca1\u6709\u5b8c\u6210\u5c31\u52a0\u5230\u961f\u5c3e",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct MiniTokio {\n    tasks: VecDeque<Task>,\n}\nimpl MiniTokio {\n    pub fn new() -> Self {\n        Self {\n            tasks: VecDeque::new(),\n        }\n    }\n    fn run(&mut self) {\n        let waker = futures::task::noop_waker();\n        let mut cx = Context::from_waker(&waker);\n        while let Some(mut task) = self.tasks.pop_front() {\n            if task.as_mut().poll(&mut cx).is_pending() {\n                println!("a");\n                self.tasks.push_back(task);\n            }\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},"task: \u5c01\u88c5\u4e86 future",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"type Task = Pin<Box<dyn Future<Output = ()>>>;\n"))),(0,a.kt)("li",{parentName:"ul"},"spawner: \u4f5c\u4e3a runtime \u7684\u51fd\u6570\uff0c\u5c06 task \u6dfb\u52a0\u5230\u961f\u5c3e",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"fn spawn<F>(&mut self, f: F)\nwhere\n    F: Future<Output = ()> + 'static,\n{\n    self.tasks.push_back(Box::pin(f));\n}\n")))),(0,a.kt)("h3",{id:"project2"},"project2"),(0,a.kt)("p",null,"execotor \u672c\u8eab\u7684 push_back \u64cd\u4f5c\u5c31\u662f wake \u7684\u5b9e\u73b0"),(0,a.kt)("p",null,"\u53ea\u8981\u6ca1\u6709 ready \u5c31\u91cd\u65b0\u52a0\u5165\u961f\u5217\uff0c\u8fd9\u79cd\u505a\u6cd5\u6267\u884c\u5931\u8d25\u5c31\u7acb\u5373\u91cd\u4f1a\u5360\u7528\u5927\u91cf cpu \u8d44\u6e90\uff0c\u5e94\u8be5\u7b49\u5230 ready \u662f\u5728\u91cd\u65b0\u5524\u9192 (\u52a0\u5165\u961f\u5217)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn poll(self: Pin<&mut Self>, cx: &mut Context<\'_>) -> Poll<Self::Output> {\n    if (Instant::now() >= self.when) {\n        Poll::Ready("aaa")\n    } else {\n        Poll::Pending\n    }\n}\n')),(0,a.kt)("h2",{id:"project2-1"},"project2"),(0,a.kt)("h3",{id:"\u6846\u67b6-1"},"\u6846\u67b6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"execotor: \u53ea\u9700\u8981\u4e00\u4e2a receiver\uff0c\u4e0d\u65ad\u5c1d\u8bd5\u63a5\u53d7\u4efb\u52a1\u53bb poll\uff0c\u7ed3\u679c\u662f\u4ec0\u4e48\u65e0\u6240\u8c13"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct MiniTokio {\n    sender: Sender<Arc<Task>>,  // \u7b49\u4f1a\u5728\u8bf4\u8fd9\u4e2a\n    receiver: Receiver<Arc<Task>>,\n}\n\nimpl MiniTokio {\n    pub fn new() -> Self {\n        let (cx, rx) = crossbeam::channel::unbounded();\n        Self {\n            sender: cx,\n            receiver: rx,\n        }\n    }\n\n    fn run(&self) {\n        while let Ok(task) = self.receiver.recv() {\n            let waker = futures::task::waker(task.clone());\n            let mut cx = Context::from_waker(&waker);\n            let mut future = task.future.lock().expect("\u52a0\u9501\u5931\u8d25");\n            let _ = future.as_mut().poll(&mut cx);\n        }\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"task: \u9664\u4e86 future \u8fd8\u6709\u4e00\u4e2a sender, task \u5b9e\u73b0\u4e86 Waker\uff0c\u5f53 task pending \u65f6\u4f1a\u6309\u7167\u7b56\u7565\u8c03\u7528 wake \u65b9\u6cd5\uff0c\n\u628a\u81ea\u5df1 send \u5230 execotor"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'struct Task {\n    future: Mutex<Pin<Box<dyn Future<Output = ()> + Send>>>,\n    sender: Sender<Arc<Task>>,\n}\n\nimpl ArcWake for Task {\n    fn wake_by_ref(arc_self: &Arc<Self>) {\n        arc_self\n            .sender\n            .send(arc_self.clone())\n            .expect("send \u4f1a queue \u5931\u8d25\u4e86");\n    }\n}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"spawner: \u56e0\u4e3a execotor \u73b0\u5728\u540c\u65f6\u4fdd\u7559\u7740 sender \u548c receiver\uff0c\u4e24\u8005\u90fd\u4e0d\u4f1a\u88ab drop\uff0c\u7a0b\u5e8f\u4e0d\u80fd\u6b63\u5e38\u9000\u51fa\uff0c\u4e0b\u4e00\u6b65\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u5206\u79bb"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn spawn<F>(&self, future: F)\n    where\n        F: Future<Output = ()> + Send + \'static,\n    {\n        let task = Task {\n            future: Mutex::new(Box::pin(future)),\n            sender: self.sender.clone(),\n        };\n        self.sender\n            .send(Arc::new(task))\n            .expect("spawner send new task failed");\n    }\n')))),(0,a.kt)("h3",{id:"wake-\u5b9e\u73b0"},"wake \u5b9e\u73b0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn poll(self: Pin<&mut Self>, cx: &mut Context<\'_>) -> Poll<Self::Output> {\n    if Instant::now() >= self.when {\n        Poll::Ready("aaa")\n    } else {\n        // \u8fd9\u91cc\u8c03\u7528 wake \u4f9d\u8d56\u7684\u662f task \u5b9e\u73b0\u7684 wake \u65b9\u6cd5\n\n        // 1. \u7acb\u5373 send\n        cx.waker().wake_by_ref();\n\n        // 2. \u8fd9\u4e2a\u662f\u7a0d\u5fae\u4f18\u5316\u8fc7\u7684 wake \u7b56\u7565\n        let waker = cx.waker().clone();\n        let when = self.when;\n        thread::spawn(move || {\n            let now = Instant::now();\n            if now < when {\n                thread::sleep(when - now);\n            }\n            waker.wake();\n        });\n        Poll::Pending\n    }\n}\n')),(0,a.kt)("h3",{id:"\u4e0d\u4f18\u96c5\u7684\u5173\u95ed"},"\u4e0d\u4f18\u96c5\u7684\u5173\u95ed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},'fn main() {\n    let mut runtime = MiniTokio::new();\n    runtime.spawn(async {\n        let when = Instant::now() + Duration::from_secs(2);\n        let future = Delay::new(when);\n\n        let out = future.await;\n        assert_eq!(out, "aaa");\n\n        println!("{out}");\n        std::process::exit(0);  // \u9700\u8981\u624b\u52a8\u9000\u51fa\n    });\n    runtime.run();\n}\n')),(0,a.kt)("h3",{id:"project3"},"project3"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5206\u79bb executor(receiver) \u548c spawner(sender), \u5f53 receiver \u8fd0\u884c\u7ed3\u675f\u540e receiver \u5c31\u9500\u6bc1")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"struct Executor {\n    ready_queue: Receiver<Arc<Task>>,\n}\n\nstruct Task {\n    future: Mutex<Option<BoxFuture<'static, ()>>>,\n    task_sender: SyncSender<Arc<Task>>,\n}\n\nstruct Spawner {\n    task_sender: SyncSender<Arc<Task>>,\n}\n")))}p.isMDXComponent=!0}}]);