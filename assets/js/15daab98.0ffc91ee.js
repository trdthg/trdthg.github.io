"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[5867],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},i={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),k=m(t),c=o,_=k["".concat(l,".").concat(c)]||k[c]||i[c]||a;return t?r.createElement(_,p(p({ref:n},u),{},{components:t})):r.createElement(_,p({ref:n},u))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,p=new Array(a);p[0]=k;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,p[1]=s;for(var m=2;m<a;m++)p[m]=t[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},7672:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>i,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(7462),o=(t(7294),t(3905));const a={},p=void 0,s={permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 2 \u5185\u5b58\u5b58\u50a8\u5e93",source:"@site/blog/2022-04-03-[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 2 \u5185\u5b58\u5b58\u50a8\u5e93.md",title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 2 \u5185\u5b58\u5b58\u50a8\u5e93",description:"\u539f\u6587\u94fe\u63a5\uff1ahttps://alexis-lozano.com/hexagonal-architecture-in-rust-2/",date:"2022-04-03T00:00:00.000Z",formattedDate:"2022\u5e744\u67083\u65e5",tags:[],readingTime:10.075,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 1 \u57df",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 1 \u57df"},nextItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 3 HTTP API"}},l={authorsImageUrls:[]},m=[{value:"\u5185\u5b58\u5b58\u50a8\u5e93",id:"\u5185\u5b58\u5b58\u50a8\u5e93",level:2},{value:"\u4ee5\u4e3a\u5df2\u7ecf\u7ed3\u675f\u4e86\u5417\uff1f",id:"\u4ee5\u4e3a\u5df2\u7ecf\u7ed3\u675f\u4e86\u5417",level:2},{value:"\u4e0b\u4e00\u6b65",id:"\u4e0b\u4e00\u6b65",level:2}],u={toc:m};function i(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u539f\u6587\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-2/"},"https://alexis-lozano.com/hexagonal-architecture-in-rust-2/")),(0,o.kt)("p",{parentName:"blockquote"},"\u7ffb\u8bd1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u9009\u9898\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u7531 ",(0,o.kt)("a",{parentName:"p",href:"https://Rustt.org"},"Rustt")," \u7ffb\u8bd1\uff0c",(0,o.kt)("a",{parentName:"p",href:"https://studyrust.org"},"StudyRust")," \u8363\u8a89\u63a8\u51fa")),(0,o.kt)("h1",{id:"2021-08-24---rust-\u516d\u8fb9\u5f62\u67b6\u6784-2---\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u5e93"},"2021-08-24 - Rust \u516d\u8fb9\u5f62\u67b6\u6784 #2 - \u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u5e93"),(0,o.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e0b\u9762\u7cfb\u5217\u7684\u4e00\u90e8\u5206"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-1/"},"Hexagonal architecture in Rust #1 - Domain")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-2/"},"Hexagonal architecture in Rust #2 - In-memory repository")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-3/"},"Hexagonal architecture in Rust #3 - HTTP API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-4/"},"Hexagonal architecture in Rust #4 - Refactoring")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-5/"},"Hexagonal architecture in Rust #5 - Remaining use-cases")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-6/"},"Hexagonal architecture in Rust #6 - CLI")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-7/"},"Hexagonal architecture in Rust #7 - Long-lived repositories"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u514d\u8d23\u58f0\u660e\uff1a\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5bf9\u5b58\u50a8\u5e93\u4f1a\u4f7f\u7528\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u53ea\u662f\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u5b83\u3002\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u4f1a\u8fdb\u884c\u4e00\u4e9b\u4f18\u5316 : )")),(0,o.kt)("p",null,"\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u642d\u5efa\u57fa\u672c\u7684\u9879\u76ee\u67b6\u6784\u3002\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u57df\u6a21\u5757\uff0c\u91cc\u9762\u5305\u542b\u4e00\u4e2a\u7528\u4f8b\u548c\u4e00\u4e9b\u5b9e\u4f53\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"src\n\u251c\u2500\u2500 domain\n\u2502   \u251c\u2500\u2500 create_pokemon.rs\n\u2502   \u251c\u2500\u2500 entities.rs\n\u2502   \u2514\u2500\u2500 mod.rs\n\u2514\u2500\u2500 main.rs\n")),(0,o.kt)("h2",{id:"\u5185\u5b58\u5b58\u50a8\u5e93"},"\u5185\u5b58\u5b58\u50a8\u5e93"),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"create_pokemon")," \u7528\u4f8b\u3002\n\u76ee\u524d\uff0c\u5b83\u53ef\u4ee5\u5728\u6210\u529f\u65f6\u8fd4\u56de\u5b9d\u53ef\u68a6\u7684\u6570\u91cf\uff0c\u5f53\u8bf7\u6c42\u53c2\u6570\u4e0d\u7b26\u5408\u4e1a\u52a1\u89c4\u5219\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u73b0\u5728\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u5b9e\u9645\u5b58\u50a8\u5b9d\u53ef\u68a6\u7684\u5730\u65b9\u3002\u8ba9\u6211\u4eec\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff01\u4f60\u5e94\u8be5\u77e5\u9053\u6211\u559c\u6b22\u4ece\u4ec0\u4e48\u5f00\u59cb\uff1a\u4e00\u4e2a\u6d4b\u8bd5\n: )\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u5c06\u68c0\u67e5\u6211\u4eec\u4e0d\u80fd\u6709\u4e24\u4e2a\u76f8\u540c\u7f16\u53f7\u7684\u5b9d\u53ef\u68a6\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'use crate::repositories::pokemon::InMemoryRepository;\n\n#[test]\nfn it_should_return_a_conflict_error_when_pokemon_number_already_exists() {\n    let number = PokemonNumber::try_from(25).unwrap();\n    let name = PokemonName::try_from(String::from("Pikachu")).unwrap();\n    let types = PokemonTypes::try_from(vec![String::from("Electric")]).unwrap();\n    let mut repo = InMemoryRepository::new();\n    repo.insert(number, name, types);\n    let req = Request {\n        number: 25,\n        name: String::from("Charmander"),\n        types: vec![String::from("Fire")],\n    };\n\n    let res = execute(&mut repo, req);\n\n    match res {\n        Response::Conflict => {}\n        _ => unreachable!(),\n    }\n}\n')),(0,o.kt)("p",null,"\u5728\u4e2a\u7528\u4f8b\u7684\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u5b58\u50a8\u5e93\u4e2d\u63d2\u5165\u4e00\u4e2a\u5b9d\u53ef\u68a6\u3002\u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u7528\u4f8b\u518d\u6b21\u63d2\u5165\u4e00\u4e2a\u5177\u6709\u76f8\u540c\u7f16\u53f7\u7684\u5b9d\u53ef\u68a6\u3002\u7528\u4f8b\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u51b2\u7a81\u9519\u8bef\u3002"),(0,o.kt)("p",null,"\u50cf\u4e4b\u524d\u4e00\u6837\uff0c\u5b83\u73b0\u5728\u8fd8\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684\u5f88\u591a\u4ee3\u7801\u90fd\u6ca1\u6709\u5b9e\u73b0\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5c06 ",(0,o.kt)("inlineCode",{parentName:"p"},"Conflict")," \u9519\u8bef\u6dfb\u52a0\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," \u679a\u4e3e\u4e2d\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"enum Response {\n    ...\n    Conflict,\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\uff0c\u5728\u5b9d\u53ef\u68a6\u7c7b\u578b\u4e2d\u589e\u52a0\u4e00\u4e2a\u706b\u5c5e\u6027"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'enum PokemonType {\n    Electric,\n    Fire,\n}\n\nimpl TryFrom<String> for PokemonType {\n    type Error = ();\n\n    fn try_from(t: String) -> Result<Self, Self::Error> {\n        match t.as_str() {\n            "Electric" => Ok(Self::Electric),\n            "Fire" => Ok(Self::Fire),\n            _ => Err(()),\n        }\n    }\n}\n')),(0,o.kt)("p",null,"\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u5e93\u662f\u4ec0\u4e48\u3002\u5b83\u662f\u5728\u6211\u4eec\u4e0d\u77e5\u9053\u5ba2\u6237\u5c06\u8981\u4f7f\u7528\u4ec0\u4e48\u4f5c\u4e3a\u5b58\u50a8\u5e93\u65f6\uff0c\u6682\u65f6\u4f7f\u7528\u7684\u5b58\u50a8\u5e93\u3002\u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5b9e\u73b0\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u3002\u56e0\u4e3a\u5b83\u53ef\u4ee5\u50cf\u771f\u6b63\u7684\u5b58\u50a8\u5e93\u4e00\u6837\u5de5\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u5b83\u53bb\u5411\u5ba2\u6237\u5c55\u793a\u6211\u4eec\u7684\u8fdb\u5ea6\u5e76\u8981\u6c42\u4ed6\u63d0\u4f9b\u53cd\u9988\u3002\u5982\u4f60\u6240\u89c1\uff0c\u5b58\u50a8\u5e93\n",(0,o.kt)("inlineCode",{parentName:"p"},"repo")," \u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u9012\u7ed9\u7528\u4f8b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::Repository;\n\nfn execute(repo: &mut dyn Repository, req: Request) -> Response {\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\u5e76\u4e0d\u4f1a\u5f97\u5230\u5177\u4f53\u7684\u5b58\u50a8\u5e93\u5b9e\u73b0\uff0c\u800c\u662f\u4efb\u4f55\u5b9e\u73b0\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"Reposity")," \u7279\u5f81\u7684\u7ed3\u6784\u4f53\u3002\u8ba9\u6211\u4eec\u5728\u4e4b\u524d\u7684\u4e24\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4e5f\u8865\u5145\nrepo \u53c2\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[test]\nfn it_should_return_a_bad_request_error_when_request_is_invalid() {\n    let mut repo = InMemoryRepository::new();\n    let req = Request {\n    ...\n    let res = execute(&mut repo, req);\n    ...\n}\n\n#[test]\nfn it_should_return_the_pokemon_number_otherwise() {\n    let mut repo = InMemoryRepository::new();\n    let number = 25;\n    ...\n    let res = execute(&mut repo, req);\n    ...\n}\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5728\u65b0\u6a21\u5757 ",(0,o.kt)("em",{parentName:"p"},"repositories/pokemon.rs")," \u4e2d\u53bb\u5b9a\u4e49 ",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository")," \u7ed3\u6784\u4f53 \u548c\n",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," \u7279\u5f81\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"src\n\u251c\u2500\u2500 domain\n\u2502   \u251c\u2500\u2500 create_pokemon.rs\n\u2502   \u251c\u2500\u2500 entities.rs\n\u2502   \u2514\u2500\u2500 mod.rs\n\u251c\u2500\u2500 repositories\n\u2502   \u251c\u2500\u2500 mod.rs\n\u2502   \u2514\u2500\u2500 pokemon.rs\n\u2514\u2500\u2500 main.rs\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository {}\n\npub struct InMemoryRepository;\n\nimpl Repository for InMemoryRepository {}\n")),(0,o.kt)("p",null,"\u4e0d\u8981\u5fd8\u4e86\u5f15\u7528\u6a21\u5757"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"// main.rs\nmod repositories;\n\n// repositories/mod.rs\npub mod pokemon;\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository")," \u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," \u65b9\u6cd5\u3002\u5728\u8fd9\u91cc\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository"),"\n\u5185\u90e8\u53ea\u662f\u7b80\u5355\u7684\u5b58\u50a8\u4e86\u4e00\u4e2a\u5b9d\u53ef\u68a6\u5217\u8868"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::Pokemon;\n\npub struct InMemoryRepository {\n    pokemons: Vec<Pokemon>,\n}\n\nimpl InMemoryRepository {\n    pub fn new() -> Self {\n        let pokemons: Vec<Pokemon> = vec![];\n        Self { pokemons }\n    }\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\uff0c\u7ec8\u4e8e\u662f\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon")," \u5b9e\u4f53\u7684\u65f6\u5019\u4e86\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Pokemon {\n    pub number: PokemonNumber,\n    name: PokemonName,\n    types: PokemonTypes,\n}\n\nimpl Pokemon {\n    pub fn new(number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Self {\n        Self {\n            number,\n            name,\n            types\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06 ",(0,o.kt)("inlineCode",{parentName:"p"},"entities.rs")," \u8f6c\u4e3a\u516c\u5f00\u7684\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"// domain/mod.rs\npub mod entities;\n")),(0,o.kt)("p",null,"\u73b0\u5728\u552f\u4e00\u6ca1\u6709\u88ab\u5b9e\u73b0\u7684\u5c31\u5269\u4e0b ",(0,o.kt)("inlineCode",{parentName:"p"},"insert")," \u65b9\u6cd5\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u4efb\u4f55\u5b9e\u73b0\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"Repository")," \u7279\u5f81\u7684\u5b58\u50a8\u5e93\u4e0a\u90fd\u80fd\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u5728 Trait\n\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\uff0c\u5e76\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository")," \u7ed3\u6784\u4f53\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"insert")," \u65b9\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::{Pokemon, PokemonName, PokemonNumber, PokemonTypes};\n\npub trait Repository {\n    fn insert(&self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> PokemonNumber;\n}\n\nimpl Repository for InMemoryRepository {\n    fn insert(&self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> PokemonNumber {\n        number\n    }\n}\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u5c1d\u8bd5\u8fd0\u884c\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 3 tests\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_the_pokemon_number_otherwise ... ok\ntest it_should_return_a_conflict_error_when_pokemon_number_already_exists ... FAILED\n")),(0,o.kt)("p",null,"\u7b2c\u4e09\u4e2a\u6d4b\u8bd5\u5931\u8d25\u4e86\uff0c\u63d2\u5165\u6210\u529f\u65f6\uff0cinsert \u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5b9d\u53ef\u68a6\u7684\u7f16\u53f7\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u7f16\u53f7\u5df2\u7ecf\u5b58\u5728\uff0c\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u51b2\u7a81\u7684\u9519\u8bef\u3002\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u8981\u586b\u52a0\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"Insert"),"\n\u7ed3\u6784\u4f53\u8868\u793a\u8fd9\u4e24\u79cd\u7ed3\u679c\uff0c\u540c\u65f6\u8981\u5c06\u539f\u672c\u7684\u4e0d\u53ef\u8fb9\u501f\u7528\u53d8\u4e3a\u53ef\u53d8\u501f\u7528\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum Insert {\n    Ok(PokemonNumber),\n    Conflict,\n}\n\npub trait Repository {\n    fn insert(&mut self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert;\n}\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u5b9e\u73b0 InMemoryRepository \u7684 insert \u65b9\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"impl Repository for InMemoryRepository {\n    fn insert(&mut self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert {\n        if self.pokemons.iter().any(|pokemon| pokemon.number == number) {\n            return Insert::Conflict;\n        }\n\n        let number_clone = number.clone();\n        self.pokemons.push(Pokemon::new(number_clone, name, types));\n        Insert::Ok(number)\n    }\n}\n")),(0,o.kt)("p",null,"\u4e3a\u4e86\u8ba9 ",(0,o.kt)("inlineCode",{parentName:"p"},"clone")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," \u901a\u8fc7\u7f16\u8bd1\uff0c\u6211\u4eec\u8fd8\u8981\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonNumber")," \u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"PartialEq")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"Clone")," \u4e24\u4e2a\u7279\u5f81\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use std::cmp::PartialEq;\n\n#[derive(PartialEq, Clone)]\npub struct PokemonNumber(u16);\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u8ba9 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\u8c03\u7528 insert \u65b9\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"fn execute(repo: &mut dyn Repository, req: Request) -> Response {\n    match (\n        PokemonNumber::try_from(req.number),\n        PokemonName::try_from(req.name),\n        PokemonTypes::try_from(req.types),\n    ) {\n        (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n            Insert::Ok(number) => Response::Ok(u16::from(number)),\n            Insert::Conflict => Response::Conflict,\n        },\n        _ => Response::BadRequest,\n    }\n}\n")),(0,o.kt)("p",null,"\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 3 tests\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_the_pokemon_number_otherwise ... ok\ntest it_should_return_a_conflict_error_when_pokemon_number_already_exists ... ok\n")),(0,o.kt)("p",null,"\u592a\u68d2\u4e86\uff0c\u51b2\u7a81\u6d4b\u8bd5\u4e5f\u901a\u8fc7\u4e86\uff01"),(0,o.kt)("h2",{id:"\u4ee5\u4e3a\u5df2\u7ecf\u7ed3\u675f\u4e86\u5417"},"\u4ee5\u4e3a\u5df2\u7ecf\u7ed3\u675f\u4e86\u5417\uff1f"),(0,o.kt)("p",null,"\u6ca1\u6709\u3002\u5728\u5b58\u50a8\u5e93\u4e2d\u8fd8\u6709\u4e00\u79cd\u95ee\u9898\u4f1a\u53d1\u751f\u3002\u5047\u8bbe\u7531\u4e8e\u67d0\u4e9b\u610f\u5916\uff0c\u5b58\u50a8\u5e93\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u662f\u6570\u636e\u5e93\uff0c\u90a3\u5c31\u662f\u8fde\u63a5\u9519\u8bef\uff0c\u5982\u679c\u662f API\uff0c\u90a3\u5c31\u662f\u7f51\u7edc\u9519\u8bef\u3002\u6211\u4eec\u4e5f\u5e94\u8be5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002"),(0,o.kt)("p",null,"\u4f60\u77e5\u9053\u6211\u73b0\u5728\u8981\u505a\u4ec0\u4e48\uff1a\u5199\u4e00\u4e2a\u6d4b\u8bd5\uff01"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},'#[test]\nfn it_should_return_an_error_when_an_unexpected_error_happens() {\n    let mut repo = InMemoryRepository::new().with_error();\n    let number = 25;\n    let req = Request {\n        number,\n        name: String::from("Pikachu"),\n        types: vec![String::from("Electric")],\n    };\n\n    let res = execute(&mut repo, req);\n\n    match res {\n        Response::Error => {}\n        _ => unreachable!(),\n    };\n}\n')),(0,o.kt)("p",null,"\u8fd9\u4e2a\u6d4b\u8bd5\u6709\u4e24\u4e2a\u4e0d\u540c\u70b9\u3002\u7b2c\u4e00\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"with_error")," \u65b9\u6cd5\u8868\u793a\u5b58\u50a8\u5e93\u8fde\u63a5\u5f02\u5e38\u3002\u7b2c\u4e8c\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5 Respnse \u662f\u5426\u53d1\u751f\u5f02\u5e38\u3002"),(0,o.kt)("p",null,"\u9996\u5148\u4e3a Response \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"enum Response {\n    ...\n    Error,\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u8981\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"with_error")," \u65b9\u6cd5\uff0c\u6211\u7684\u60f3\u6cd5\u662f\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"InMemoryRepository")," \u4e2d\u589e\u52a0\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),"\n\u5b57\u6bb5\uff0c\u8868\u793a\u662f\u5426\u4f1a\u5728\u8fde\u63a5\u5b58\u50a8\u5e93\u65f6\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," \u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," \u6211\u4eec\u5c31\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u5426\u5219\u8fd4\u56de\u6b63\u5e38\u7ed3\u679c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum Insert {\n    ...\n    Error,\n}\n\npub struct InMemoryRepository {\n    error: bool,\n    pokemons: Vec<Pokemon>,\n}\n\nimpl InMemoryRepository {\n    pub fn new() -> Self {\n        let pokemons: Vec<Pokemon> = vec![];\n        Self {\n            error: false,\n            pokemons,\n        }\n    }\n\n    pub fn with_error(self) -> Self {\n        Self {\n            error: true,\n            ..self\n        }\n    }\n}\n\nimpl Repository for InMemoryRepository {\n    fn insert(&mut self, number: PokemonNumber, name: PokemonName, types: PokemonTypes) -> Insert {\n        if self.error {\n            return Insert::Error;\n        }\n\n        if self.pokemons.iter().any(|pokemon| pokemon.number == number) {\n            return Insert::Conflict;\n        }\n\n        let number_clone = number.clone();\n        self.pokemons.push(Pokemon::new(number_clone, name, types));\n        Insert::Ok(number)\n    }\n}\n")),(0,o.kt)("p",null,"\u540c\u6837\u7684\uff0c\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u4e2d\u5904\u7406\u8fd9\u79cd\u60c5\u51b5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"fn execute(repo: &mut dyn Repository, req: Request) -> Response {\n    match (\n        PokemonNumber::try_from(req.number),\n        PokemonName::try_from(req.name),\n        PokemonTypes::try_from(req.types),\n    ) {\n        (Ok(number), Ok(name), Ok(types)) => match repo.insert(number, name, types) {\n            Insert::Ok(number) => Response::Ok(u16::from(number)),\n            Insert::Conflict => Response::Conflict,\n            Insert::Error => Response::Error,\n        },\n        _ => Response::BadRequest,\n    }\n}\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u8fd0\u884c\u6d4b\u8bd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 4 tests\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_a_conflict_error_when_pokemon_number_already_exists ... ok\ntest it_should_return_an_error_when_an_unexpected_error_happens ... ok\ntest it_should_return_the_pokemon_number_otherwise ... ok\n")),(0,o.kt)("p",null,"\\o/"),(0,o.kt)("h2",{id:"\u4e0b\u4e00\u6b65"},"\u4e0b\u4e00\u6b65"),(0,o.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u7684\u957f\u5ea6\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u8ba9\u6211\u4eec\u6682\u65f6\u505c\u5230\u8fd9\u91cc\u3002\u4e0b\u4e00\u6b21\uff0c\u6211\u5c06\u4e3a\u524d\u7aef\u90e8\u5206\u5148\u5b9e\u73b0 HTTP\nAPI\u3002\u4e4b\u540e\u6211\u4f1a\u5904\u7406\u5176\u4ed6\u7684\u7528\u4f8b\u3002\u6211\u4eec\u4e4b\u540e\u8fd8\u4f1a\u5b9e\u73b0\u66f4\u591a\u7684\u5b58\u50a8\u5e93\u548c\u524d\u7aef\u63a5\u53e3\uff0c\u8fd9\u4e9b\u529f\u80fd\u4f1a\u901a\u8fc7\u6dfb\u52a0\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u8fdb\u884c\u5f00\u542f\u3002"),(0,o.kt)("p",null,"\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6211\u4f1a\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alexislozano/pokedex/tree/article-2"},"github"),"\n\u4e0a\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u6240\u6709\u66f4\u6539\u7684\u5206\u652f\u3002"))}i.isMDXComponent=!0}}]);