"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[3404],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),c=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return l.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},u=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),f=r,_=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return t?l.createElement(_,o(o({ref:n},p),{},{components:t})):l.createElement(_,o({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var l=t(7462),r=(t(7294),t(3905));const a={},o="IO \u591a\u8def\u590d\u7528",i={unversionedId:"magic/linuxIO",id:"magic/linuxIO",title:"IO \u591a\u8def\u590d\u7528",description:"Rust \u4f7f\u7528 Epoll",source:"@site/docs/magic/linuxIO.md",sourceDirName:"magic",slug:"/magic/linuxIO",permalink:"/docs/magic/linuxIO",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Haskell \u8bed\u8a00",permalink:"/docs/magic/haskell"},next:{title:"\u539f\u5b50\u64cd\u4f5c\u4e0e\u5185\u5b58\u987a\u5e8f",permalink:"/docs/magic/memory_ordering"}},s={},c=[{value:"Rust \u4f7f\u7528 Epoll",id:"rust-\u4f7f\u7528-epoll",level:2},{value:"\u5176\u4ed6",id:"\u5176\u4ed6",level:2},{value:"errno.h",id:"errnoh",level:3},{value:"\u5b9a\u4e49",id:"\u5b9a\u4e49",level:4},{value:"\u4fee\u6539 errno \u7684\u503c",id:"\u4fee\u6539-errno-\u7684\u503c",level:4},{value:"\u9519\u8bef\u7801\u5bf9\u4e0d\u540c\u51fd\u6570\u6709\u4e0d\u540c\u610f\u4e49",id:"\u9519\u8bef\u7801\u5bf9\u4e0d\u540c\u51fd\u6570\u6709\u4e0d\u540c\u610f\u4e49",level:4},{value:"\u5982\u4f55\u5e94\u5bf9",id:"\u5982\u4f55\u5e94\u5bf9",level:4},{value:"\u5982\u4f55\u4fdd\u8bc1\u7ebf/\u8fdb\u7a0b\u5b89\u5168",id:"\u5982\u4f55\u4fdd\u8bc1\u7ebf\u8fdb\u7a0b\u5b89\u5168",level:4}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"io-\u591a\u8def\u590d\u7528"},"IO \u591a\u8def\u590d\u7528"),(0,r.kt)("h2",{id:"rust-\u4f7f\u7528-epoll"},"Rust \u4f7f\u7528 Epoll"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},'use std::{\n    collections::HashMap,\n    io::{self, Read, Write},\n    net::{TcpListener, TcpStream},\n    os::unix::prelude::{AsRawFd, RawFd},\n};\n\n#[allow(unused_macros)]\nmacro_rules! syscall {\n    ($fn: ident ( $($arg: expr),* $(,)* ) ) => {{\n        let res = unsafe { libc::$fn($($arg, )*) };\n        if res == -1 {\n            Err(std::io::Error::last_os_error())\n        } else {\n            Ok(res)\n        }\n    }};\n}\n\nconst HTTP_RESP: &[u8] = b"HTTP/1.1 200 OK\ncontent-type: text/html\ncontent-length: 5\n\nHello";\n\nconst READ_FLAGS: i32 = libc::EPOLLONESHOT | libc::EPOLLIN;\nconst WRITE_FLAGS: i32 = libc::EPOLLONESHOT | libc::EPOLLOUT;\n\n#[derive(Debug)]\npub struct RequestContext {\n    pub stream: TcpStream,\n    pub content_length: usize,\n    pub buf: Vec<u8>,\n}\n\nimpl RequestContext {\n    fn new(stream: TcpStream) -> Self {\n        Self {\n            stream,\n            buf: Vec::new(),\n            content_length: 0,\n        }\n    }\n\n    fn read_cb(&mut self, key: u64, epoll_fd: RawFd) -> io::Result<()> {\n        let mut buf = [0u8; 4096];\n        // \u8fd9\u91cc stream \u5e94\u8be5\u4e0d\u4f1a\u963b\u585e\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u5728\u88ab\u901a\u77e5\u540e\u624d\u8c03\u7528\u7684\n        match self.stream.read(&mut buf) {\n            Ok(_) => {\n                if let Ok(data) = std::str::from_utf8(&buf) {\n                    // \u5982\u679c\u8fd9\u6bb5\u6570\u636e\u662f\u5f00\u59cb\uff0c\u5c31\u80fd\u8bbe\u7f6e Content-length.\n                    // \u5982\u679c\u662f data \u7684\u4e00\u90e8\u5206\uff0c\u90a3\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u5b89\u5fc3\u8bfb\u53d6\u5c31\u5b8c\u4e8b\u4e86\n                    self.parse_and_set_content_length(data);\n                }\n            }\n            Err(e) if e.kind() == io::ErrorKind::WouldBlock => {}\n            Err(e) => {\n                return Err(e);\n            }\n        }\n\n        // \u628a\u4e34\u65f6\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u8ffd\u52a0\u5230\u7ed3\u6784\u4f53\u4e0a\u4e0b\u6587\u91cc\n        self.buf.extend_from_slice(&buf);\n\n        // \u5224\u65ad\u4ee5\u4e0b\u8bfb\u6ca1\u8bfb\u5b8c\uff0c\u5982\u679c\u6ca1\u6709\u8bfb\u5b8c\uff0c\u5c31\u91cd\u65b0\u6ce8\u518c\u4e3a\u8bfb\uff0c\u4e0b\u6b21\u63a5\u7740\u8bfb\u3002\u5426\u5219\u6ce8\u518c\u4e3a\u5199\uff0c\u7ed9\u5ba2\u6237\u7aef\u56de\u590d\n        if self.buf.len() >= self.content_length {\n            println!("got all data: {} bytes", self.buf.len());\n            modify_interest(epoll_fd, self.stream.as_raw_fd(), listener_write_event(key))?;\n        } else {\n            println!("read not end: {} bytes", self.buf.len());\n            modify_interest(epoll_fd, self.stream.as_raw_fd(), listener_read_event(key))?;\n        }\n        Ok(())\n    }\n\n    fn parse_and_set_content_length(&mut self, data: &str) {\n        println!("{}", data);\n        if data.contains("HTTP") {\n            if let Some(content_length) = data\n                .lines()\n                .find(|x| x.to_lowercase().starts_with("content-length: "))\n            {\n                if let Some(len) = content_length\n                    .to_lowercase()\n                    .strip_prefix("content-length: ")\n                {\n                    self.content_length = len.parse::<usize>().expect("content-length is valid");\n                    println!("set content length: {} bytes", self.content_length);\n                }\n            } else {\n                println!("\u6ca1\u8bfb\u5230 Content-Length");\n            }\n        }\n        println!("\u4e0d\u662f HTTP");\n    }\n\n    fn write_cb(&mut self, key: u64, epoll_fd: RawFd) -> io::Result<()> {\n        match self.stream.write(HTTP_RESP) {\n            Ok(_) => println!("answered from request {}", key),\n            Err(e) => eprintln!("could not answer to request {}, {}", key, e),\n        }\n        self.stream.shutdown(std::net::Shutdown::Both)?;\n        let fd = self.stream.as_raw_fd();\n        remove_interest(epoll_fd, fd)?;\n        unsafe { close(fd) };\n        Ok(())\n    }\n}\n\nfn main() -> io::Result<()> {\n    let mut listener = TcpListener::bind("127.0.0.1:8080").expect("\u7ed1\u5b9a\u7aef\u53e3\u5931\u8d25");\n    // \u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\u6a21\u5f0f\n    // \u5f53\u6211\u4eec accept \u65f6\uff0c\u5982\u679c socket \u6ca1\u6709\u51c6\u5907\u597d\uff0c\u4f1a\u963b\u585e\u3002\n    // \u800c\u73b0\u5728\u4f1a\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a io::ErrorKind::WouldBlock\n    listener\n        .set_nonblocking(true)\n        .expect("set non-block failed");\n    let listener_fd = listener.as_raw_fd();\n\n    // \u521b\u5efa\u4e00\u4e2a epoll\uff0c\u5e76\u8fd4\u56de\u5b83\u7684 fd\n    // \u6709\u4e86\u8fd9\u4e2a fd\uff0c\u6211\u4eec\u5c31\u80fd\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u64cd\u4f5c\uff0c\u5305\u62ec\u8bfb\u53d6\u3001\u6dfb\u52a0\u3001\u4fee\u6539\u3001\u79fb\u9664\u3002\n    let epoll_fd = epoll_create().expect("\u521b\u5efa epoll \u5931\u8d25");\n\n    // \u5411 epoll \u4e2d\u6ce8\u518c listener\uff0c\u5e76\u8bbe\u7f6e\u6211\u4eec\u611f\u5174\u8da3\u7684\u4e8b\u4ef6\u662f\u8bfb\n    let mut key = 100;\n    add_interst(epoll_fd, listener_fd, listener_read_event(key))?;\n\n    // \u73b0\u5728\u6211\u4eec\u6709\u4e86 epoll\uff0c\u4e5f\u6ce8\u518c\u4e86\u4e8b\u4ef6\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u4e8b\u4ef6\u5faa\u73af\n    let mut events: Vec<libc::epoll_event> = Vec::with_capacity(1024);\n    let mut request_contexts: HashMap<u64, RequestContext> = HashMap::new();\n    loop {\n        events.clear();\n        // epoll_wait \u53d1\u751f\u963b\u585e\u7684\u6761\u4ef6\uff1a\n        // - \u6709\u4e8b\u4ef6\u53d1\u751f\n        // - \u4fe1\u53f7\u628a\u5b83\u6253\u65ad\n        // - \u8d85\u65f6\u4e86\n        //      - \u6211\u4eec\u53ef\u4ee5\u628a\u8d85\u65f6\u4e8b\u4ef6\u8bbe\u7f6e\u4e3a -1\uff0c\u8fd9\u6837 epoll_wait \u4f1a\u4e00\u53ea\u963b\u585e\uff0c\u76f4\u5230\u524d\u4e24\u79cd\u60c5\u51b5\u53d1\u751f\n        // \u5f53 epoll_wait \u8fd4\u56de\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e8b\u4ef6\u7684\u6570\u91cf\n        let res = match syscall!(epoll_wait(\n            epoll_fd,\n            events.as_mut_ptr() as *mut libc::epoll_event,\n            1024,\n            1000 as libc::c_int, // \u8d85\u65f6\u65f6\u95f4\uff0c\u6beb\u79d2\u4e3a\u5355\u4f4d\n        )) {\n            Ok(v) => v,\n            Err(e) => panic!("\u5728\u7b49\u5f85 epoll \u65f6\u53d1\u751f\u9519\u8bef\uff1a{}", e),\n        };\n\n        // \u8bbe\u7f6e events \u7684\u5bb9\u91cf\n        unsafe { events.set_len(res as usize) };\n\n        // \u5904\u7406\u8bf7\u6c42\n        for event in events.iter() {\n            // \u56e0\u4e3a\u6ca1\u6709 fd\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7 key \u53bb\u5224\u65ad\uff0c\u8fd9\u4e2a\u4e8b\u4ef6\u662f\u90a3\u4e2a fd \u7684\u3002\n            match event.u64 {\n                // \u5982\u679c\u662f 100\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u7684 server \u63a5\u6536\u5230\u4e86\u65b0\u7684\u8fde\u63a5\u3002\n                100 => {\n                    match listener.accept() {\n                        Ok((stream, addr)) => {\n                            // \u5c06\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\u7684\uff0c\u7ed9\u4ed6\u4e00\u4e2a key\uff0c\u5e76\u6dfb\u52a0\u5230\u5230 epoll \u4e2d\n                            stream\n                                .set_nonblocking(true)\n                                .expect("\u8fd9\u91cc\u5728\u6b64\u8bbe\u7f6e\u4e86 non-blocking");\n                            println!("new client: {}", addr);\n                            key += 1;\n                            add_interst(epoll_fd, stream.as_raw_fd(), listener_read_event(key))\n                                .expect("\u53d1\u751f\u4ec0\u4e48\u662f\u4e86\uff0c\u5ba2\u6237\u7aef\u88c2\u5f00\u4e86\uff1f");\n                            // \u8fd9\u91cc\n                            request_contexts.insert(key, RequestContext::new(stream));\n                        }\n                        Err(e) => eprintln!("couldn\'t accept: {}", e),\n                    }\n                    // \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f ONESHORT \u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u91cd\u65b0\u6ce8\u518c server\n                    modify_interest(epoll_fd, listener_fd.as_raw_fd(), listener_read_event(100))\n                        .expect("\u91cd\u7f6e server \u5931\u8d25");\n                }\n                // \u5982\u679c\u4e0d\u662f key \u4e0d\u662f 100\uff0c\u90a3\u5c31\u662f\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\n                key => {\n                    // \u7528 hashmap \u53bb\u5339\u914d\u662f\u90a3\u4e2a\u8fde\u63a5\n                    if let Some(context) = request_contexts.get_mut(&key) {\n                        let events = event.events;\n                        match events {\n                            // \u5982\u679c\u53ef\u8bfb\uff0c\u5c31\u53bb\u8bfb\uff0c\u5982\u679c\u6ca1\u8bfb\u5b8c\uff0c\u5c31\u91cd\u65b0\u6ce8\u518c\u8bfb\uff0c\u8bfb\u5b8c\u4e86\u5c06\u5174\u8da3\u70b9\u6539\u4e3a\u5199\n                            v if v as i32 & libc::EPOLLIN == libc::EPOLLIN => {\n                                // \u8bfb\u53d6\u6570\u636e\n                                context.read_cb(key, epoll_fd)?;\n                            }\n                            // \u8fd4\u56de\u6570\u636e\uff0cclose(fd), shutdown(stream), remove_interest(epoll_fd, fd)\n                            v if v as i32 & libc::EPOLLOUT == libc::EPOLLOUT => {\n                                context.write_cb(key, epoll_fd)?;\n                                // \u540c\u65f6\u79fb\u51fa hashmap\n                                request_contexts.remove(&key);\n                            }\n                            v => println!("unexpected events: {}", v),\n                        }\n                    }\n                }\n            }\n        }\n    }\n    println!("Hello, world!");\n    Ok(())\n}\n\n/// \u5411 epoll \u4e2d\u4f20\u5165\u4e00\u4e2a\u611f\u5174\u8da3\u7684\u8fde\u63a5\n///\n/// epoll_fd: epoll \u7684 fd\n/// fd\uff1a\u5c06\u8981\u88ab epoll \u7ba1\u7406\u7684 fd\n/// event\uff1a\u88ab\u901a\u77e5\u4e8b\u4ef6\u7c7b\u578b\u3002\n///\n/// \u5f53 fd \u4e0a\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u6bd4\u5982\u8bfb\u6216\u8005\u662f\u5199\uff0c\u8fd9\u4e2a\u4e8b\u4ef6\u53d1\u751f\u540e epoll \u5c31\u4f1a\u901a\u77e5\u6211\u4eec\uff0c\u5e76\u5c06 fd \u4ece epoll \u4e2d\u5220\u9664\n/// \u56e0\u6b64\u5982\u679c\u6211\u4eec\u9700\u8981\u7ee7\u7eed\u8bfb\u53d6\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u6ce8\u518c\u8fd9\u4e2a fd\nfn add_interst(epoll_fd: RawFd, fd: RawFd, mut event: libc::epoll_event) -> io::Result<()> {\n    syscall!(epoll_ctl(epoll_fd, libc::EPOLL_CTL_ADD, fd, &mut event))?;\n    Ok(())\n}\nfn modify_interest(epoll_fd: RawFd, fd: RawFd, mut event: libc::epoll_event) -> io::Result<()> {\n    // \u6539\u7528 EPOLL_CTL_MOD \u6807\u5fd7\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\n    syscall!(epoll_ctl(epoll_fd, libc::EPOLL_CTL_MOD, fd, &mut event))?;\n    Ok(())\n}\nfn close(fd: RawFd) {\n    let _ = syscall!(close(fd));\n}\nfn remove_interest(epoll_fd: RawFd, fd: RawFd) -> io::Result<()> {\n    // \u6539\u7528 EPOLL_CTL_MOD \u6807\u5fd7\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\n    syscall!(epoll_ctl(\n        epoll_fd,\n        libc::EPOLL_CTL_DEL,\n        fd,\n        std::ptr::null_mut()\n    ))?;\n    Ok(())\n}\n\n/// \u751f\u6210\u4e00\u4e2a\u4e8b\u4ef6\u7c7b\u578b\n///\n/// key \u662f\u6211\u4eec\u4e3a\u8be5\u4e8b\u4ef6\u8bbe\u7f6e\u7684 id\n///\n/// \u5bf9\u4e8e listener\uff0c\u6211\u4eec\u53ea\u5bf9\u8bfb\u4e8b\u4ef6\u611f\u5174\u8da3\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u6709 READ_FLAG\nfn listener_read_event(key: u64) -> libc::epoll_event {\n    libc::epoll_event {\n        events: READ_FLAGS as u32,\n        u64: key,\n    }\n}\n\nfn listener_write_event(key: u64) -> libc::epoll_event {\n    libc::epoll_event {\n        events: WRITE_FLAGS as u32,\n        u64: key,\n    }\n}\n\nfn epoll_create() -> io::Result<RawFd> {\n    let fd = syscall!(epoll_create1(0))?;\n    if let Ok(flags) = syscall!(fcntl(fd, libc::F_GETFD)) {\n        let _ = syscall!(fcntl(fd, libc::F_SETFD, flags | libc::FD_CLOEXEC));\n    }\n    Ok(fd)\n}\n\n#[cfg(test)]\nmod test {\n    #[test]\n    fn test() {\n        let a = [232, 183, 159];\n        let s = std::str::from_utf8(&a[..]).unwrap();\n        dbg!(s);\n    }\n}\n')),(0,r.kt)("h2",{id:"\u5176\u4ed6"},"\u5176\u4ed6"),(0,r.kt)("h3",{id:"errnoh"},"errno.h"),(0,r.kt)("h4",{id:"\u5b9a\u4e49"},"\u5b9a\u4e49"),(0,r.kt)("p",null,"\u8be5\u5934\u6587\u4ef6\u5b9a\u4e49\u4e86\u4e00\u4e2a int \u7c7b\u578b\u7684\u5de6\u503c\uff0cerrno\uff0c\u5305\u542b\u4e86\u4efb\u4f55\u51fd\u6570\u4f7f\u7528 errno \u529f\u80fd\u65f6\u4f1a\u4ea7\u751f\u7684\u9519\u8bef\u7801"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"EINTR\uff1a\u8868\u793a\u88ab\u4e2d\u65ad\u7684\u7cfb\u7edf\u8c03\u7528")),(0,r.kt)("h4",{id:"\u4fee\u6539-errno-\u7684\u503c"},"\u4fee\u6539 errno \u7684\u503c"),(0,r.kt)("p",null,"errno \u7684\u9ed8\u8ba4\u503c\u4e3a 0, \u5f53\t\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u53ef\u80fd\u4f1a\u63a5\u53d7\u5230\u67d0\u4e2a\u4fe1\u53f7\u5bfc\u81f4\u8c03\u7528\u9000\u51fa\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\uff0c\u5e76\u4fee\u6539 errno \u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7 errno \u5224\u65ad\u7cfb\u7edf\u8c03\u7528\u662f\u5426\u5931\u8d25\uff0c"),(0,r.kt)("h4",{id:"\u9519\u8bef\u7801\u5bf9\u4e0d\u540c\u51fd\u6570\u6709\u4e0d\u540c\u610f\u4e49"},"\u9519\u8bef\u7801\u5bf9\u4e0d\u540c\u51fd\u6570\u6709\u4e0d\u540c\u610f\u4e49"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"write: \u7531\u4e8e\u4fe1\u53f7\u4e2d\u65ad\uff0c\u6ca1\u5199\u6210\u529f\u4efb\u4f55\u6570\u636e\u3002"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"The call was interrupted by a signal before any data was written."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read: \u7531\u4e8e\u4fe1\u53f7\u4e2d\u65ad\uff0c\u6ca1\u8bfb\u5230\u4efb\u4f55\u6570\u636e\u3002"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"The call was interrupted by a signal before any data was read."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"sem_wait: \u51fd\u6570\u8c03\u7528\u88ab\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u65ad"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"The call was interrupted by a signal handler."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"recv: \u7531\u4e8e\u4fe1\u53f7\u4e2d\u65ad\u8fd4\u56de\uff0c\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u53ef\u7528\u3002"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"function was interrupted by a signal that was caught, before any data was\navailable.")))),(0,r.kt)("h4",{id:"\u5982\u4f55\u5e94\u5bf9"},"\u5982\u4f55\u5e94\u5bf9"),(0,r.kt)("p",null,"\u5f53\u78b0\u5230 EINTR \u9519\u8bef\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u53d6\u6709\u4e00\u4e9b\u53ef\u4ee5\u91cd\u542f\u7684\u7cfb\u7edf\u8c03\u7528\u8981\u8fdb\u884c\u91cd\u542f\uff0c\u800c\u5bf9\u4e8e\u6709\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u662f\u4e0d\u80fd\u591f\u91cd\u542f\u7684\u3002\u4f8b\u5982\uff1aaccept\u3001read\u3001write\u3001select\u3001\u548c open \u4e4b\u7c7b\u7684\u51fd\u6570\u6765\u8bf4\uff0c\u662f\u53ef\u4ee5\u8fdb\u884c\u91cd\u542f\u7684\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u5957\u63a5\u5b57\u7f16\u7a0b\u4e2d\u7684 connect \u51fd\u6570\u6211\u4eec\u662f\u4e0d\u80fd\u91cd\u542f\u7684\uff0c\u82e5 connect \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a EINTR \u9519\u8bef\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u8c03\u7528\u5b83\uff0c\u5426\u5219\u5c06\u7acb\u5373\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u9488\u5bf9 connect \u4e0d\u80fd\u91cd\u542f\u7684\u5904\u7406\u65b9\u6cd5\u662f\uff0c\u5fc5\u987b\u8c03\u7528 select \u6765\u7b49\u5f85\u8fde\u63a5\u5b8c\u6210\u3002"),(0,r.kt)("p",null,"\u7cfb\u7edf\u4e2d\u65ad\u4e0d\u4e00\u5b9a\u88ab\u5f53\u4f5c\u9519\u8bef"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5982\u679c\u9519\u8bef\u7801\u4e3a EINTR \u5219 ",(0,r.kt)("strong",{parentName:"p"},"\u91cd\u65b0\u8c03\u7528\u7cfb\u7edf\u8c03\u7528")," ,\u4f8b\u5982 Postgresql \u4e2d\u6709\u4e00\u6bb5\u4ee3\u7801\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},"retry1:\nif (send(port->sock, &SSLok, 1, 0) != 1)\n{\n    if (errno == EINTR)\n        goto retry1; /* if interrupted, just retry */\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u91cd\u65b0\u5b9a\u4e49\u7cfb\u7edf\u8c03\u7528"),",\u5ffd\u7565\u9519\u8bef\u7801\u4e3a EINTR \u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0cCherokee \u4e2d\u7684\u4e00\u6bb5\u4ee3\u7801\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int cherokee_stat (const char *restrict path, struct stat *buf)\n{\n  int re;\n  do {\n     re = stat (path, buf);\n  } while ((re == -1) && (errno == EINTR));\n  return re;\n}\n")))),(0,r.kt)("h4",{id:"\u5982\u4f55\u4fdd\u8bc1\u7ebf\u8fdb\u7a0b\u5b89\u5168"},"\u5982\u4f55\u4fdd\u8bc1\u7ebf/\u8fdb\u7a0b\u5b89\u5168"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4e00\u822c\u800c\u8a00\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u4fdd\u8bc1 errno \u7684\u5b89\u5168\u6027\uff0c\u4f46\u662f\u4e3a\u4e86\u59a5\u5584\u671f\u95f4\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u5199 makefile \u7684\u65f6 \u5019\u628a _LIBC_REENTRANT \u5b8f\u5b9a\u4e49\uff0c\u6bd4\n\u5982\u6211\u4eec\u5728\u68c0\u67e5 <bits/errno.h> \u6587\u4ef6\u4e2d\u53d1\u73b0\u5982\u4e0b\u7684\u5b9a\u4e49\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"# ifndef __ASSEMBLER__\n/* Function to get address of global `errno' variable. */\nextern int *__errno_location (void) __THROW __attribute__ ((__const__));\n\n\n# if !defined _LIBC || defined _LIBC_REENTRANT\n/* When using threads, errno is a per-thread value. */\n# define errno (*__errno_location ())\n# endif\n# endif /* !__ASSEMBLER__ */\n#endif /* _ERRNO_H */\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6ca1\u6709\u5b9a\u4e49 __LIBC \u6216\u8005\u5b9a\u4e49 _LIBC_REENTRANT \u7684\u65f6\u5019\uff0cerrno \u662f\u591a\u7ebf\u7a0b / \u8fdb\u7a0b\u5b89\u5168\u7684\u3002\u4e00\u822c\u800c\u8a00\uff0c\n",(0,r.kt)("strong",{parentName:"p"},"ASSEMBLER"),", _LIBC \u548c _LIBC_REENTRANT \u90fd\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5668\u5b9a\u4e49\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u5b9a\u4e49 _LIBC_REENTRANT\n\u4e00\u6b21\u53c8\u4f55\u59a8\u90a3\uff1f\u4e3a\u4e86\u68c0\u6d4b\u4e00\u4e0b\u4f60\u7f16\u8bd1\u5668\u662f\u5426\u5b9a\u4e49\u4e0a\u8ff0\u53d8\u91cf\uff0c\u4e0d\u59a8\u4f7f\u7528\u4e0b\u9762\u4e00\u4e2a\u7b80\u5355\u7a0b\u5e8f\u3002")),(0,r.kt)("p",null,"\u5e0c\u671b\u8bfb\u8005\u5728\u8fdb\u884c\u79fb\u690d\u7684\u65f6\u5019\uff0c\u8bfb\u4e00\u4e0b\u76f8\u5173\u7684 unix \u7248\u672c\u7684 <bits/errno.h> \u6587 \u4ef6\uff0c\u6765\u786e\u5b9a\u5e94\u8be5\u5b9a\u4e49\u4ec0\u4e48\u5b8f\u3002\u4e0d\u540c\u7684 unix\n\u7248\u672c\u53ef\u80fd\u5b58\u5728\u7740\u4e00\u4e9b\u5c0f\u7684\u5dee\u522b\uff01"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <errno.h>\n\nint main(void)\n{\n   #ifndef __ASSEMBLER__\n   printf( "Undefine __ASSEMBLER__\\n" );\n   #else\n   printf( "define __ASSEMBLER__\\n" );\n   #endif\n\n   #ifndef __LIBC\n   printf( "Undefine __LIBC\\n" );\n   #else\n   printf( "define __LIBC\\n" );\n   #endif\n\n   #ifndef _LIBC_REENTRANT\n   printf( "Undefine _LIBC_REENTRANT\\n" );\n   #else\n   printf( "define _LIBC_REENTRANT\\n" );\n   #endif\n\n   return 0;\n}\n')),(0,r.kt)("p",null,"\u53c2\u8003\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://blog.csdn.net/hnlyyk/article/details/51444617"},"https://blog.csdn.net/hnlyyk/article/details/51444617")))}d.isMDXComponent=!0}}]);