"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[486],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},d=Object.keys(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},N={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,d=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=p(t),u=o,h=f["".concat(i,".").concat(u)]||f[u]||N[u]||d;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var d=t.length,a=new Array(d);a[0]=f;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<d;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>N,frontMatter:()=>d,metadata:()=>l,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const d={},a="\u6811",l={unversionedId:"other/datastructure",id:"other/datastructure",title:"\u6811",description:"\u4e8c\u53c9\u641c\u7d22\u6811",source:"@site/docs/other/datastructure.md",sourceDirName:"other",slug:"/other/datastructure",permalink:"/docs/other/datastructure",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6027\u80fd\u76d1\u6d4b\u5de5\u5177",permalink:"/docs/other/analyze"},next:{title:"Docker",permalink:"/docs/other/docker"}},i={},p=[{value:"\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:3},{value:"\u904d\u5386",id:"\u904d\u5386",level:3},{value:"CRUD",id:"crud",level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:3},{value:"AVL \u6811 (\u81ea\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811)",id:"avl-\u6811-\u81ea\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-1",level:3},{value:"\u65cb\u8f6c",id:"\u65cb\u8f6c",level:3},{value:"add",id:"add",level:3},{value:"remove",id:"remove",level:3},{value:"\u5de5\u5177\u65b9\u6cd5",id:"\u5de5\u5177\u65b9\u6cd5",level:3},{value:"\u5df2\u77e5\u95ee\u9898",id:"\u5df2\u77e5\u95ee\u9898",level:3},{value:"\u7ea2\u9ed1\u6811",id:"\u7ea2\u9ed1\u6811",level:2},{value:"\u7b2c\u4e8c\u7248",id:"\u7b2c\u4e8c\u7248",level:3},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-2",level:3},{value:"\u65cb\u8f6c",id:"\u65cb\u8f6c-1",level:3},{value:"add",id:"add-1",level:3},{value:"remove",id:"remove-1",level:4},{value:"\u7b2c\u4e00\u90e8\u5206\uff0c\u82e5\u6709\u4e24\u4e2a\u5b50\u8282\u70b9",id:"\u7b2c\u4e00\u90e8\u5206\u82e5\u6709\u4e24\u4e2a\u5b50\u8282\u70b9",level:4},{value:"\u7b2c\u4e8c\u90e8\u5206\uff0c\u82e5\u6700\u591a\u6709\u4e00\u4e2a\u5b50\u8282\u70b9",id:"\u7b2c\u4e8c\u90e8\u5206\u82e5\u6700\u591a\u6709\u4e00\u4e2a\u5b50\u8282\u70b9",level:4},{value:"fixUp",id:"fixup",level:3},{value:"\u6d4b\u8bd5\u6837\u4f8b",id:"\u6d4b\u8bd5\u6837\u4f8b",level:3},{value:"\u5931\u8d25\u7684\u5199\u4e86\u4e00\u534a\u7b2c\u4e00\u7248",id:"\u5931\u8d25\u7684\u5199\u4e86\u4e00\u534a\u7b2c\u4e00\u7248",level:3},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-3",level:4},{value:"add",id:"add-2",level:4},{value:"reNode",id:"renode",level:4},{value:"\u5f85\u7eed...",id:"\u5f85\u7eed",level:2}],c={toc:p};function N(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6811"},"\u6811"),(0,o.kt)("h2",{id:"\u4e8c\u53c9\u641c\u7d22\u6811"},"\u4e8c\u53c9\u641c\u7d22\u6811"),(0,o.kt)("h3",{id:"\u521d\u59cb\u5316"},"\u521d\u59cb\u5316"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef struct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\ntypedef struct Tree {\n    int init;\n    int length;\n    Node* root;\n} Tree;\n\nNode* initNode() {\n    Node* p = (Node*)malloc(sizeof(Node));\n    p -> left = NULL;\n    p -> right = NULL;\n    p -> data = 0;\n    return p;\n}\n\nTree* initTree() {\n    Tree* p = (Tree*)malloc(sizeof(Tree));\n    p->root = initNode();\n    p->init = 0;\n    return p;\n}\n")),(0,o.kt)("h3",{id:"\u904d\u5386"},"\u904d\u5386"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'void preorderTraversal(Node* node) {\n    if (node != NULL) {\n        printf("%d ", node->data);\n        preorderTraversal(node->left);\n        preorderTraversal(node->right);\n    }\n}\n\nvoid inorderTraversal(Node* node) {\n    if (node != NULL) {\n        inorderTraversal(node->left);\n        printf("%d ", node->data);\n        inorderTraversal(node->right);\n    }\n}\n\nvoid postorderTraversal(Node* node) {\n    if (node != NULL) {\n        postorderTraversal(node->left);\n        postorderTraversal(node->right);\n        printf("%d ", node->data);\n    }\n}\n\nvoid levalorderTraversal(Tree* tree) {\n    printf("%d\\n", tree->length);\n    int arr[100];\n    int i=0, j=0; // i \u8bb0\u5f55\u5df2\u7ecf\u52a0\u5165\u7684\u5143\u7d20\u6570\uff0cj \u8bb0\u5f55\u6700\u540e\u8f93\u51fa\u7684\u8282\u70b9\n    int size = 1; // \u8bb0\u5f55\u5b9e\u9645\u5143\u7d20\u4e2a\u6570\n    Node* nodes[100] = {NULL};\n    Node* node = tree->root;\n    nodes[0] = node;\n    while (size > 0) {\n        printf("%d ", nodes[j]->data);\n        printf("%d  ", node->data);\n        j += 1;\n        size -= 1;\n        if (node->left != NULL)  {\n            i += 1;\n            nodes[i] = node->left;\n            size += 1;\n        }\n        if (node->right != NULL) {\n            i += 1;\n            nodes[i] = node->right;\n            size += 1;\n        }\n        node = nodes[j];\n    }\n}\n')),(0,o.kt)("h3",{id:"crud"},"CRUD"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include<stdio.h>\n#include<stdlib.h>\n\n\nNode* add(Tree* tree, int data) {\n    Node* current = tree->root;\n    Node* parent;\n    tree->length += 1;\n    if (tree->init == 0) {\n        tree->init = 1;\n        tree->root->data = data;\n    } else {\n        Node* node = initNode();\n        node->data = data;\n        while (1) {\n            parent = current;\n            if (data <= current->data) {\n                current = current->left;\n                if (current == NULL) {\n                    parent->left = node;\n                    break;\n                }\n            } else {\n                current = current->right;\n                if (current == NULL) {\n                    parent->right = node;\n                    break;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n\nNode* findMax(Node* node) {\n    if (node->right != NULL) {\n        findMax(node->right);\n    } else {\n        return node;\n    }\n}\n\n\nNode* findMin(Node* node) {\n    if (node->left != NULL) {\n        findMax(node->left);\n    } else {\n        return node;\n    }\n}\n\nint find(Node* node, int data) {\n    if (node != NULL) {\n        if (node->data == data) return node->data;\n        else if (data < node->data) find(node->left, data);\n        else find(node->right, data);\n    } else {\n        return -1;\n    }\n}\n\nint delete(Node* root, Node* node, int data) {\n    Node* parent = node;\n    // if (node == root && data == root->data) {\n    //     return 0;\n    // }\n    if (node != NULL && node != root) {\n        if (data < node->data) {\n            node = node->left;\n        } else {\n            node = node->right;\n        }\n    }\n    if (data == node->data) {\n        if (node->left == NULL && node->right == NULL) {\n            if (data <= parent->data) parent->left = NULL; else parent->right = NULL;\n        } else if (node->left == NULL) {\n            if (data > parent->data) parent->right = node->right; else parent->left = node->right;\n        } else if (node->right == NULL) {\n            if (data < parent->data) parent->left = node->left; else parent->right = node->left;\n        } else {\n            Node* innerparent = node;\n            Node* innernode = node->right;\n            while (innernode->left != NULL) {\n                innerparent = innernode;\n                innernode = node->left;\n            }\n            node->data = innernode->data;\n            if (innerparent == node) {\n                node->right = innernode->right;\n            } else {\n                innerparent->left = NULL;\n            }\n        }\n        return 1;\n    } else if (data < node->data) {\n        delete(root, node, data);\n    } else {\n        delete(root, node, data);\n    }\n}\n")),(0,o.kt)("h3",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'int main(void) {\n    Tree* tree = initTree();\n    add(tree, 8);\n    add(tree, 10);\n    add(tree, 5);\n    add(tree, 42);\n    add(tree, 6);\n    add(tree, 3);\n    add(tree, 2);\n    add(tree, 4);\n    add(tree, 7);\n    preorderTraversal(tree->root);\n    printf("\\n");\n    inorderTraversal(tree->root);\n    printf("\\n");\n    postorderTraversal(tree->root);\n    printf("\\n");\n    levalorderTraversal(tree);\n    printf("\\n");\n    printf("max: %d min: %d\\n", findMax(tree->root)->data, findMin(tree->root)->data);\n    printf("find 3: %d \\n", find(tree->root, 3));\n    printf("delete: %d \\n", delete(tree->root, tree->root, 8));\n    preorderTraversal(tree->root);\n    return 0;\n}\n')),(0,o.kt)("h2",{id:"avl-\u6811-\u81ea\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811"},"AVL \u6811 (\u81ea\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811)"),(0,o.kt)("h3",{id:"\u521d\u59cb\u5316-1"},"\u521d\u59cb\u5316"),(0,o.kt)("p",null,"\u540c\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a height \u5c5e\u6027"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* initNode() {\n    Node* p = (Node*)malloc(sizeof(Node));\n    p->left = NULL;\n    p->right = NULL;\n    p->value = 0;\n    p->height = 1;\n    return p;\n}\nTree* initTree() {\n    Tree* p = (Tree*)malloc(sizeof(Tree));\n    p->root = initNode();\n    p->init = 0;\n    p->length = 0;\n    return p;\n}\nNode* addCheck(Tree* tree, int value) {\n    if (tree->init == 0) {\n        tree->init = 1;\n        tree->root->value = value;\n        return tree->root;\n    } else {\n        return add(tree->root, value);\n    }\n}\nvoid removeChect(Tree* tree, int value) {\n    if (tree->init == 0) {\n    } else {\n        removeNode(tree->root, value);\n    }\n}\n")),(0,o.kt)("h3",{id:"\u65cb\u8f6c"},"\u65cb\u8f6c"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u53f3\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* RightRotation(Node* node) {\n    Node* res = node->left;\n    node->left = node->left->right;\n    res->right = node;\n    node->height = getHeight(node);\n    res->height = getHeight(res);\n    return res;\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"\u5de6\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* LeftRotation(Node* node) {\n    Node* res = node->right;\n    node->right = node->right->left;\n    res->left = node;\n    node->height = getHeight(node);\n    // res->height = getHeight(res);\n    return res;\n}\n")),(0,o.kt)("p",null,"::: warning \u6ce8\u610f \u5148\u65cb\u7684\u8282\u70b9\u662f node \u7684\u5b50\u8282\u70b9\uff0c\u4e0d\u662f node \u672c\u8eab ::: 3. \u5148\u5de6\u540e\u53f3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* LeftRightRotation(Node* node) {\n    node->left = LeftRotation(node->left);\n    return RightRotation(node);\n}\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"\u5148\u53f3\u540e\u5de6")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* RightLeftRotation(Node* node) {\n    node->right = RightRotation(node->right);\n    return LeftRotation(node);\n}\n")),(0,o.kt)("h3",{id:"add"},"add"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u4e8b\u9879")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u76f8\u5bf9\u4e8e\u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0cAVL \u6811\u8981\u8bb0\u5f55\u5e76\u66f4\u65b0 height\uff0c\u5fc5\u987b\u7528\u9012\u5f52\u624d\u80fd\u5728\u6dfb\u52a0\u8282\u70b9\u540e\u91cd\u56de\u8001\u8def\uff0c\u66f4\u65b0\u8d70\u8fc7\u7684\u7684\u8282\u70b9"),(0,o.kt)("li",{parentName:"ol"},"\u5728\u5224\u65ad\u662f\u5426\u5e73\u8861\u65f6\u9700\u8981\u786e\u4fdd height \u53ca\u65f6\u88ab\u66f4\u65b0"),(0,o.kt)("li",{parentName:"ol"},"\u5224\u65ad\u65cb\u8f6c\u65b9\u5f0f\u7684\u6761\u4ef6")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* add(Node* node, int value) {\n    if (node == NULL) {\n        Node* newNode = initNode();\n        newNode->value = value;\n        return newNode;\n    } else if (value < node->value) {\n        node->left = add(node->left, value);\n        node->height = getHeight(node);\n        if (getBalanceFactor(node) == 2) {\n            if (value < node->left->value) {\n                node = RightRotation(node);\n            } else {\n                node = LeftRightRotation(node);\n            }\n        }\n    } else {\n        node->right  = add(node->right, value);\n        node->height = getHeight(node);\n        if (getBalanceFactor(node) == -2) {\n            if (value < node->right->value) {\n                node = LeftRotation(node);\n            } else {\n                node = RightLeftRotation(node);\n            }\n        }\n    }\n    node->height = getHeight(node);\n    return node;\n}\n")),(0,o.kt)("h3",{id:"remove"},"remove"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u4e8b\u9879")," 4. \u6ce8\u610f\u65cb\u8f6c\u6761\u4ef6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* removeNode(Node* node, int value) {\n    if (node == NULL) {\n        return NULL;\n    }\n    if (value == node->value) {\n        if (node->left == NULL && node->right == NULL) {\n            return NULL;\n        } else if (node->right == NULL) {\n            return node->left;\n        } else if (node->left == NULL) {\n            return node->right;\n        } else {\n            Node* newNode = reHeightRight(node->right);\n            node->value = newNode->value;\n            node->right = newNode->right;\n        }\n    } else if (value < node->value) {\n        node->left = removeNode(node->left, value);\n        node->height = getHeight(node);\n        if (getBalanceFactor(node) == -2) {\n            if (getHeight(node->left) > 0) {\n                node = RightRotation(node);\n            } else {\n                node = RightLeftRotation(node);\n            }\n        }\n    } else {\n        node->right = removeNode(node->right, value);\n        node->height = getHeight(node);\n        if (getBalanceFactor(node) == 2) {\n            if (getHeight(node->left) > 0) {\n                node = LeftRightRotation(node);\n            } else {\n                node = LeftRotation(node);\n            }\n        }\n    }\n    node->height = getHeight(node);\n}\n")),(0,o.kt)("h3",{id:"\u5de5\u5177\u65b9\u6cd5"},"\u5de5\u5177\u65b9\u6cd5"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"getHeight")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int getHeight(Node* node) {\n    if (node == NULL) {\n        return 0;\n    }\n    int hl, hr;\n    if (node->left == NULL) {\n        hl = 0;\n    } else {\n        hl = node->left->height;\n    }\n    if (node->right == NULL) {\n        hr = 0;\n    } else {\n        hr = node->right->height;\n    }\n    return 1 + max(hl, hr);\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"reHeight \u914d\u5408 remove \u4f7f\u7528\uff0c\u4fdd\u8bc1\u5f53\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684 node \u88ab remove \u540e\uff0cnode.right \u7684 min \u88ab\u5220\u9664\u540e\uff0c\nnode.right \u7684 height \u88ab\u66f4\u65b0")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* reHeightRight(Node* node) {\n    Node* parent = node;\n    if (node->left != NULL) {\n        node = node->left;\n        Node* newNode = reHeightRight(node);\n        node->height = getHeight(node);\n        return newNode;\n    } else {\n        return node;\n    }\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"getBalanceFactor \u83b7\u53d6\u5e73\u8861\u56e0\u5b50")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int getBalanceFactor(Node* node) {\n    // \u83b7\u53d6\u5e73\u8861\u56e0\u5b50 (\u5de6\u5b50\u6811 - \u53f3\u5b50\u6811\uff0c\u6ce8\u610f\u4fdd\u7559\u8d1f\u53f7)\n    if (node == NULL) {\n        return 0;\n    }\n    int a = getHeight(node->left) - getHeight(node->right);\n    return a;\n}\n")),(0,o.kt)("h3",{id:"\u5df2\u77e5\u95ee\u9898"},"\u5df2\u77e5\u95ee\u9898"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u65cb\u8f6c\u6761\u4ef6\u6709\u5f85\u786e\u8ba4"),(0,o.kt)("li",{parentName:"ol"},"\u5f53\u6839\u8282\u70b9\u88ab\u65cb\u8f6c\u65f6\uff0ctree.root \u65e0\u6cd5\u53ca\u65f6\u66f4\u65b0 \u5df2\u89e3\u51b3\uff1aremove \u65b9\u6cd5\u591a\u4f20\u4e00\u4e2a Tree* tree\uff0c\u5224\u65ad node==tree->root,\n\u5982\u679c\u662f\uff0c\u5219 tree->root = temp")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"if (getBalanceFactor(node) == 2) {\n    Node* temp = NULL;\n    if (getHeight(node->left) > 0) {\n        temp = LeftRightRotation(node);\n    } else {\n        temp = LeftRotation(node);\n    }\n    if (node == tree->root) {\n        tree->root = temp;\n    } else {\n        node = temp;\n    }\n}\n")),(0,o.kt)("h2",{id:"\u7ea2\u9ed1\u6811"},"\u7ea2\u9ed1\u6811"),(0,o.kt)("p",null,"::: tip \u5efa\u8bae \u4e0d\u5efa\u8bae\u7528\u9012\u5f52\uff0c\u5efa\u8bae\u7528 while \u5faa\u73af\u5b9e\u73b0\uff0c\u4e0d\u662f\u987a\u5e8f\u56de\u9000\uff0c\u800c\u662f\u8df3\u8fde\u7684 :::\n",(0,o.kt)("img",{parentName:"p",src:"https://rbtree.phpisfuture.com/",alt:"\u7ea2\u9ed1\u6811\u5728\u7ebf\u6f14\u793a"})),(0,o.kt)("h3",{id:"\u7b2c\u4e8c\u7248"},"\u7b2c\u4e8c\u7248"),(0,o.kt)("h3",{id:"\u521d\u59cb\u5316-2"},"\u521d\u59cb\u5316"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'typedef struct Node {\n    int key;\n    int value;\n    int color; // \u7ea2\u4e3a 1\uff0c\u9ed1\u4e3a 0\n    struct Node* parent;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\ntypedef struct Tree {\n    int init;\n    Node* root;\n} Tree;\n\nvoid preorderTraversal(Node* node) {\n    if (node != NULL) {\n        printf("%d %s ", node->value, node->color ? "r" : "b");\n        preorderTraversal(node->left);\n        preorderTraversal(node->right);\n    }\n}\n\nNode* initNode() {\n    Node* p = (Node*)malloc(sizeof(Node));\n    p->key = 0;\n    p->value = 0;\n    p->color = red;\n    p->parent = NULL;\n    p->left = NULL;\n    p->right = NULL;\n    return p;\n}\n\nTree* initTree() {\n    Tree* p = (Tree*)malloc(sizeof(Tree));\n    p->root = initNode();\n    p->init = 0;\n    return p;\n}\n')),(0,o.kt)("h3",{id:"\u65cb\u8f6c-1"},"\u65cb\u8f6c"),(0,o.kt)("p",null,"::: tip \u6ce8\u610f \u5de6/\u53f3\u65cb\u4e0e\u53d8\u8272\u662f\u5206\u5f00\u7684\uff0c\u8fd9\u91cc\u53ea\u6709\u65cb\u8f6c\uff0c\u53d8\u8272\u9700\u8981\u5728\u8c03\u7528\u524d\u5b9e\u73b0 \u5de6\u53f3/\u53f3\u5de6\u65cb\u7684\u7b2c\u4e00\u6b21\u4e0d\u9700\u8981\u53d8\u8272\uff0c\u7b2c\u4e8c\u6b21\u65cb\u8f6c\u524d\u7684\u53d8\u8272\u5df2\u7ecf\u5d4c\u5165\u4e24\u6b21\u65cb\u8f6c\u4e4b\u95f4\n:::"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u53f3\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* RightRotation(Node* node, Tree* tree) {\n    Node* res = node->left;\n    node->left = res->right;\n    if (res->right != NULL)\n        res->right->parent = node;\n    res->right = node;\n    res->parent = node->parent;\n    if (node->parent == NULL) {\n        tree->root = res;\n    } else {\n        if (node->parent->left == node)\n            node->parent->left = res;\n        else\n            node->parent->right = res;\n    }\n    node->parent = res;\n    // if (node == tree->root) {\n    //     tree->root = res;\n    // }\n    return res;\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"\u5de6\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* LeftRotation(Node* node, Tree* tree) {\n    Node* res = node->right;\n    node->right = res->left;\n    if (res->left != NULL)\n        res->left->parent = node;\n    res->left = node;\n    res->parent = node->parent;\n    if (node->parent == NULL) {\n        tree->root = res;\n    } else {\n        if (node->parent->left == node)\n            node->parent->left = res;\n        else\n            node->parent->right = res;\n    }\n    node->parent = res;\n    // if (node == tree->root) {\n    //     tree->root = res;\n    // }\n    return res;\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"\u5de6\u53f3\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* LeftRightRotation(Node* node, Tree* tree) {\n    node->left = LeftRotation(node->left, tree);\n    node->color = red;\n    node->left->color = black;\n    RightRotation(node, tree);\n}\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"\u53f3\u5de6\u65cb")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* RightLeftRotation(Node* node, Tree* tree) {\n    node->right = RightRotation(node->right, tree);\n    node->color = red;\n    node->right->color = black;\n    LeftRotation(node, tree);\n}\n")),(0,o.kt)("h3",{id:"add-1"},"add"),(0,o.kt)("p",null,"\u8fd9\u91cc\u53ea\u9700\u8981\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u63d2\u5165\u5373\u53ef\uff0cfixUp() \u4f20\u5165\u7684\u662f\u65b0\u63d2\u5165\u7684 node"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* put(Node* node, int key, int value) {\n    Node* parent = NULL;\n    Node* newNode = initNode();\n    newNode->key = key; newNode->value = value;\n    // 1.\u6dfb\u52a0\u65b0\u8282\u70b9\n    while (node != NULL) {\n        parent = node;\n        if (value < node->value) {\n            node = node->left;\n            if (node == NULL) {\n                parent->left = newNode;\n                newNode->parent = parent;\n                break;\n            }\n        }\n        else {\n            node = node->right;\n            if (node == NULL) {\n                parent->right = newNode;\n                newNode->parent = parent;\n                break;\n            }\n        }\n    }\n    return newNode;\n}\n\nvoid putCheck(Tree* tree, int key, int value) {\n    if (tree->init == 0) {\n        tree->root->key = key;\n        tree->root->value = value;\n        tree->init = 1;\n        tree->root->color = 0;\n    } else {\n        fixUp(put(tree->root, key, value), tree);\n        tree->root->color = black;\n    }\n}\n")),(0,o.kt)("h4",{id:"remove-1"},"remove"),(0,o.kt)("p",null,"\u5220\u9664\u8f83\u4e3a\u590d\u6742\uff0c\u8fd9\u91cc\u5148\u628a\u4ee3\u7801\u4e00\u8282\u4e24\u534a\uff0c\u4ee5\u4e0b\u4e3a\u6587\u5b57\u53d9\u8ff0\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"while \u5faa\u73af\u76ee\u7684\u662f\u627e\u5230\u8981\u5220\u9664\u7684\u70b9")),(0,o.kt)("h4",{id:"\u7b2c\u4e00\u90e8\u5206\u82e5\u6709\u4e24\u4e2a\u5b50\u8282\u70b9"},"\u7b2c\u4e00\u90e8\u5206\uff0c\u82e5\u6709\u4e24\u4e2a\u5b50\u8282\u70b9"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u628a\u70b9\u8fdb\u884c\u5bf9\u63a5\uff0c\u4e00\u5171\u53ef\u4ee5\u62c6\u5206\u4e3a 4 \u5757"),(0,o.kt)("li",{parentName:"ol"},"\u82e5\u88ab\u5220\u9664\u7684\u70b9\u662f\u9ed1\u8272\u5219\u8fdb fixUp(), \u4f20\u5165\u7684\u662f\u88ab\u5220\u53bb\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\u53f3\u8282\u70b9")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* removes(Node* node, int key, int value, Tree* tree) {\n    Node* parent = NULL;  // \u8fd9\u4e2a parent \u662f\u6307 replace \u7684 parent\n    Node* child = NULL;\n    Node* replace = NULL;\n    int color;\n    while (node != NULL) {\n        // \u627e\u5230\u4e86\u90a3\u4e2a\u70b9\n        if (node->value == value) {\n            // \u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\n            /*\n            *\u5171\u6709\u56db\u6b21\u5bf9\u63a5\u8fc7\u7a0b\n            * 1. replace(\u79fb\u52a8\u540e) \u548c replace.father\n            * 2. replace(\u79fb\u52a8\u524d).right \u548c replace.father\n            * 3. replace(\u79fb\u52a8\u540e) \u548c node.right\n            * 4. replace(\u79fb\u52a8\u524d) \u548c node.left\n            */\n            if (node->left != NULL && node->right != NULL) {\n                replace = node->right;\n                while (replace->left != NULL) {\n                    replace = replace->left;\n                }\n                // 1.1\n                if (node->parent != NULL) {\n                    if (node->parent->left == node) {\n                        node->parent->left = replace;\n                    } else {\n                        node->parent->right = replace;\n                    }\n                } else {\n                    tree->root = replace;\n                }\n                child = replace->right;\n                parent = replace->parent;\n                color = replace->color;\n                // 2.\n                if (parent == node) {\n                    parent = replace;\n                } else {\n                    // \u88ab\u66ff\u6362\u7684\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u8981\u88ab\u63a5\u5230 replace.parent \u4e0a\n                    if (child != NULL) {child->parent = parent;}\n                    parent->left = child;\n                    // 3.\n                    replace->right = node->right;\n                    node->right->parent = replace;\n                }\n                // 1.2\n                replace->parent = node->parent;\n                replace->color = node->color;\n                // 4.\n                replace->left = node->left;\n                node->left->parent = replace;\n\n                if (color == black) {\n                    if (child != NULL) {\n                        fixUp(child, tree);\n                    } else {\n                        fixUp(parent, tree);\n                    }\n                }\n                node = NULL;\n                return NULL;\n            }\n")),(0,o.kt)("h4",{id:"\u7b2c\u4e8c\u90e8\u5206\u82e5\u6700\u591a\u6709\u4e00\u4e2a\u5b50\u8282\u70b9"},"\u7b2c\u4e8c\u90e8\u5206\uff0c\u82e5\u6700\u591a\u6709\u4e00\u4e2a\u5b50\u8282\u70b9"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"            // \u83b7\u53d6 node \u7684\u5b50\u8282\u70b9\n            if (node->left != NULL) {\n                child = node->left;\n            } else {\n                child = node->right;\n            }\n            if (child != NULL) {\n                child->parent = node->parent;\n            }\n            parent = node->parent;\n            color = node->color;\n            // node.\u5b50\u8282\u70b9\u8981\u88ab\u63a5\u5230 node.parent \u4e0a\n            if (parent != NULL) {\n                if (parent->left == node) {\n                    parent->left = child;\n                } else {\n                    parent->right = child;\n                }\n            } else {\n                // \u7279\u6b8a\u5904\u7406\u82e5\u53bb\u6389\u7684\u8282\u70b9\u662f\u6839\u8282\u70b9\n                tree->root = child;\n            }\n            // \u82e5\u679c\u5220\u53bb\u7684\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u9700\u8981\u4fee\u590d\n            node = NULL;\n            if (child != NULL) {\n                fixUp(child, tree);\n            } else {\n                fixUp(parent, tree);\n            }\n            return NULL;\n        }\n        // \u7ee7\u7eed\u627e\u5230\u8981\u53bb\u9664\u7684\u70b9\n        if (value < node->value) {\n            node = node->left;\n        } else {\n            node = node->right;\n        }\n    }\n    return NULL;\n}\n")),(0,o.kt)("h3",{id:"fixup"},"fixUp"),(0,o.kt)("p",null,"\u8fd9\u91cc\u662f\u6838\u5fc3\uff1a\u6ce8\u610f\u56de\u9000\u7684\u8df3\u8dc3\u6027"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u82e5\u53ea\u662f\u53d8\u8272\uff0c\u5219 node = grandparent"),(0,o.kt)("li",{parentName:"ol"},"\u82e5\u53ea\u662f\u5de6\u65cb\u6216\u53f3\u65cb\uff0c\u5219 node = parent"),(0,o.kt)("li",{parentName:"ol"},"\u82e5\u662f\u5de6\u53f3\u65cb\u6216\u53f3\u5de6\u65cb\uff0c\u5219 node = grandparent")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* fixUp(Node* node, Tree* tree) {\n    Node* parent;\n    Node* grandparent;\n    Node* uncle;\n    while (node->parent != NULL && node->parent->color == red) {\n        parent = node->parent;\n        grandparent = parent->parent;\n        if (grandparent == NULL) return NULL;\n        if (parent == grandparent->left) {\n            uncle = grandparent->right;\n        } else {\n            uncle = grandparent->left;\n        }\n        if (uncle != NULL && uncle->color == red) {\n            uncle->color = black;\n            parent->color = black;\n            grandparent->color = red;\n            node = grandparent;\n            continue;\n        } else if (uncle == NULL || uncle->color == black) {\n            if (grandparent->left == parent) {\n                if (parent->left == node) {\n                    parent->color = black;\n                    grandparent->color = red;\n                    RightRotation(grandparent, tree);\n                } else {\n                    LeftRightRotation(grandparent, tree);\n                    node = node->parent;\n                }\n            } else {\n                if (parent->left == node) {\n                    RightLeftRotation(grandparent, tree);\n                    node = node->parent;\n                } else {\n                    parent->color = black;\n                    grandparent->color = red;\n                    RightRotation(grandparent, tree);\n                }\n            }\n        }\n    }\n}\n")),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u6837\u4f8b"},"\u6d4b\u8bd5\u6837\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'int main(void) {\n    Tree* tree = initTree();\n    putCheck(tree, 1, 80);\n    putCheck(tree, 1, 40);\n    putCheck(tree, 1, 160);\n    putCheck(tree, 1, 20);\n    putCheck(tree, 1, 60);\n    // 1.\u5355\u53f3\u65cb\n    // putCheck(tree, 10);\n    // putCheck(tree, 5);\n    // 2.\u5de6\u53f3\u65cb\n    // putCheck(tree, 5); putCheck(tree, 11);\n    // 3.\u53f3\u5de6\u65cb\n    // putCheck(tree, 30);\n    // putCheck(tree, 25);\n    // 4.\u7ea2\u7ea2\n    putCheck(tree, 1, 10);\n    putCheck(tree, 1, 30);\n    putCheck(tree, 1, 25);\n    // 5. \u6682\u65f6\u5c31\u8fd9\u6837\u4e86\uff0c\u660e\u5929\u518d\u8bf4\n    preorderTraversal(tree->root);\n    printf("\\n");\n    // 6. \u8d1f\u8f7d\u6d4b\u8bd5\n    putCheck(tree, 1, 28);\n    putCheck(tree, 1, 22);\n    preorderTraversal(tree->root);\n    printf("\\n");\n    putCheck(tree, 1, 23);\n    putCheck(tree, 1, 24);\n    preorderTraversal(tree->root);\n    printf("\\n");\n    // \u5220\u9664\n    removeChect(tree, 1, 23);\n    preorderTraversal(tree->root);\n    return 0;\n}\n')),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.cnblogs.com/skywang12345/p/3624343.html",alt:"\u53c2\u8003\u6587\u7ae0"})),(0,o.kt)("h3",{id:"\u5931\u8d25\u7684\u5199\u4e86\u4e00\u534a\u7b2c\u4e00\u7248"},"\u5931\u8d25\u7684\u5199\u4e86\u4e00\u534a\u7b2c\u4e00\u7248"),(0,o.kt)("h4",{id:"\u521d\u59cb\u5316-3"},"\u521d\u59cb\u5316"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u76f8\u6bd4\u4e8e AVL \u6811\uff0c\u7ea2\u9ed1\u6811\u4e0d\u518d\u5f3a\u8c03\u9ad8\u5ea6\uff0c\u8f6c\u4e3a\u7531\u7ea2\u9ed1\u5224\u65ad\u662f\u5426\u65cb\u8f6c\u6216\u53d8\u8272"),(0,o.kt)("li",{parentName:"ol"},"\u56e0\u4e3a\u9ad8\u5ea6\u4e0d\u7528\u6539\u53d8\uff0c\u6240\u4ee5\u7528 while \u5faa\u73af\u4ee3\u66ff\u9012\u5f52\u4f1a\u66f4\u597d\u66f4\u5bb9\u6613")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef struct Node {\n    int value;\n    int color; // \u7ea2\u4e3a 1\uff0c\u9ed1\u4e3a 0\n    struct Node* parent;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\ntypedef struct Tree {\n    int init;\n    Node* root;\n} Tree;\n\nNode* initNode() {\n    Node* p = (Node*)malloc(sizeof(Node));\n    p->value = 0;\n    p->color = red;\n    p->parent = NULL;\n    p->left = NULL;\n    p->right = NULL;\n    return p;\n}\n\nTree* initTree() {\n    Tree* p = (Tree*)malloc(sizeof(Tree));\n    p->root = initNode();\n    p->init = 0;\n    return p;\n}\n")),(0,o.kt)("h4",{id:"add-2"},"add"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* add(Node* node, int value, Tree* tree) {\n    // \u5224\u65ad\u662f\u5426\u9012\u5f52\u5230 nil\uff0c\u5e76\u521b\u5efa\u65b0\u8282\u70b9\n    if (node == NULL) {\n        Node* newNode = initNode();\n        newNode->value = value;\n        return newNode;\n    }\n    // \ud83d\udc48\n    if (value < node->value) {\n        Node* newNode = add(node->left, value, tree);\n        // \u5224\u65ad\u662f\u5426\u53d1\u751f\u65cb\u8f6c\uff0c\u82e5\u679c\u65cb\u8f6c\u4e86\u5219\u9012\u5f52\u7684 node \u4e0e newNode \u7236\u5b50\u5173\u7cfb\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u8981\u5224\u65ad\u5e76\u53ca\u65f6\u7ee7\u7eed\u56de\u9000\uff0c\u77e5\u9053\u7236\u5b50\u5173\u7cfb\u6b63\u5e38\n        if (newNode == tree->root) {\n            return newNode;\n        }\n        // \u82e5\u7236\u5b50\u5173\u7cfb\u6b63\u5e38\uff0c\u5219\u7ea0\u6b63\u7236\u5b50\u5173\u7cfb\uff0c\u597d\u50cf\u53ea\u5728\u65b0\u5efa\u65b0\u5b50\u8282\u70b9\u65f6\u771f\u6b63\u53d1\u6325\u4f5c\u7528\uff0c\u5f85\u8bc1\u5b9e\uff0c\n        // \u7528\u9012\u5f52\u5199\u771f\u96be\u53d7\n        newNode->parent = node;\n        node->left = newNode;\n        // \u5224\u65ad\u662f\u5426\u9700\u8981\u65cb\u8f6c\u6216\u53d8\u8272\n        // \u7236\u8282\u70b9\u4e3a\u7ea2\u8272\n        // node->parent != tree->root \u8fd9\u4e2a\u5f85\u5927\u91cf\u6d4b\u8bd5\n        if (node->color != black && node != tree->root  && node->parent != tree->root) {\n            Node* newNode = reNode(node, leftdirctction, tree);\n            // \u5982\u679c\u53ea\u6362\u989c\u8272\u5219\u7ed3\u6784\u6ca1\u6709\u8c03\u6574\uff0c\u6309\u6b63\u5e38\u9012\u5f52\u8d70\n            if (newNode == NULL) {return node;}\n            // \u5224\u65ad\u6839\u662f\u5426\u88ab\u8f6c\u8d70\u4e86\n            else if (newNode->right == tree->root) {\n                newNode->parent = NULL;\n                newNode->color = black;\n                tree->root = newNode;\n            } else {\n                // \u53ea\u8981\u8fdb\u4e86\u8239\uff0c\u5c31\u4e0d\u8d70\u5bfb\u5e38\u8def\n                return newNode;\n            }\n        }\n    } else { // \ud83d\udc49\n        Node* newNode = add(node->right, value, tree);\n        if (newNode == tree->root) {\n            return newNode;\n        } else if (node->parent == newNode) {\n            return newNode;\n        }\n        newNode->parent = node;\n        node->right = newNode;\n        if (node->color != black && node != tree->root) {\n            Node* newNode = reNode(node, rightdirctction, tree);\n            if (newNode == NULL) {return node;}\n            else if (newNode->right == tree->root) {\n                newNode->parent = NULL;\n                newNode->color = black;\n                tree->root = newNode;\n            } else {\n                return newNode;\n            }\n        }\n    }\n    return node;\n}\n\n\n\nNode* addCheck(Tree* tree, int value) {\n    if (tree->init == 0) {\n        tree->init = 1;\n        tree->root->value = value;\n        tree->root->color = black;\n        return tree->root;\n    } else {\n        return add(tree->root, value, tree);\n    }\n}\n")),(0,o.kt)("h4",{id:"renode"},"reNode"),(0,o.kt)("p",null,"\u7528\u4e8e\u65cb\u8f6c\u6216\u53d8\u8272\uff0c\u914d\u5408\u56fe\u7247\u914c\u60c5\u89c2\u770b (\uff1e\ufe4f\uff1c)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5355\u65cb\u7684\u60c5\u51b5")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Node* reNode(Node* node, int isleftdirection, Tree* tree) {\n    Node* res = NULL; // \u58f0\u660e\u8fd4\u56de\u503c\n    // \u627e\u5230\u9700\u8981\u7528\u5f97\u5230\u7684\u8282\u70b9\uff0cfather(node) \u548c gradfather\n    Node* grandfather = node->parent;\n    Node* brother = NULL;\n    // isleft \u7236\u8282\u70b9\u662f\u4e0d\u662f\u7237\u8282\u70b9\u7684\u5de6\u652f\uff0cisleftdirection \u5b50\u8282\u70b9\u662f\u4e0d\u662f\u7236\u8282\u70b9\u7684\u5de6\u652f\n    int isleft = node->value < grandfather->value;\n    if (isleft) brother = grandfather->right; else brother = grandfather->left;\n    // \u82e5\u5144\u5f1f\u8282\u70b9\u4e3a\u7ea2\u8272\u5219\u53ea\u6362\u989c\u8272\n    if (brother != NULL && brother->color == red) {\n        brother->color = black;\n        node->color = black;\n        grandfather->color = red;\n        return NULL;\n    } else {\n        // \u82e5\u7237\u8282\u70b9\u548c\u7236\u8282\u70b9\u5747\u4e3a\u7ea2\u8272\uff0c\u9700\u8981\u628a\u5f53\u524d\u8282\u70b9\u8bbe\u4e3a\u7237\u8282\u70b9\uff0c\u8fd9\u91cc\u7528 while \u5faa\u73af\u4f1a\u65b9\u4fbf\u5f97\u591a\uff0c\u5728\u6b64\u5904\u6682\u65f6\u53ea\u5904\u7406\u7236\u8282\u70b9\u548c\u7237\u8282\u70b9\u540c\u4e3a\u7ea2\u8272\uff0c\u5982\u679c\u518d\u6709\u66f4\u9ad8\u8f88\u7684\u8282\u70b9\uff0c\u8fd9\u91cc\u4e0d\u5199\u4e86\n        if (grandfather->parent == NULL) {\n            return node;\n        } else if (grandfather->color == red) {\n            grandfather = grandfather->parent;\n            // \u5355\u65cb\u5c31\u884c\n            if (isleft) {\n                res = RightRotation(grandfather);\n            } else {\n                res = LeftRotation(grandfather);\n            }\n        } else {\n            if (isleft) {\n                if (isleftdirection) {  // \u5de6\u5de6 \u53f3\u65cb\n                    res = RightRotation(grandfather);\n                } else {  // \u5de6\u53f3 \u5de6\u53f3\u65cb\n                    res = LeftRightRotation(grandfather);\n                }\n            } else {\n                if (isleftdirection) { // \u53f3\u53f3 \u5de6\u65cb\n                    res = RightLeftRotation(grandfather);\n                } else { // \u53f3\u5de6 \u53f3\u5de6\u65cb\n                    res = LeftRotation(grandfather);\n                }\n            }\n            return res;\n        }\n    }\n}\n")),(0,o.kt)("h2",{id:"\u5f85\u7eed"},"\u5f85\u7eed..."))}N.isMDXComponent=!0}}]);