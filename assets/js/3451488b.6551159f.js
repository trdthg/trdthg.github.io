"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[6414],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>c});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},m=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},k={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},i=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),i=u(r),c=o,d=i["".concat(l,".").concat(c)]||i[c]||k[c]||a;return r?t.createElement(d,p(p({ref:n},m),{},{components:r})):t.createElement(d,p({ref:n},m))}));function c(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=i;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,p[1]=s;for(var u=2;u<a;u++)p[u]=r[u];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}i.displayName="MDXCreateElement"},2409:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>k,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=r(7462),o=(r(7294),r(3905));const a={},p=void 0,s={permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 5 \u5176\u4ed6\u7528\u4f8b",source:"@site/blog/2022-04-03-[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 5 \u5176\u4ed6\u7528\u4f8b.md",title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 5 \u5176\u4ed6\u7528\u4f8b",description:"\u539f\u6587\u94fe\u63a5\uff1ahttps://alexis-lozano.com/hexagonal-architecture-in-rust-5/",date:"2022-04-03T00:00:00.000Z",formattedDate:"2022\u5e744\u67083\u65e5",tags:[],readingTime:14.58,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 4 \u91cd\u6784"},nextItem:{title:"[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 6 CLI",permalink:"/blog/2022/04/03/[\u8bd1] Rust \u516d\u8fb9\u5f62\u67b6\u6784/Rust \u516d\u8fb9\u5f62\u67b6\u6784 6 CLI"}},l={authorsImageUrls:[]},u=[{value:"\u83b7\u53d6\u6240\u6709\u5b9d\u53ef\u68a6",id:"\u83b7\u53d6\u6240\u6709\u5b9d\u53ef\u68a6",level:2},{value:"\u67e5\u8be2\u4e00\u53ea\u5b9d\u53ef\u68a6",id:"\u67e5\u8be2\u4e00\u53ea\u5b9d\u53ef\u68a6",level:2},{value:"\u5220\u9664\u4e00\u53ea\u5b9d\u53ef\u68a6",id:"\u5220\u9664\u4e00\u53ea\u5b9d\u53ef\u68a6",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],m={toc:u};function k(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u539f\u6587\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://alexis-lozano.com/hexagonal-architecture-in-rust-5/"},"https://alexis-lozano.com/hexagonal-architecture-in-rust-5/")),(0,o.kt)("p",{parentName:"blockquote"},"\u7ffb\u8bd1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u9009\u9898\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://github.com/trdthg"},"trdthg")),(0,o.kt)("p",{parentName:"blockquote"},"\u672c\u6587\u7531 ",(0,o.kt)("a",{parentName:"p",href:"https://Rustt.org"},"Rustt")," \u7ffb\u8bd1\uff0c",(0,o.kt)("a",{parentName:"p",href:"https://studyrust.org"},"StudyRust")," \u8363\u8a89\u63a8\u51fa")),(0,o.kt)("h1",{id:"2021-09-12---rust-\u516d\u8fb9\u5f62\u67b6\u6784-5---\u5176\u4ed6\u7528\u4f8b"},"2021-09-12 - Rust \u516d\u8fb9\u5f62\u67b6\u6784 #5 - \u5176\u4ed6\u7528\u4f8b"),(0,o.kt)("p",null,"\u4e0a\u6b21\uff0c\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u91cd\u6784\u3002\u4e0d\u77e5\u4f55\u6545\uff0c\u6211\u4eec\u7684\u5ba2\u6237\u5bf9\u6211\u4eec\u5f88\u751f\u6c14\u2026\u2026\u6211\u7684\u610f\u601d\u662f\uff0c\u4ed6\u5e94\u8be5\u9ad8\u5174\uff0c\u4ee3\u7801\u73b0\u5728\u6bd4\u4ee5\u524d\u66f4\u5e72\u51c0\u4e86\u3002"),(0,o.kt)("p",null,"\u5728\u5403\u5b8c\u4e00\u5757\u86cb\u7cd5\u4e4b\u540e (\u663e\u7136\uff0c\u8fd9\u662f\u6211\u4eec\u5e94\u5f97\u7684)\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5b9e\u73b0\u5269\u4e0b\u7684\u7528\u4f8b\u3002\u8fd9\u7bc7\u6587\u7ae0\u53ef\u80fd\u4f1a\u6709\u70b9\u957f\uff0c\u4f46\u662f\uff0c\u563f\uff0c\u5982\u679c\u4f60\u4e0d\u60f3\u9605\u8bfb\u6574\u4e2a\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5728 github \u4e0a : )\n\u6211\u4eec\u5c06\u5b9e\u73b0\u7684\u7528\u4f8b\u662f\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u83b7\u53d6\u6240\u6709\u5b9d\u53ef\u68a6"),(0,o.kt)("li",{parentName:"ul"},"\u67e5\u8be2\u4e00\u53ea\u5b9d\u53ef\u68a6"),(0,o.kt)("li",{parentName:"ul"},"\u5220\u9664\u4e00\u53ea\u5b9d\u53ef\u68a6")),(0,o.kt)("h2",{id:"\u83b7\u53d6\u6240\u6709\u5b9d\u53ef\u68a6"},"\u83b7\u53d6\u6240\u6709\u5b9d\u53ef\u68a6"),(0,o.kt)("p",null,"\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u4ece\u6d4b\u8bd5\u5f00\u59cb\u3002\u8ba9\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b \u6587\u4ef6\uff1a",(0,o.kt)("em",{parentName:"p"},"domain/fetch","_","all","_","pokemons.rs"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"// domain/mod.rs\npub mod fetch_all_pokemons;\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u7528\u4f8b\u6709\u54ea\u4e9b\u53ef\u80fd\u7684\u7ed3\u679c\uff1f"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6210\u529f\u4e86\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u5b9d\u53ef\u68a6"),(0,o.kt)("li",{parentName:"ol"},"\u5b58\u50a8\u5e93\u4e2d\u53d1\u751f\u4e86\u672a\u77e5\u9519\u8bef\uff0c\u6211\u4eec\u65e0\u6cd5\u5f97\u5230\u6211\u4eec\u7684\u5b9d\u53ef\u68a6")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u5148\u4ece\u9519\u8bef\u6848\u4f8b\u5f00\u59cb\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nmod tests {\n    use super::*;\n    use crate::repositories::pokemon::InMemoryRepository;\n\n    #[test]\n    fn it_should_return_an_unknown_error_when_an_unexpected_error_happens() {\n        let repo = Arc::new(InMemoryRepository::new().with_error());\n\n        let res = execute(repo);\n\n        match res {\n            Err(Error::Unknown) => {}\n            _ => unreachable!(),\n        };\n    }\n}\n")),(0,o.kt)("p",null,"\u5982\u60a8\u6240\u89c1\uff0c\u6211\u4ecd\u7136\u6ca1\u6709\u5199\u4e00\u884c\u4ee3\u7801\uff0c\u53ea\u5199\u4e86\u6d4b\u8bd5\u3002\u5f53\u7136\uff0c\u73b0\u5728\u8fd8\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002\u8fd9\u91cc\u6709\u4e24\u4ef6\u4e8b\u5f88\u6709\u8da3\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8fd9\u91cc\u7684\u6d4b\u8bd5\u548c\u521b\u5efa\u5b9d\u53ef\u68a6\u90a3\u91cc\u51e0\u4e4e\u4e00\u6837"),(0,o.kt)("li",{parentName:"ul"},"\u8fd9\u91cc\u4e0d\u9700\u8981 repo \u4e4b\u5916\u7684\u5176\u4ed6\u53c2\u6570")),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u8981\u7684\u4ee3\u7801\u8ba9\u6d4b\u8bd5\u901a\u8fc7\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::Repository;\nuse std::sync::Arc;\n\npub enum Error {\n    Unknown,\n}\n\npub fn execute(repo: Arc<dyn Repository>) -> Result<(), Error> {\n    Err(Error::Unknown)\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\u7ee7\u7eed\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[test]\nfn it_should_return_all_the_pokemons_ordered_by_increasing_number_otherwise() {\n    let repo = Arc::new(InMemoryRepository::new());\n    repo.insert(\n        PokemonNumber::pikachu(),\n        PokemonName::pikachu(),\n        PokemonTypes::pikachu(),\n    )\n    .ok();\n    repo.insert(\n        PokemonNumber::charmander(),\n        PokemonName::charmander(),\n        PokemonTypes::charmander(),\n    )\n    .ok();\n\n    let res = execute(repo);\n\n    match res {\n        Ok(res) => {\n            assert_eq!(res[0].number, u16::from(PokemonNumber::charmander()));\n            assert_eq!(res[0].name, String::from(PokemonName::charmander()));\n            assert_eq!(res[0].types, Vec::<String>::from(PokemonTypes::charmander()));\n            assert_eq!(res[1].number, u16::from(PokemonNumber::pikachu()));\n            assert_eq!(res[1].name, String::from(PokemonName::pikachu()));\n            assert_eq!(res[1].types, Vec::<String>::from(PokemonTypes::pikachu()));\n        }\n        _ => unreachable!(),\n    };\n}\n")),(0,o.kt)("p",null,"\u5728\u6d4b\u8bd5\u91cc\uff0c\u6211\u6309\u7167 ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," \u9012\u51cf\u7684\u987a\u5e8f\u63d2\u5165\u4e86\u5b9d\u53ef\u68a6\uff0c\u6240\u4ee5\u5b58\u50a8\u5e93\u4e2d\u5b9d\u53ef\u68a6\u7684\u6392\u5e8f\u5e94\u8be5\u662f\u786e\u5b9a\u7684\u3002\u5f53\u5b58\u50a8\u5e93\u6ca1\u6709\u8f93\u51fa\u9519\u8bef\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u4ece\u7528\u4f8b\u4e2d\u5f97\u5230\u4e00\u4e2a\n",(0,o.kt)("inlineCode",{parentName:"p"},"Vec<Response>"),"\u3002\u73b0\u5728\u6211\u4eec\u8981\u4e3a\u7528\u4f8b\u52a0\u5165 ",(0,o.kt)("inlineCode",{parentName:"p"},"Response"),"\uff0c\u5e76\u7f16\u5199\u4e00\u90e8\u5206\u7528\u4f8b\u51fd\u6570\u7684\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Response {\n    pub number: u16,\n    pub name: String,\n    pub types: Vec<String>,\n}\n\npub fn execute(repo: Arc<dyn Repository>) -> Result<Vec<Response>, Error> {\n    match repo.fetch_all() {\n        Ok(pokemons) => Ok(pokemons\n            .into_iter()\n            .map(|p| Response {\n                number: u16::from(p.number),\n                name: String::from(p.name),\n                types: Vec::<String>::from(p.types),\n            })\n            .collect::<Vec<Response>>()),\n        Err(FetchAllError::Unknown) => Err(Error::Unknown),\n    }\n}\n")),(0,o.kt)("p",null,"\u7136\u540e\u518d\u4e3a\u5b58\u50a8\u5e93\u6dfb\u52a0\u5e76\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch_all")," \u65b9\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum FetchAllError {\n    Unknown,\n}\n\npub trait Repository: Send + Sync {\n    fn fetch_all(&self) -> Result<Vec<Pokemon>, FetchAllError>;\n}\n\nimpl Repository for InMemoryRepository {\n    fn fetch_all(&self) -> Result<Vec<Pokemon>, FetchAllError> {\n        if self.error {\n            return Err(FetchAllError::Unknown);\n        }\n\n        let lock = match self.pokemons.lock() {\n            Ok(lock) => lock,\n            _ => return Err(FetchAllError::Unknown),\n        };\n\n        let mut pokemons = lock.to_vec();\n        pokemons.sort_by(|a, b| a.number.cmp(&b.number));\n        Ok(pokemons)\n    }\n}\n")),(0,o.kt)("p",null,"\u4e3a\u4e86\u5b9e\u73b0\u5b9d\u53ef\u68a6\u6309\u7167 ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," \u6392\u5e8f\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonNumber")," \u9700\u8981\u5b9e\u73b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"PartialEq"),"\u3001 ",(0,o.kt)("inlineCode",{parentName:"p"},"Eq"),"\u3001",(0,o.kt)("inlineCode",{parentName:"p"},"PartialOrd"),"\u3001",(0,o.kt)("inlineCode",{parentName:"p"},"Ord"),"\n\u8fd9 4 \u4e2a Trait"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\npub struct PokemonNumber(u16);\n")),(0,o.kt)("p",null,"\u8fd0\u884c c",(0,o.kt)("inlineCode",{parentName:"p"},"argo test"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo test\nrunning 6 tests\n...\nit_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\nit_should_return_all_the_pokemons_ordered_by_increasing_number_otherwise ... ok\n")),(0,o.kt)("p",null,"\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u8fd9\u4e2a\u7528\u4f8b :) \u73b0\u5728\u8ba9\u6211\u4eec\u5feb\u901f\u5b9e\u73b0 api\u3002\u5728 ",(0,o.kt)("em",{parentName:"p"},"api/mod.rs")," \u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"mod fetch_all_pokemons;\n\n// in the router macro\n(GET) (/) => {\n    fetch_all_pokemons::serve(repo.clone())\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\u5b9e\u73b0\u5177\u4f53\u7684 handler api/fetch_all_pokemons.rs\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::api::Status;\nuse crate::domain::fetch_all_pokemons;\nuse crate::repositories::pokemon::Repository;\nuse rouille;\nuse serde::Serialize;\nuse std::sync::Arc;\n\n#[derive(Serialize)]\nstruct Response {\n    number: u16,\n    name: String,\n    types: Vec<String>,\n}\n\npub fn serve(repo: Arc<dyn Repository>) -> rouille::Response {\n    match fetch_all_pokemons::execute(repo) {\n        Ok(res) => rouille::Response::json(\n            &res.into_iter()\n                .map(|p| Response {\n                    number: p.number,\n                    name: p.name,\n                    types: p.types,\n                })\n                .collect::<Vec<Response>>(),\n        ),\n        Err(fetch_all_pokemons::Error::Unknown) => {\n            rouille::Response::from(Status::InternalServerError)\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u60a8\u53ef\u4ee5\u8fd0\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo run"),"\uff0c\u5e76\u4f7f\u7528\u4f60\u6700\u559c\u6b22\u7684 HTTP \u5ba2\u6237\u7aef (curl\u3001postman\u3001...)\u3002\u901a\u8fc7\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," \u4e0a\u53d1\u9001 POST\n\u8bf7\u6c42\u6765\u521b\u5efa\u4e00\u4e9b\u5b9d\u53ef\u68a6\u3002\u7136\u540e\u60a8\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:8000\u3002\u8fd9\u662f\u6211\u5f97\u5230\u7684\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "number": 4,\n    "name": "Charmander",\n    "types": [\n      "Fire"\n    ]\n  },\n  {\n    "number": 25,\n    "name": "Pikachu",\n    "types": [\n      "Electric"\n    ]\n  }\n]\n')),(0,o.kt)("h2",{id:"\u67e5\u8be2\u4e00\u53ea\u5b9d\u53ef\u68a6"},"\u67e5\u8be2\u4e00\u53ea\u5b9d\u53ef\u68a6"),(0,o.kt)("p",null,"\u7b2c\u4e8c\u4e2a\u7528\u4f8b\uff01\u73b0\u5728\u6211\u4eec\u60f3\u901a\u8fc7\u7ed9\u7cfb\u7edf\u4e00\u4e2a\u5b9d\u53ef\u68a6\u7684\u7f16\u53f7\u6765\u83b7\u53d6\u4e00\u4e2a\u5b9d\u53ef\u68a6\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7528\u4f8b\u6587\u4ef6 ",(0,o.kt)("em",{parentName:"p"},"domain/fetch","_","pokemon.rs"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"// domain/mod.rs\npub mod fetch_pokemon;\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u7528\u4f8b\u8fd0\u884c\u65f6\u53ef\u80fd\u9047\u5230\u4ec0\u4e48\u60c5\u51b5\u3002"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5b58\u50a8\u5e93\u53ef\u80fd\u4f1a\u5f15\u53d1\u672a\u77e5\u9519\u8bef\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u8bf7\u6c42\u53c2\u6570\u53ef\u80fd\u662f\u4e0d\u5408\u6cd5\u7684\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u7528\u6237\u7ed9\u5b9a\u7684\u7f16\u53f7\u53ef\u80fd\u5bf9\u5e94\u6ca1\u6709\u5b9d\u53ef\u68a6\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u83b7\u5f97\u5b9d\u53ef\u68a6\u6210\u529f\u4e86")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u4ece\u672a\u77e5\u9519\u8bef\u7684\u6d4b\u8bd5\u5f00\u59cb\u3002\u65b0\u5efa ",(0,o.kt)("em",{parentName:"p"},"domain/fetch","_","pokemon.rs")," \u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::PokemonNumber;\nuse std::sync::Arc;\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use crate::repositories::pokemon::InMemoryRepository;\n\n    #[test]\n    fn it_should_return_an_unknown_error_when_an_unexpected_error_happens() {\n        let repo = Arc::new(InMemoryRepository::new().with_error());\n        let req = Request::new(PokemonNumber::pikachu());\n\n        let res = execute(repo, req);\n\n        match res {\n            Err(Error::Unknown) => {}\n            _ => unreachable!(),\n        };\n    }\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\uff0c\u4e3a\u6d4b\u8bd5\u5b9e\u73b0\u5fc5\u8981\u7684\u7c7b\u578b\u548c\u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Request {\n    pub number: u16,\n}\n\npub enum Error {\n    Unknown\n}\n")),(0,o.kt)("p",null,"\u4e3a\u4e86\u8ba9\u6d4b\u8bd5\u66f4\u6e05\u6670\uff0c\u6211\u4eec\u8fd8\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," \u5b9e\u73b0\u4e86\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"new")," \u65b9\u6cd5\uff0c\u5f53\u7136\u53ea\u5728\u6d4b\u8bd5\u65f6\u4f7f\u7528\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nmod tests {\n    ...\n\n    impl Request {\n        fn new(number: PokemonNumber) -> Self {\n            Self {\n                number: u16::from(number),\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u518d\u5b9e\u73b0\u4e00\u4e2a\u53ea\u7528\u6ee1\u8db3\u8fd9\u9879\u6d4b\u8bd5\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\u5373\u53ef\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::Repository;\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<(), Error> {\n    Err(Error::Unknown)\n}\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u8fd0\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo test fetch_pokemon"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"test it_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\n")),(0,o.kt)("p",null,"\u597d\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u4e86\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8bf7\u6c42\u683c\u5f0f\u9519\u8bef\u7684\u60c5\u51b5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[test]\nfn it_should_return_a_bad_request_error_when_request_is_invalid() {\n    let repo = Arc::new(InMemoryRepository::new());\n    let req = Request::new(PokemonNumber::bad());\n\n    let res = execute(repo, req);\n\n    match res {\n        Err(Error::BadRequest) => {}\n        _ => unreachable!(),\n    };\n}\n")),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonNumber")," \u4e2d\u521b\u5efa ",(0,o.kt)("inlineCode",{parentName:"p"},"bad")," \u51fd\u6570\u3002\u5728 ",(0,o.kt)("em",{parentName:"p"},"domain/entities.rs")," \u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nimpl PokemonNumber {\n    ...\n    pub fn bad() -> Self {\n        Self(0)\n    }\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\uff0c\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," \u4e2d\u6dfb\u52a0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Badrequest")," \u7c7b\u578b\u4e0e\u4e4b\u5bf9\u5e94\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum Error {\n    BadRequest,\n    ...\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u5df2\u7ecf\u80fd\u591f\u901a\u8fc7\u7f16\u8bd1\uff0c\u4f46\u662f\u6d4b\u8bd5\u5c1a\u4e14\u4e0d\u80fd\u901a\u8fc7\uff0c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\u6682\u65f6\u53ea\u80fd\u8fd4\u56de ",(0,o.kt)("inlineCode",{parentName:"p"},"Unknown")," \u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use std::convert::TryFrom;\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<(), Error> {\n    match PokemonNumber::try_from(req.number) {\n        Ok(number) => Err(Error::Unknown),\n        _ => Err(Error::BadRequest),\n    }\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u4e24\u4e2a\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4e86\uff01\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u8fdb\u884c\u7b2c\u4e09\u4e2a\u6d4b\u8bd5\uff1a\u5728\u5b58\u50a8\u5e93\u4e2d\u627e\u4e0d\u5230\u5b9d\u53ef\u68a6\u65f6\uff0c\u5e94\u8be5\u8fd4\u56de ",(0,o.kt)("inlineCode",{parentName:"p"},"NotFound"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[test]\nfn it_should_return_a_not_found_error_when_the_repo_does_not_contain_the_pokemon() {\n    let repo = Arc::new(InMemoryRepository::new());\n    let req = Request::new(PokemonNumber::pikachu());\n\n    let res = execute(repo, req);\n\n    match res {\n        Err(Error::NotFound) => {}\n        _ => unreachable!(),\n    };\n}\n")),(0,o.kt)("p",null,"\u540c\u6837\uff0c\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"Error")," \u4e2d\u8865\u5145 ",(0,o.kt)("inlineCode",{parentName:"p"},"NotFound")," \u9519\u8bef\u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum Error {\n    ...\n    NotFound,\n    ...\n}\n")),(0,o.kt)("p",null,"\u50cf\u4e4b\u524d\u4e00\u6837\uff0c\u6d4b\u8bd5\u6ca1\u6709\u901a\u8fc7\u3002\u6211\u4eec\u9700\u8981\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\u4e2d\u5904\u7406\u5bf9\u5e94\u7684\u9519\u8bef\u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::repositories::pokemon::{FetchOneError, ...};\n\nOk(number) => match repo.fetch_one(number) {\n    Ok(_) => Ok(()),\n    Err(FetchOneError::NotFound) => Err(Error::NotFound),\n    Err(FetchOneError::Unknown) => Err(Error::Unknown),\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\u5728 ",(0,o.kt)("em",{parentName:"p"},"repositories/pokemon.rs")," \u4e2d\u8865\u5145\u5bf9\u5e94\u7684\u65b9\u6cd5\u548c\u9519\u8bef\u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum FetchOneError {\n    NotFound,\n    Unknown,\n}\n\npub trait Repository: Send + Sync {\n    ...\n    fn fetch_one(&self, number: PokemonNumber) -> Result<(), FetchOneError>;\n}\n\nimpl Repository for InMemoryRepository {\n    ...\n    fn fetch_one(&self, number: PokemonNumber) -> Result<(), FetchOneError> {\n        if self.error {\n            return Err(FetchOneError::Unknown);\n        }\n\n        Err(FetchOneError::NotFound)\n    }\n}\n")),(0,o.kt)("p",null,"Et voil\xe0\uff0c\u6d4b\u8bd5\u901a\u8fc7\u4e86\uff01\u6700\u540e\u53bb\u5904\u7406\u83b7\u53d6\u6210\u529f\u7684\u6d4b\u8bd5\u5427\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"#[cfg(test)]\nmod tests {\n    use crate::domain::entities::{PokemonName, PokemonTypes};\n\n    #[test]\n    fn it_should_return_the_pokemon_otherwise() {\n        let repo = Arc::new(InMemoryRepository::new());\n        repo.insert(\n            PokemonNumber::pikachu(),\n            PokemonName::pikachu(),\n            PokemonTypes::pikachu(),\n        )\n        .ok();\n        let req = Request::new(PokemonNumber::pikachu());\n\n        let res = execute(repo, req);\n\n        match res {\n            Ok(res) => {\n                assert_eq!(res.number, u16::from(PokemonNumber::pikachu()));\n                assert_eq!(res.name, String::from(PokemonName::pikachu()));\n                assert_eq!(res.types, Vec::<String>::from(PokemonTypes::pikachu()));\n            }\n            _ => unreachable!(),\n        };\n    }\n}\n")),(0,o.kt)("p",null,"\u9996\u5148\u521b\u5efa ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," \u7c7b\u578b\uff0c\u5e76\u6539\u53d8 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Response {\n    pub number: u16,\n    pub name: String,\n    pub types: Vec<String>,\n}\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<Response, Error> {\n")),(0,o.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u53bb\u5904\u7406 ",(0,o.kt)("inlineCode",{parentName:"p"},"Ok(_)")," \u7684\u90e8\u5206\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::{Pokemon, ...};\n\nOk(Pokemon {\n    number,\n    name,\n    types,\n}) => Ok(Response {\n    number: u16::from(number),\n    name: String::from(name),\n    types: Vec::<String>::from(types),\n})\n")),(0,o.kt)("p",null,"\u6700\u540e\u4fee\u6539\u5b58\u50a8\u5e93\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch_one")," \u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub trait Repository: Send + Sync {\n    fn fetch_one(&self, number: PokemonNumber) -> Result<Pokemon, FetchOneError>;\n}\n\nimpl Repository for InMemoryRepository {\n    fn fetch_one(&self, number: PokemonNumber) -> Result<Pokemon, FetchOneError> {\n        if self.error {\n            return Err(FetchOneError::Unknown);\n        }\n\n        let lock = match self.pokemons.lock() {\n            Ok(lock) => lock,\n            _ => return Err(FetchOneError::Unknown),\n        };\n\n        match lock.iter().find(|p| p.number == number) {\n            Some(pokemon) => Ok(pokemon.clone()),\n            None => Err(FetchOneError::NotFound),\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u6240\u6709\u7684\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4e86\u73b0\u5728\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"test it_should_return_a_not_found_error_when_the_repo_does_not_contain_the_pokemon ... ok\ntest it_should_return_the_pokemon_otherwise ... ok\ntest it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\n")),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u73b0\u5728\u5411 API \u4e2d\u524d\u52a0\u4e00\u4e2a\u65b0\u8def\u7531\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"mod fetch_pokemon;\n\n// in the router macro\n(GET) (/{number: u16}) => {\n    fetch_pokemon::serve(repo.clone(), number)\n}\n")),(0,o.kt)("p",null,"\u63a5\u7740\u518d ",(0,o.kt)("em",{parentName:"p"},"api/fetch","_","pokemon.rs")," \u521b\u5efa\u5bf9\u5e94\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"serve")," \u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::api::Status;\nuse crate::domain::fetch_pokemon;\nuse crate::repositories::pokemon::Repository;\nuse rouille;\nuse serde::Serialize;\nuse std::sync::Arc;\n\n#[derive(Serialize)]\nstruct Response {\n    number: u16,\n    name: String,\n    types: Vec<String>,\n}\n\npub fn serve(repo: Arc<dyn Repository>, number: u16) -> rouille::Response {\n    let req = fetch_pokemon::Request { number };\n    match fetch_pokemon::execute(repo, req) {\n        Ok(fetch_pokemon::Response {\n            number,\n            name,\n            types,\n        }) => rouille::Response::json(&Response {\n            number,\n            name,\n            types,\n        }),\n        Err(fetch_pokemon::Error::BadRequest) => rouille::Response::from(Status::BadRequest),\n        Err(fetch_pokemon::Error::NotFound) => rouille::Response::from(Status::NotFound),\n        Err(fetch_pokemon::Error::Unknown) => rouille::Response::from(Status::InternalServerError),\n    }\n}\n")),(0,o.kt)("p",null,"\u73b0\u5728\u60a8\u53ef\u4ee5\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u6253\u5f00\u60a8\u7684 HTTP \u5ba2\u6237\u7aef\u5e76\u5c06\u4e00\u4e9b\u5b9d\u53ef\u68a6\u6dfb\u52a0\u5230\u5b58\u50a8\u5e93\u4e2d\u3002\u7136\u540e\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u901a\u8fc7\u5728\u7f51\u5740\u672b\u5c3e\u6dfb\u52a0\u5b9d\u53ef\u68a6\u7684\u6570\u91cf\u6765\u4e00\u4e00\u83b7\u53d6\u5b83\u4eec\u3002\n\u4f8b\u5982\uff0c\u5728\u6211\u7684\u8ba1\u7b97\u673a\u4e0a\uff0chttp://localhost:8000/25 \u4e0a\u7684 GET \u8bf7\u6c42\u8fd4\u56de\u4e86\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "number": 25,\n  "name": "Pikachu",\n  "types": [\n    "Electric"\n  ]\n}\n')),(0,o.kt)("h2",{id:"\u5220\u9664\u4e00\u53ea\u5b9d\u53ef\u68a6"},"\u5220\u9664\u4e00\u53ea\u5b9d\u53ef\u68a6"),(0,o.kt)("p",null,"\u6211\u4fdd\u8bc1\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5b8c\u6210\u3002\u5220\u9664\u5b9d\u53ef\u68a6\u662f\u6211\u4eec\u7684\u6700\u540e\u4e00\u4e2a\u7528\u4f8b\u3002\u8fd9\u4e2a\u7528\u4f8b\u7684\u7ed3\u679c\u6709\u56db\u79cd\u53ef\u80fd\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6210\u529f"),(0,o.kt)("li",{parentName:"ul"},"\u8bf7\u6c42\u683c\u5f0f\u9519\u8bef"),(0,o.kt)("li",{parentName:"ul"},"\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u5b9d\u53ef\u68a6"),(0,o.kt)("li",{parentName:"ul"},"\u672a\u77e5\u9519\u8bef")),(0,o.kt)("p",null,"\u60a8\u5e94\u8be5\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u5b83\u4eec\u4e0e\u83b7\u53d6 Pokemon \u7528\u4f8b\u4e2d\u7684\u5b8c\u5168\u76f8\u540c\u3002\u6211\u4f1a\u89e3\u91ca\u66f4\u5feb\u4e00\u4e9b\u3002\u73b0\u5728\u5c31\u5f00\u59cb\u4e86\u3002\u8ba9\u6211\u4eec\u76f4\u63a5\u7f16\u5199\u6240\u6709\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"// domain/mod.rs\npub mod delete_pokemon;\n\n// domain/delete_pokemon.rs\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use crate::domain::entities::{PokemonName, PokemonTypes};\n    use crate::repositories::pokemon::InMemoryRepository;\n\n    #[test]\n    fn it_should_return_an_unknown_error_when_an_unexpected_error_happens() {\n        let repo = Arc::new(InMemoryRepository::new().with_error());\n        let req = Request::new(PokemonNumber::pikachu());\n\n        let res = execute(repo, req);\n\n        match res {\n            Err(Error::Unknown) => {}\n            _ => unreachable!(),\n        };\n    }\n\n    #[test]\n    fn it_should_return_a_bad_request_error_when_request_is_invalid() {\n        let repo = Arc::new(InMemoryRepository::new());\n        let req = Request::new(PokemonNumber::bad());\n\n        let res = execute(repo, req);\n\n        match res {\n            Err(Error::BadRequest) => {}\n            _ => unreachable!(),\n        };\n    }\n\n    #[test]\n    fn it_should_return_a_not_found_error_when_the_repo_does_not_contain_the_pokemon() {\n        let repo = Arc::new(InMemoryRepository::new());\n        let req = Request::new(PokemonNumber::pikachu());\n\n        let res = execute(repo, req);\n\n        match res {\n            Err(Error::NotFound) => {}\n            _ => unreachable!(),\n        };\n    }\n\n    #[test]\n    fn it_should_return_ok_otherwise() {\n        let repo = Arc::new(InMemoryRepository::new());\n        repo.insert(\n            PokemonNumber::pikachu(),\n            PokemonName::pikachu(),\n            PokemonTypes::pikachu(),\n        )\n        .ok();\n        let req = Request::new(PokemonNumber::pikachu());\n\n        let res = execute(repo, req);\n\n        match res {\n            Ok(()) => {},\n            _ => unreachable!(),\n        };\n    }\n\n    impl Request {\n        fn new(number: PokemonNumber) -> Self {\n            Self {\n                number: u16::from(number),\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"\u9664\u4e86\u6210\u529f\u60c5\u51b5\u4e0b\u7684\u6d4b\u8bd5\uff0c\u5176\u4ed6\u7684\u6d4b\u8bd5\u57fa\u672c\u4e0a\u662f\u5bf9 ",(0,o.kt)("em",{parentName:"p"},"domain/fetch","_","pokemon.rs")," \u7684\u590d\u5236\u7c98\u8d34\u3002\u63a5\u4e0b\u6765\u662f\u7c7b\u578b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub struct Request {\n    pub number: u16,\n}\n\npub enum Error {\n    BadRequest,\n    NotFound,\n    Unknown,\n}\n")),(0,o.kt)("p",null,"\u6211\u4eec\u4e0d\u9700\u8981\u5b9a\u4e49 ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," \u7c7b\u578b\uff0c\u56e0\u4e3a\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"Ok")," \u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u3002\u8ba9\u6211\u4eec\u5b9a\u4e49 ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," \u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::domain::entities::PokemonNumber;\nuse crate::repositories::pokemon::{DeleteError, Repository};\nuse std::convert::TryFrom;\nuse std::sync::Arc;\n\npub fn execute(repo: Arc<dyn Repository>, req: Request) -> Result<(), Error> {\n    match PokemonNumber::try_from(req.number) {\n        Ok(number) => match repo.delete(number) {\n            Ok(()) => Ok(()),\n            Err(DeleteError::NotFound) => Err(Error::NotFound),\n            Err(DeleteError::Unknown) => Err(Error::Unknown),\n        },\n        _ => Err(Error::BadRequest),\n    }\n}\n")),(0,o.kt)("p",null,"\u592a\u597d\u4e86\uff01\u73b0\u5728\u6211\u4eec\u53ea\u5269\u4e0b\u5b9e\u73b0\u5b58\u50a8\u5e93\u4e86\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5b8c\u6210\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"pub enum DeleteError {\n    NotFound,\n    Unknown,\n}\n\npub trait Repository: Send + Sync {\n    fn delete(&self, number: PokemonNumber) -> Result<(), DeleteError>;\n}\n\nimpl Repository for InMemoryRepository {\n    fn delete(&self, number: PokemonNumber) -> Result<(), DeleteError> {\n        if self.error {\n            return Err(DeleteError::Unknown);\n        }\n\n        let mut lock = match self.pokemons.lock() {\n            Ok(lock) => lock,\n            _ => return Err(DeleteError::Unknown),\n        };\n\n        let index = match lock.iter().position(|p| p.number == number) {\n            Some(index) => index,\n            None => return Err(DeleteError::NotFound),\n        };\n\n        lock.remove(index);\n        Ok(())\n    }\n}\n")),(0,o.kt)("p",null,"\u8fd0\u884c\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"test it_should_return_a_bad_request_error_when_request_is_invalid ... ok\ntest it_should_return_a_not_found_error_when_the_repo_does_not_contain_the_pokemon ... ok\ntest it_should_return_an_unknown_error_when_an_unexpected_error_happens ... ok\ntest it_should_return_ok_otherwise ... ok\nWe can now add the new route in our API. Let's add the following to api/mod.rs:\n")),(0,o.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 API \u4e2d\u6dfb\u52a0\u65b0\u8def\u7531\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"mod delete_pokemon;\n\n// in the router macro\n(DELETE) (/{number: u16}) => {\n    delete_pokemon::serve(repo.clone(), number)\n}\n\nenum Status {\n    Ok,\n    ...\n}\nimpl From<Status> for rouille::Response {\n    fn from(status: Status) -> Self {\n        let status_code = match status {\n            Status::Ok => 200,\n            ...\n")),(0,o.kt)("p",null,"\u6211\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"Status")," \u4e2d\u8865\u5145\u4e00\u4e2a OK \u7c7b\u578b\u7528\u6765\u8868\u793a\u6ca1\u6709\u76f8\u5e94\u4f53\u7684 200 \u72b6\u6001\u7801\uff0c\u73b0\u5728\u6dfb\u52a0\u5bf9\u5e94\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"serve")," \u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use crate::api::Status;\nuse crate::domain::delete_pokemon;\nuse crate::repositories::pokemon::Repository;\nuse rouille;\nuse std::sync::Arc;\n\npub fn serve(repo: Arc<dyn Repository>, number: u16) -> rouille::Response {\n    let req = delete_pokemon::Request { number };\n    match delete_pokemon::execute(repo, req) {\n        Ok(()) => rouille::Response::from(Status::Ok),\n        Err(delete_pokemon::Error::BadRequest) => rouille::Response::from(Status::BadRequest),\n        Err(delete_pokemon::Error::NotFound) => rouille::Response::from(Status::NotFound),\n        Err(delete_pokemon::Error::Unknown) => rouille::Response::from(Status::InternalServerError),\n    }\n}\n")),(0,o.kt)("p",null,"\u901a\u8fc7\u4f7f\u7528 HTTP \u5ba2\u6237\u7aef\uff0c\u73b0\u5728\u4f60\u5e94\u8be5\u80fd\u591f\u5220\u9664\u5b9d\u53ef\u68a6\u4e86 :)"),(0,o.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,o.kt)("p",null,"\u6211\u5e0c\u671b\u5b83\u4e0d\u4f1a\u592a\u957f......\u4f46\u73b0\u5728\u6211\u4eec\u7684\u5ba2\u6237\u5f88\u9ad8\u5174\uff01\u8036\uff01\u4e0b\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u4e3a\u6211\u4eec\u7684\u7528\u4f8b\u5b9e\u73b0\u53e6\u4e00\u4e2a\u524d\u7aef\u3002\u73b0\u5728\u6211\u4eec\u53ea\u6709\u4e00\u4e2a HTTP API\uff0c\u5982\u679c\u8fd8\u80fd\u6709\u4e00\u4e2a CLI\n\u6765\u7ba1\u7406\u6211\u4eec\u7684\u5b9d\u53ef\u68a6\u5c31\u597d\u4e86 :)"),(0,o.kt)("p",null,"\u4ee3\u7801\u53ef\u4ee5\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alexislozano/pokedex/tree/article-5"},"Github")," \u4e0a\u67e5\u770b"))}k.isMDXComponent=!0}}]);