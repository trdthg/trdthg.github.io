"use strict";(self.webpackChunktrdthg_github_io=self.webpackChunktrdthg_github_io||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/i3wm","metadata":{"permalink":"/blog/i3wm","source":"@site/blog/i3wm.md","title":"\u6298\u817e i3wm","description":"\u591a\u5c4f\u5e55","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.065,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"\u8d44\u6e90\u6574\u7406","permalink":"/blog/menu"}},"content":"## \u591a\u5c4f\u5e55\\n\\n```sh\\nxrandr\\nxrandr --output DP-1 --auto --right-of eDP-1\\n```"},{"id":"/menu","metadata":{"permalink":"/blog/menu","source":"@site/blog/menu.md","title":"\u8d44\u6e90\u6574\u7406","description":"- Leaf\u2014\u2014\u7f8e\u56e2\u70b9\u8bc4\u5206\u5e03\u5f0f ID \u751f\u6210\u7cfb\u7edf","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.075,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u6298\u817e i3wm","permalink":"/blog/i3wm"},"nextItem":{"title":"Let\'s Dev: A Package Manager","permalink":"/blog/pkg_mng"}},"content":"- [Leaf\u2014\u2014\u7f8e\u56e2\u70b9\u8bc4\u5206\u5e03\u5f0f ID \u751f\u6210\u7cfb\u7edf](https://tech.meituan.com/2017/04/21/mt-leaf.html)"},{"id":"/pkg_mng","metadata":{"permalink":"/blog/pkg_mng","source":"@site/blog/pkg_mng.md","title":"Let\'s Dev: A Package Manager","description":"\u5927\u5bb6\u597d\uff01\u4eca\u5929\uff0c\u6211\u4eec\u8981\u5199\u4e00\u4e2a\u65b0\u7684\u5305\u7ba1\u7406\u5668\uff0c\u751a\u81f3\u6bd4 Yarn \u8fd8\u8981\u597d\uff01\u597d\u5427\uff0c\u4e5f\u8bb8\u4e0d\u662f\uff0c\u4f46\u81f3\u5c11\u6211\u4eec\u4f1a\u73a9\u5f97\u5f00\u5fc3\uff0c\u4e86\u89e3\u5305\u7ba1\u7406\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u601d\u8003 Yarn","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.33,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u8d44\u6e90\u6574\u7406","permalink":"/blog/menu"},"nextItem":{"title":"\u67e5\u8be2\u5f15\u64ce\uff1a\u63a8\u9001\u4e0e\u62c9\u53d6","permalink":"/blog/search_engine"}},"content":"\u5927\u5bb6\u597d\uff01\u4eca\u5929\uff0c\u6211\u4eec\u8981\u5199\u4e00\u4e2a\u65b0\u7684\u5305\u7ba1\u7406\u5668\uff0c\u751a\u81f3\u6bd4 Yarn \u8fd8\u8981\u597d\uff01\u597d\u5427\uff0c\u4e5f\u8bb8\u4e0d\u662f\uff0c\u4f46\u81f3\u5c11\u6211\u4eec\u4f1a\u73a9\u5f97\u5f00\u5fc3\uff0c\u4e86\u89e3\u5305\u7ba1\u7406\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5e76\u601d\u8003 Yarn\\n\u7684\u4e0b\u4e00\u6b65\u53ef\u80fd\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002"},{"id":"/search_engine","metadata":{"permalink":"/blog/search_engine","source":"@site/blog/search_engine.md","title":"\u67e5\u8be2\u5f15\u64ce\uff1a\u63a8\u9001\u4e0e\u62c9\u53d6","description":"Query Engines: Push vs. Pull","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":4.57,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Let\'s Dev: A Package Manager","permalink":"/blog/pkg_mng"},"nextItem":{"title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","permalink":"/blog/tail_latency"}},"content":"[Query Engines: Push vs. Pull](http://justinjaffray.com/query-engines-push-vs.-pull/)\\n\\n\u8003\u8651\u4ee5\u4e0b\u7684 SQL \u8bed\u53e5\\n\\n```sql\\nSELECT DISTINCT customer_first_name\\nFROM customer\\nWHERE customer_balance > 0\\n```\\n\\n\u67e5\u8be2\u4f18\u5316\u5668\u901a\u5e38\u5c06\u8fd9\u6837\u7684 SQL \u67e5\u8be2\u7f16\u8bd1\u6210\u4e00\u7cfb\u5217\u79bb\u6563\u8fd0\u7b97\u7b26\uff1a\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202254060.png)\\n\\n```\\nDistinct\\n<- Map(customer_first_name)\\n<- Select(customer_balance > 0)\\n<- customer\\n```\\n\\n\u5728\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u4e2d\uff0c\u6d88\u8d39\u8005 `customers` \u9a71\u52a8\u7cfb\u7edf\u3002\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u8fd0\u7b97\u540e\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u884c\uff1a\u7528\u6237\u5c06\u5411\u6839\u8282\u70b9\uff08Distinct\uff09\u8bf7\u6c42\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u56de\u5411\\nMap \u8be2\u95ee\u4e00\u884c\uff0c\u63a5\u7740\u5411 Select \u8be2\u95ee\u4e00\u884c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\\n\\n\u5728\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u4e2d\uff0c\u751f\u4ea7\u8005 `producers` \u9a71\u52a8\u7cfb\u7edf\u3002\u6bcf\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5f53\u4ed6\u63a5\u6536\u5230\u6570\u636e\u65f6\uff0c\u5c31\u4f1a\u544a\u77e5\u4e0b\u6e38\u7684\u8fd0\u7b97\u7b26\uff0c`customer`\\n\u4f5c\u4e3a\u67e5\u8be2\u57fa\u8868\u56de\u544a\u8bc9 Select \u81ea\u5df1\u7684\u4fe1\u606f\uff0c\u63a5\u7740\u662f Map\u3001Distinct\u3002\\n\\n### Pull-Based \u67e5\u8be2\u5f15\u64ce\\n\\n\u57fa\u4e8e\u62c9\u53d6\u7684\u67e5\u8be2\u5f15\u64ce\u4e00\u822c\u4e5f\u88ab\u79f0\u4e3a\u4f7f\u7528 Volcano \u6216 Iterator \u6a21\u578b\u3002\u8fd9\u662f\u6700\u53e4\u8001\u548c\u6700\u8457\u540d\u7684\u67e5\u8be2\u6267\u884c\u6a21\u578b\uff0c\u5e76\u4ee5 1994 \u5e74\u6807\u51c6\u5316\u5176\u7ea6\u5b9a\u7684\u8bba\u6587\u547d\u540d\u3002\\n\\n\u9996\u5148\u6211\u4eec\u6709\u4e00\u4e2a\u5173\u7cfb\uff0c\u6211\u4eec\u901a\u8fc7 Scan \u628a\u5b83\u4e13\u4e3a\u4e00\u4e2a\u8fed\u4ee3\u5668\\n\\n```js\\nlet customer = [\\n  { id: 1, firstName: \\"justin\\", balance: 10 },\\n  { id: 2, firstName: \\"sissel\\", balance: 0 },\\n  { id: 3, firstName: \\"justin\\", balance: -3 },\\n  { id: 4, firstName: \\"smudge\\", balance: 2 },\\n  { id: 5, firstName: \\"smudge\\", balance: 0 },\\n];\\n\\nfunction* Scan(coll) {\\n  for (let x of coll) {\\n    yield x;\\n  }\\n}\\n```\\n\\n\u63a5\u4e0b\u6765\u4e3a\u4ed6\u5b9e\u73b0\u4e00\u4e9b\u64cd\u4f5c\u7b26\\n\\n```js\\nfunction* Select(p, iter) {\\n  for (let x of iter) {\\n    if (p(x)) {\\n      yield x;\\n    }\\n  }\\n}\\n\\nfunction* Map(f, iter) {\\n  for (let x of iter) {\\n    yield f(x);\\n  }\\n}\\n\\nfunction* Distinct(iter) {\\n  let seen = new Set();\\n  for (let x of iter) {\\n    if (!seen.has(x)) {\\n      yield x;\\n      seen.add(x);\\n    }\\n  }\\n}\\n```\\n\\n\u7ffb\u8bd1\u6211\u4eec\u7684\u67e5\u8be2\u8bed\u53e5\\n\\n```sql\\nSELECT DISTINCT customer_first_name FROM customer WHERE customer_balance > 0\\n```\\n\\n```js\\nDistinct(\\n    Map(\\n        (c) => c.firstName,\\n        Select((c) => c.balance > 0, Scan(customer))\\n    )\\n),\\n```\\n\\n## Push-Based \u67e5\u8be2\u5f15\u64ce\\n\\n\u57fa\u4e8e\u63a8\u9001\u7684\u67e5\u8be2\u5f15\u64ce\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a Reactive\u3001Observer\u3001Stream \u6216\u56de\u8c03\u5730\u72f1\u6a21\u578b\uff0c\u5982\u60a8\u6240\u6599\uff0c\u4e0e\u6211\u4eec\u4e4b\u524d\u7684\u793a\u4f8b\u7c7b\u4f3c\uff0c\u4f46\u5b83\u98a0\u8986\u4e86\u5b83\u3002 \u8ba9\u6211\u4eec\u4ece\u5b9a\u4e49\\nScan \u5f00\u59cb\\n\\n```js\\nlet customer = [\\n  { id: 1, firstName: \\"justin\\", balance: 10 },\\n  { id: 2, firstName: \\"sissel\\", balance: 0 },\\n  { id: 3, firstName: \\"justin\\", balance: -3 },\\n  { id: 4, firstName: \\"smudge\\", balance: 2 },\\n  { id: 5, firstName: \\"smudge\\", balance: 0 },\\n];\\n\\nfunction Scan(relation, out) {\\n  for (r of relation) {\\n    out(r);\\n  }\\n}\\n```\\n\\n\u6211\u4eec\u5c06 \u201c\u6b64\u8fd0\u7b97\u7b26\u544a\u8bc9\u4e0b\u6e38\u8fd0\u7b97\u7b26\u201d \u6784\u5efa\u4e3a\u5b83\u9700\u8981\u8c03\u7528\u7684\u95ed\u5305\u3002\\n\\n\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u4e5f\u662f\u5982\u6b64\\n\\n```js\\nfunction Select(p, out) {\\n  return (x) => {\\n    if (p(x)) out(x);\\n  };\\n}\\n\\nfunction Map(f, out) {\\n  return (x) => {\\n    out(f(x));\\n  };\\n}\\n\\nfunction Distinct(out) {\\n  let seen = new Set();\\n  return (x) => {\\n    if (!seen.has(x)) {\\n      seen.add(x);\\n      out(x);\\n    }\\n  };\\n}\\n```\\n\\n\u67e5\u8be2\u8bed\u53e5\u5efa\u6a21\uff1a\\n\\n```js\\nlet result = [];\\nScan(\\n  customer,\\n  Select(\\n    (c) => c.balance > 0,\\n    Map(\\n      (c) => c.firstName,\\n      Distinct((r) => result.push(r)),\\n    ),\\n  ),\\n);\\n```\\n\\n## \u533a\u522b\\n\\n\u5728\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u4e2d\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u7b26\u90fd\u662f\u60f0\u6027\u7684\uff0c\u53ea\u6709\u5f53\u6570\u636e\u9700\u8981\u65f6\uff0c\u64cd\u4f5c\u7b26\u624d\u4f1a\u5f00\u59cb\u8ba1\u7b97\uff08yield\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u7cfb\u7edf\u7684\u884c\u4e3a\u548c\u7528\u6237\u7684\u884c\u4e3a\u7d27\u5bc6\u8026\u5408\u3002\\n\\n\u518d\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u5f00\u59cb\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u76f4\u5230\u4ed6\u63a5\u53d7\u5230\u4e00\u884c\u6570\u636e\u3002\u56e0\u6b64\u7cfb\u7edf\u7684\u5de5\u4f5c\u548c\u6d88\u8d39\u8005\u662f\u89e3\u8026\u7684\u3002\\n\\n\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u8fd8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u5e76\u5c06\u67e5\u8be2\u7ed3\u679c\u653e\u5230\u91cc\u9762\u3002\u8fd9\u5c31\u662f\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u7ed9\u4eba\u7684\u611f\u89c9\u3002\u5b83\u4f1a\u5047\u8bbe\u6d88\u8d39\u8005\u4e0d\u5b58\u5728\uff0c\u5f53\u88ab\u8bf7\u6c42\u65f6\uff0c\u80fd\u591f\u7acb\u5373\u4f5c\u51fa\u54cd\u5e94\u3002\\n\\n## DAG, yo\\n\\nSQL \u4e2d\u6709\u4e00\u4e2a With \u7ed3\u6784\uff0c\u5b83\u5141\u8bb8\u5728\u67e5\u8be2\u4e2d\u591a\u6b21\u5f15\u7528\u540c\u4e00\u4e2a\u7ed3\u679c\u96c6\uff1a\\n\\n```sql\\nWITH foo as (<some complex query>)\\nSELECT * FROM\\n    (SELECT * FROM foo WHERE c) AS foo1\\n  JOIN\\n    foo AS foo2\\n  ON foo1.a = foo2.b\\n```\\n\\n\u57fa\u4e8e Push \u7684\u7cfb\u7edf\u80fd\u591f\u4f18\u5316\u67e5\u8be2\u7ed3\u6784\uff0c\u590d\u7528\u7ed3\u679c\u96c6\uff0c\u800c\u57fa\u4e8e Pull \u7684\u7cfb\u7edf\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002"},{"id":"/tail_latency","metadata":{"permalink":"/blog/tail_latency","source":"@site/blog/tail_latency.md","title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","description":"Hedged requests \u2014 Tackling tail latency","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":4.83,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u67e5\u8be2\u5f15\u64ce\uff1a\u63a8\u9001\u4e0e\u62c9\u53d6","permalink":"/blog/search_engine"},"nextItem":{"title":"computer_network/class_1","permalink":"/blog/computer_network/class_1"}},"content":"[Hedged requests \u2014 Tackling tail latency](https://medium.com/swlh/hedged-requests-tackling-tail-latency-9cea0a05f577)\\n\\n\u901a\u5e38\u51fa\u73b0\u5728\u51fa\u73b0\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u6709\u5f88\u591a\u4f18\u7f3a\u70b9\\n\\n\u4f7f\u7528\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5e38\u89c1\u539f\u56e0\uff1a\\n\\n- \u53ef\u7528\u6027\\n- \u53ef\u6269\u5c55\u6027\\n- \u5206\u533a\u5bb9\u9519\\n- \u72ec\u7acb\u90e8\u7f72\\n- \u4e3a\u4e0d\u540c\u76ee\u7684\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\\n\\n\u8fd9\u4e9b\u53ef\u80fd\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u95ee\u9898\uff1a\\n\\n- \u6210\u672c\\n- \u590d\u6742\\n- \u4e00\u81f4\u6027\\n- **\u5ef6\u8fdf**\\n\\n\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u5ef6\u8fdf\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\u662f\u5c3e\u90e8\u5ef6\u8fdf\u3002\\n\\n## \u5ef6\u8fdf\\n\\n\u5f53\u6211\u4eec\u4f7f\u7528\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\uff0c\u5ef6\u8fdf\u4f1a\u4e0d\u53ef\u907f\u514d\u7684\u589e\u52a0\u3002\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u8df3\u90fd\u4e0d\u662f\u514d\u8d39\u7684\uff0c\u9664\u4e86\u7f51\u7edc\u5ef6\u8fdf\u8fd8\u6709\u5176\u4ed6\u6210\u672c\uff0c\u5982\u679c\u4f7f\u7528 HTTP\\n\u901a\u4fe1\uff0c\u6211\u4eec\u8fd8\u8981\u5904\u7406\u6d88\u606f\u3001\u89e3\u6790\u6d88\u606f\u3001\u9a8c\u8bc1\u8eab\u4efd\u4ee4\u724c\u3001\u4ee5\u53ca\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u5230\u7ba1\u9053\u4e2d\u7684\u4efb\u4f55\u6570\u636e\u3002\u8fd9\u4e9b\u662f\u5728\u8bbe\u8ba1\u5206\u5e03\u5f0f\u7cfb\u7edf\u65f6\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\u6211\u4eec\u5fc5\u987b\u8003\u8651\u662f\u5426\u6709\u5fc5\u8981\u5206\u53d1\u65b0\u7684\u7cfb\u7edf\u3002\\n\\n\u8981\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5982\u4f55\u6d4b\u91cf\u5ef6\u8fdf\u3002\u6700\u7b80\u5355\u7684\u7b54\u6848\u4e4b\u4e00\u662f\u4f7f\u7528\u767e\u5206\u6bd4\u3002\\n\\n## \u767e\u5206\u6bd4\\n\\n\u9996\u5148\u662f\u5b9a\u4e49\u6211\u4eec\u7684\u89c2\u5bdf\u7ec4\u3002\u5bf9\u4e8e\u5ef6\u8fdf\uff0c\u6700\u5e38\u89c1\u7684\u89c2\u5bdf\u7ec4\u662f\u7ed9\u5b9a\u8bf7\u6c42\u7c7b\u522b\u7684\u54cd\u5e94\u65f6\u95f4\u3002\u8ba1\u7b97\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6\u8bf7\u6c42\u7684\u6240\u6709\u54cd\u5e94\u65f6\u95f4\u5e76\u6392\u5e8f\u3002\\n2. \u53d6\u524d x% \u7684\u5143\u7d20\u3002\\n3. \u83b7\u53d6\u96c6\u5408\u7684\u6700\u5927\uff08\u6700\u957f\uff09\u503c\u3002\\n\\n\u4ee5\u8bf7\u6c42 `/hello-world` \u63a5\u53e3\u4e3a\u4f8b\\n\\n1. \u83b7\u53d6\u8bf7\u6c42\u7684\u6240\u6709\u54cd\u5e94\u65f6\u95f4\u5e76\u6392\u5e8f\u3002\\n   - \u83b7\u53d6\u54cd\u5e94\u65f6\u95f4\uff1a23, 20, 21, 20, 23, 20, 45, 21, 25, 25\\n   - \u6392\u5e8f\uff1a20, 20, 20, 21, 21, 23, 23, 25, 25, 45\\n2. \u53d6\u524d 50% \u5143\u7d20\uff1a 20, 20, 20, 21, 21\\n3. \u5f97\u5230\u6700\u5927\u503c\uff1a21\\n\\n\u6240\u4ee5 P50 \u5c31\u662f 21 ms\uff0c\u5982\u679c\u53d6\u524d 90 % \u5143\u7d20\uff0cP90 \u5c31\u662f 25 ms\\n\\n## \u5c3e\u90e8\u5ef6\u8fdf\\n\\n\u5c3e\u90e8\u5ef6\u8fdf\u662f\u767e\u5206\u4f4d\u8c31\u6700\u672b\u7aef\u7684\u5ef6\u8fdf\u3002\u4e00\u822c\u7cfb\u7edf\u5bf9 99% \u7684\u8bf7\u6c42\u7684\u54cd\u5e94\u90fd\u5f88\u5feb\uff0c\u4f46\u662f\u5bf9\u4e8e\u5269\u4e0b\u7684 1% \u53ef\u80fd\u975e\u5e38\u5dee\u3002\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202210071.png)\\n\u5bf9\u4e8e\u4e00\u4e2a\u6bcf\u5206\u949f\u63a5\u53d7\u6570\u767e\u4e07\u8bf7\u6c42\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9 1% \u5c31\u4e0d\u662f\u5fae\u4e0d\u8db3\u9053\u4e86\\n\\n2013 \u5e74 Google \u53d1\u8868\u7684\u8bba\u6587\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6cd5\\n\\n- Hedged requests\\n- Tied requests\\n- Micro partitions\\n- Selective replication\\n- Latency-induced probation\\n- Good enough responses\\n- Canary requests\\n\\nP99 = 140ms P95 = 70ms\\n\\n\u5269\u4e0b\u7684 5% \u8bf7\u6c42\u5360\u4e86\u603b\u8bf7\u6c42\u4e00\u534a\u7684\u5ef6\u8fdf\\n\\n## \u5bf9\u51b2\u8bf7\u6c42\\n\\n\u5982\u679c\u8bf7\u6c42\u7684\u65f6\u957f\u8d85\u8fc7 P95 \u8fd8\u6ca1\u6709\u7ed3\u679c\uff0c\u90a3\u4e48\u5c31\u91cd\u53d1\\n\\n## \u6a21\u62df\u5c3e\u90e8\u5ef6\u8fdf\\n\\n\u4e0b\u9762\u7684\u4ee3\u7801\u6a21\u62df\u4e86\u6709 %4 \u7684\u8bf7\u6c42\u4f1a\u7b49\u5f85 100ms\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"math/rand\\"\\n\\t\\"net/http\\"\\n\\t\\"time\\"\\n\\n\\t\\"github.com/gorilla/mux\\"\\n)\\n\\nfunc main() {\\n\\trouter := mux.NewRouter()\\n\\n\\trouter.HandleFunc(\\"/ishealthy\\", func(w http.ResponseWriter, r *http.Request) {\\n\\t\\trd := rand.New(rand.NewSource(time.Now().UnixNano()))\\n\\t\\trequestPercentile := rd.Intn(100)\\n\\t\\twaitTime := 0\\n\\n\\t\\tif requestPercentile > 96 {\\n\\t\\t\\twaitTime = 100\\n\\t\\t}\\n\\n\\t\\ttime.Sleep(time.Duration(waitTime+15) * time.Millisecond)\\n\\t\\tw.WriteHeader(http.StatusOK)\\n\\t\\tw.Write([]byte(\\"Healthy\\"))\\n\\t}).Methods(http.MethodGet)\\n\\thttp.ListenAndServe(\\":8080\\", router)\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202241384.png)\\n\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\\n\\n- p50 \u5c0f\u4e8e 20ms\\n- p95 20ms \u5de6\u53f3\\n- p99 \u8d85\u8fc7 115ms\\n\\n## \u5bf9\u91cd\u6d4b\u8bd5\\n\\n\u65b0\u589e\u4e24\u4e2a\u63a5\u53e3\\n\\n- `/falout`\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u8f6c\u53d1\u51fa 3 \u4e2a\u526f\u672c\u3002\u5e94\u8be5\u80fd\u5230\u8fbe P99 \u6027\u80fd\u3002\u4f46\u4f1a\u53d1\u51fa 3 \u500d\u4ee5\u4e0a\u7684\u8bf7\u6c42\u3002\\n- `/hedged`\uff1a\u5728\u7b2c\u4e00\u4e2a\u672a\u8fbe\u5230\u9884\u671f P95 (21ms) \u4e4b\u540e\u89e6\u53d1\u5bf9\u51b2\u8bf7\u6c42\u3002\u5e94\u8be5\u5728 40 \u6beb\u79d2\u5de6\u53f3\u5c06\u5c3e\u90e8\u6027\u80fd\u63d0\u9ad8\u5230 P99\u3002\u6700\u591a\u53ea\u80fd\u591a\u53d1\u51fa 5%\\n  \u7684\u8bf7\u6c42\u3002\\n\\n**falout**\\n\\n```go\\nfunc queryFanOut(urls []string) string {\\n\\tch := make(chan string, len(urls))\\n\\tfor _, url := range urls {\\n\\t\\tgo func(u string) {\\n\\t\\t\\tch <- executeQuery(u)\\n\\t\\t}(url)\\n\\t}\\n\\treturn <-ch\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248476.png)\\n\\n**hedged**\\n\\n```go\\nfunc queryWithHedgedRequests(urls []string) string {\\n\\tch := make(chan string, len(urls))\\n\\tfor _, url := range urls {\\n\\t\\tgo func(u string, c chan string) {\\n\\t\\t\\tc <- executeQuery(u)\\n\\t\\t}(url, ch)\\n\\n\\t\\tselect {\\n\\t\\tcase r := <-ch:\\n\\t\\t\\treturn r\\n\\t\\tcase <-time.After(21 * time.Millisecond):\\n\\t\\t}\\n\\t}\\n\\n\\treturn <-ch\\n}\\n```\\n\\n![](https://trdthg-img-for-md-1306147581.cos.ap-beijing.myqcloud.com/img/202204202248260.png)\\n\\n## \u7ed3\u8bba\\n\\n\u4ec5\u7528\u51e0\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u5e45\u6539\u5584\u5c3e\u90e8\u5ef6\u8fdf\u3002\u5728\u5c06\u5176\u7528\u4f5c\u751f\u4ea7\u7cfb\u7edf\u4e4b\u524d\uff0c\u8be5\u793a\u4f8b\u8fd8\u6709\u5f88\u591a\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\uff0c\u4f46\u6838\u5fc3\u5b9e\u73b0\u4e0e\u6b64\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002\\n\u8be5\u6280\u672f\u9488\u5bf9\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u95ee\u9898\uff0c\u5728\u7528\u4e8e\u5b9e\u9645\u751f\u4ea7\u5e94\u7528\u4e4b\u524d\u5e94\u8fdb\u884c\u5f7b\u5e95\u5206\u6790\u3002"},{"id":"/computer_network/class_1","metadata":{"permalink":"/blog/computer_network/class_1","source":"@site/blog/computer_network/class_1.md","title":"computer_network/class_1","description":"\u7535\u8def\u4ea4\u6362 circuit-switching","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":0.825,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u5bf9\u91cd\u8bf7\u6c42 - \u5e94\u5bf9\u5c3e\u90e8\u5ef6\u8fdf","permalink":"/blog/tail_latency"},"nextItem":{"title":"Rust Quiz#1","permalink":"/blog/rust-quiz/01"}},"content":"#\\n\\n## \u7535\u8def\u4ea4\u6362 circuit-switching\\n\\n\u9891\u5206\uff0c\u65f6\u5206\\n\\n\u5efa\u7acb\u8fde\u63a5 - \u6570\u636e\u4f20\u8f93 - \u91ca\u653e\u8d44\u6e90\\n\\n## \u5206\u7ec4 (\u5305) \u4ea4\u6362 package-switching\\n\\n\u4e3a\u6bcf\u4e00\u4e2a\u8fde\u63a5\u53ea\u5206\u914d\u4e00\u5c0f\u5757\u8d44\u6e90\uff0c\u540c\u65f6\u670d\u52a1\u591a\u4e2a (\u7528\u6237) \u8fde\u63a5\\n\\n\u7aef\u5230\u7aef\\n\\n- \u6240\u6709\u6570\u636e\u5305\u90fd\u662f\u5229\u7528\u7684\u5b8c\u6574\u7684\u5e26\u5bbd\uff0c\u5e26\u5bbd\u4e0d\u7528\u5206\u7247\\n- \u9650\u5236\u5728\u4ea4\u6362\u673a\u8f6c\u53d1\u7684\u80fd\u529b\\n\\n- \u4e0d\u9700\u8981\u9884\u7559\u8d44\u6e90\\n- \u4e0d\u9700\u8981\u63d0\u524d\u548c\u8f6c\u53d1\u8bbe\u5907\u6c9f\u901a\uff0c\\n- \u9700\u8981\u5b58\u50a8\u8f6c\u53d1\\n- \u8d85\u8fc7\u8f6c\u53d1\u80fd\u529b\u4f1a\u6709\u6392\u961f\u5ef6\u8fdf\uff0c\u751a\u81f3\u4ea7\u751f\u4e22\u5305\\n  - \u7535\u8def\u4ea4\u6362\u4f1a\u9650\u5236\u53d1\u9001\u901f\u7387\uff0c\u4e0d\u4f1a\u5728\u4e2d\u95f4\u4ea7\u751f\u4e0d\u53ef\u7528\\n\\n## DSL \u6570\u5b57\u8ba2\u9605\u7f51\u7edc\\n\\n\u4e13\u7528\u7535\u8bdd\u7ebf\u8def ->"},{"id":"/rust-quiz/01","metadata":{"permalink":"/blog/rust-quiz/01","source":"@site/blog/rust-quiz/01.md","title":"Rust Quiz#1","description":"\u9898\u76ee","date":"2022-10-21T05:38:46.000Z","formattedDate":"2022\u5e7410\u670821\u65e5","tags":[],"readingTime":6.445,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"computer_network/class_1","permalink":"/blog/computer_network/class_1"}},"content":"## \u9898\u76ee\\n\\n\u4e0b\u9762\u7684 1 \u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\\n\\n```rs\\nmacro_rules! m {\\n    ($( $s:stmt )*) => {\\n        $(\\n            { stringify!($s); 1 }\\n        )<<*\\n    };\\n}\\n\\nfn main() {\\n    print!(\\n        \\"{}{}{}\\",\\n        m! { return || true },\\n        m! { (return) || true },\\n        m! { {return} || true },\\n    );\\n}\\n```\\n\\n1. The program exhibits undefined behavior\\n2. The program does not compile\\n3. The program is guaranteed to output: [ ]\\n\\n## \u89e3\u7b54\\n\\n122\\n\\n\u8fd9\u4e2a\u95ee\u9898\u56f4\u7ed5\u7740 Rust \u7684\u8bed\u6cd5\u8fb9\u754c\u8bbe\u8ba1\u3002\\n\\n> This question revolves around where the Rust grammar places statement\\n> boundaries.\\n\\n\u5b8f\u7684\u8f93\u5165\u89c4\u5219\u662f `$( $s:stmt )*`, \u5b83\u80fd\u591f\u5339\u914d\u5230 0 \u6216\u591a\u4e2a Rust \u8bed\u53e5\u3002\u8be5\u89c4\u5219\u5185\u90e8\u7684 `$s: stmt`\\n\u662f\u4e00\u4e2a\u7247\u6bb5\u5206\u7c7b\u7b26\uff0c\u5b83\u80fd\u591f\u5339\u914d\u5230\u4e00\u4e2a\u7b26\u5408 Rust \u8bed\u6cd5\u89c4\u8303\u7684\u8868\u8fbe\u5f0f\u3002\u88ab\u5339\u914d\u5230\u7684\u8bed\u53e5\u53ef\u4ee5\u5728\u5c55\u5f00\u540e\u7684\u4ee3\u7801\u4e2d\u4f5c\u4e3a `$s` \u3002\u800c\u5916\u90e8\u7684 `$(...)*`\\n\u90e8\u5206\u8868\u793a\u4e00\u4e2a\u91cd\u590d\uff0c\u5b83\u53ef\u4ee5\u91cd\u590d\u5339\u914d 0 \u6216\u591a\u6b21\u5185\u5bb9\u3002\\n\\n> The input rule of the macro m! is $($s:stmt)* which matches zero or more Rust\\n> statements. The $(...)* part of the rule is a repetition which matches the\\n> contents of the repetition zero or more times, and the $s:stmt is a fragment\\n> specifier that matches a Rust statement (stmt) conforming to the rules of the\\n> Rust grammar. The matched statements are available within the expanded code as\\n> the fragment variable $s.\\n\\n\u8bed\u53e5\u662f\u51fd\u6570\u4f53\u4e2d\u5141\u8bb8\u7684\u6700\u9ad8\u7ea7\u522b\u7684\u8bed\u6cd5\u5355\u4f4d\u3002\u4e0b\u9762\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u8bed\u53e5\u7684\u4f8b\u5b50\u3002\\n\\n> A statement is the top-level unit of syntax permitted within a function body.\\n> All of the following are examples of statements.\\n\\n```rs\\n// Items are statements.\\nstruct S { x: u64 }\\n\\n// Let-bindings are statements.\\nlet mut s = S { x: 1 }\\n\\n// Expressions are statements.\\ns.x + 1\\n```\\n\\n\u51fd\u6570\u4f53\u7684\u8bed\u6cd5\u8981\u6c42\u67d0\u4e9b\u7c7b\u578b\u7684\u8bed\u53e5\u540e\u9762\u6709\u4e00\u4e2a\u5206\u53f7\uff0c\u4f46\u5bf9\u4e8e\u5b8f\u7684\u8bed\u6cd5\u800c\u8a00\uff0c\u5206\u53f7\u5e76\u4e0d\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002\\n\\n> The grammar of function bodies requires that some types of statements are\\n> followed by a semicolon, but the semicolon is not part of the statement for\\n> the purpose of macro syntax.\\n\\nm! \u5c06\u4f1a\u5c55\u5f00\u4e3a 0 \u6216\u591a\u4e2a\u7531 `<<` \u5206\u5272\u7684 `{ stringify!($s); 1 }`\u3002`$(...)<<*` \u90e8\u5206\u8868\u793a\u91cd\u590d\u8bed\u53e5\u4e4b\u95f4\u4f7f\u7528 `<<`\\n\u4f5c\u4e3a\u5206\u9694\u7b26\\n\\n> The macro m! expands to zero or more copies of `{ stringify!($s); 1 }`\\n> separated by the `<<` token. The `$(...)<<*` part of the rule is a repetition\\n> using `<<` as the separator.\\n\\n\u5728\u5b8f\u4e2d\u4f7f\u7528 `<<` \u4f5c\u4e3a\u5206\u9694\u7b26\u975e\u5e38\u4e0d\u5e38\u89c1\u3002\u6700\u5e38\u7528\u7684\u5206\u9694\u7b26\u662f\u9017\u53f7\uff0c`$(...),*`\uff0c\u5176\u4ed6\u7684\u5355\u4e00\u7b26\u53f7\u4e5f\u662f\u5141\u8bb8\u7684\u3002\u91cd\u8981\u7684\u662f\uff0c`macro_rules!` \u628a\u6240\u6709\u7684 Rust \u5185\u7f6e\u64cd\u4f5c\u7b26\u90fd\u5f53\u6210\u5355 token\\n> Using `<<` as a separator in a repetition in a macro is highly unusual. The\\n> most commmonly used separator is the comma, written as `$(...),*`, but any\\n> other single token is allowed here. Crucially, macro_rules! treats all\\n> built-in Rust operators as single tokens, even those that consist of multiple\\n> characters like <<.\\n\\nThe `{ stringify!($s); 1 }` is an expression whose value is always 1. The value\\nof `stringify!($s)` is discarded, so this is equivalent to the expression\\n`{ 1 }`. The reason for having `stringify!($s)` in there is to control the\\nnumber of times the repetition is repeated, which is determined by which\\nfragment variables are used within the repetition. Writing a repetition without\\nusing any fragment variables inside of it would not be legal.\\n\\nSuppose we call this macro with three of the statements shown above as input.\\n\\n```rs\\nm! {\\n    struct S { x: u64 }\\n    let mut s = S { x: 1 }\\n    s.x + 1\\n}\\n```\\n\\nThe macro expands to:\\n\\n```rs\\n{ stringify!(struct S { x: u64 }); 1 }\\n    << { stringify!(let mut s = S { x: 1 }); 1 }\\n    << { stringify!(s.x + 1); 1 }\\n```\\n\\nEach of the stringifys expands to a string literal:\\n2\\n```rs\\n{ \\"struct S { x: u64 }\\"; 1 }\\n    << { \\"let mut s = S { x: 1 }\\"; 1 }\\n    << { \\"s.x + 1\\"; 1 }\\n```\\n\\nThe values of the string literals are not used. In this case the expression is\\nequivalent to `{ 1 } << { 1 } << { 1 }`, which is equivalent to `1 << 1 << 1`.\\nThe `<<` operator is left-associative; the numeric value of this expression\\nis 4.\\n\\nAltogether, the relevant behavior of this macro is that it evaluates to\\n`1 << 1 << 1 << ...` where the number of ones is equal to the number of Rust\\nstatements in the input of the macro. In closed form, the numeric value is\\n`1 << (n - 1)` where n is the number of statements, except in the case that n is\\nzero where the macro expands to nothing and we get a syntax error at the call\\nsite.\\n\\nIt remains to determine how many statements are in the three invocations of m!\\nin the quiz code.\\n\\n1. `return || true`\\n\\nThis is a return-expression that would return the closure `|| true`. It is\\nequivalent to return `(|| true)`. It is parsed as a single statement so the m!\\ninvocation evaluates to\\n\\n2. `(return) || true`\\n\\nThis is a logical-OR expression. The `||` is a binary operator, where the\\nleft-hand side is the expression `(return)` (of diverging type `!`) and the\\nright-hand side is the expression `true`. This expression is a single statement\\nso m! again evaluates to 1.\\n\\n3. `{return} || true`\\n\\nThis one is two statements! A block-statement `{return}` followed by a closure\\nexpression `|| true`.\\n\\nThe Rust grammar distinguishes between expressions that require a semicolon in\\norder to stand alone as a statement, and expressions that can be statements even\\nwithout a semicolon. Consider two examples:\\n\\n```rs\\n// No trailing semicolon required.\\nfor t in vec {\\n    /* ... */\\n}\\n\\n// Trailing semicolon required.\\nself.skip_whitespace()?;\\n```\\n\\nThe list of expression types that stand alone without a semicolon is defined\\nhere in libsyntax. The distinction informs a few different early bail-out cases\\nwhere the parser decides to finish parsing the current expression.\\n\\nRelevant to our case is that block expressions `{ /* ... */ }` terminate an\\nexpression if doing so would be syntactically sensible. The parser does not\\neagerly consume binary operators after a block expression. Thus one might write:\\n\\n```rs\\nfn f() -> &\'static &\'static bool {\\n    // Block expression.\\n    {\\n        println!(\\"What a silly function.\\");\\n    }\\n\\n    // Reference to reference to true.\\n    &&true\\n}\\n```\\n\\nIn order to parse a block followed by a binary operator, we would need to make\\nit syntactically insensible for the parser to terminate an expression at the\\nclose curly brace. This would usually be done by wrapping in parentheses.\\n\\n```rs\\nfn f() -> bool {\\n    ({ true } && true)\\n}\\n```\\n\\nAnyhow, the output of the program is 112.\\n\\nYou have answered 2 of 33 questions correctly."}]}')}}]);