import{r as e,o,c,a as n,b as p,F as l,d as t,e as s}from"./app.b9e72009.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},r=t(`<h1 id="\u539F\u5B50\u64CD\u4F5C\u4E0E\u5185\u5B58\u987A\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u539F\u5B50\u64CD\u4F5C\u4E0E\u5185\u5B58\u987A\u5E8F" aria-hidden="true">#</a> \u539F\u5B50\u64CD\u4F5C\u4E0E\u5185\u5B58\u987A\u5E8F</h1><p>\u539F\u5B50\u64CD\u4F5C\u80FD\u591F\u7528\u6765\u5B9E\u73B0\u65E0\u{1F513}\u5E76\u53D1</p><h2 id="\u7A0B\u5E8F\u8FD0\u884C\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u7A0B\u5E8F\u8FD0\u884C\u95EE\u9898" aria-hidden="true">#</a> \u7A0B\u5E8F\u8FD0\u884C\u95EE\u9898</h2><p>\u4E0B\u9762\u5217\u4E3E\u4E86\u5F71\u54CD\u4EE3\u7801\u6267\u884C\u987A\u5E8F\u7684\u8BF8\u591A\u539F\u56E0</p><h3 id="_1-\u7F16\u8BD1\u5668\u91CD\u6392" tabindex="-1"><a class="header-anchor" href="#_1-\u7F16\u8BD1\u5668\u91CD\u6392" aria-hidden="true">#</a> 1. \u7F16\u8BD1\u5668\u91CD\u6392</h3><p>\u7F16\u8BD1\u5668\u4F1A\u5C3D\u53EF\u80FD\u4F18\u5316\u4EE3\u7801\uFF0C\u5728\u5355\u7EBF\u7A0B\u4E0B\u4E00\u822C\u4E0D\u4F1A\u51FA\u73B0\u95EE\u9898</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u4E0A\u9762\u7684\u4EE3\u7801\u53EF\u80FD\u88AB\u4F18\u5316\u4E3A\u4E0B\u9762\u7684\u6837\u5B50</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u4F46\u662F\u5728\u591A\u7EBF\u7A0B\u4E0B\u53EF\u80FD\u4F1A\u6709\u95EE\u9898</p><h3 id="_2-\u6307\u4EE4\u91CD\u6392" tabindex="-1"><a class="header-anchor" href="#_2-\u6307\u4EE4\u91CD\u6392" aria-hidden="true">#</a> 2.\u6307\u4EE4\u91CD\u6392</h3><p>\u7C7B\u4F3C\u4E8E\u4E0A\u9762\u7684\uFF0C\u4E0B\u9762\u7684\u4EE3\u7801\u4E2Dy = 200\u53EF\u80FD\u4F1A\u5148\u4E8Ex = 100\u6267\u884C\uFF0C\u6253\u5370\u51FA\u7684x\u53EF\u80FD\u662F0\u6216100 \u4F8B1:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// global variable</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// global variable</span>

    Thread<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>           Thread<span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span>
    x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4F8B2:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>\u521D\u59CB\u72B6\u6001<span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span>
\u7EBF\u7A0B<span class="token number">1</span>        \u7EBF\u7A0B<span class="token number">2</span>
y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          y <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u6BB5\u7A0B\u5E8F\u5B9E\u9645\u4E0A\u6709\u4E24\u79CD\u53EF\u80FD\u7684\u7ED3\u679C\uFF1A</p><ul><li>y = 3\uFF1A\u7EBF\u7A0B 2 \u5728\u7EBF\u7A0B 1 \u5B8C\u6210\u4E4B\u524D\u68C0\u67E5\u4E86 x \u7684\u503C</li><li>y = 6\uFF1A\u7EBF\u7A0B 2 \u5728\u7EBF\u7A0B 1 \u5B8C\u6210\u4E4B\u540E\u68C0\u67E5\u4E86 x \u7684\u503C</li><li>y = 2\uFF1A\u7EBF\u7A0B 2 \u770B\u5230\u4E86 x = 1\uFF0C\u4F46\u662F\u6CA1\u770B\u5230 y = 3\uFF0C\u63A5\u4E0B\u6765\u7528\u8BA1\u7B97\u7ED3\u679C\u8986\u76D6\u4E86 y = 3</li></ul><h3 id="_3-cpu-cache" tabindex="-1"><a class="header-anchor" href="#_3-cpu-cache" aria-hidden="true">#</a> 3. CPU Cache</h3><p>\u7531\u4E8E\u4E00\u6B21\u590D\u5236\u64CD\u4F5C\u6D89\u53CA\u5230 move(\u5185\u5B58 -&gt; \u5BC4\u5B58\u5668) add mov(\u5BC4\u5B58\u5668 -&gt; \u5185\u5B58)\u4E09\u6761\u6C47\u7F16\u6307\u4EE4\uFF0C\u5728add\u64CD\u4F5C\u5B8C\u6210\u540E\uFF0C\u6570\u636E\u8FD8\u6CA1\u6709\u88AB\u62F7\u8D1D\u5230\u5185\u5B58\u65F6\uFF0C\u53E6\u4E00\u4E2A\u7EBF\u7A0B\u53EF\u80FD\u8BFB\u53D6\u5230\u6B64\u65F6\u8FD8\u6CA1\u6709\u88AB\u4FEE\u6539\u7684\u6570\u636E\uFF0C\u6216\u8005\u662F\u4E24\u4E2A\u7EBF\u7A0B\u540C\u65F6\u4FEE\u6539\uFF0C\u7ED3\u679C\u67D0\u4E00\u4E2A\u7EBF\u7A0B\u4FEE\u6539\u7684\u7ED3\u679C\u88AB\u53E6\u4E00\u4E2A\u7EBF\u7A0B\u8986\u76D6</p><h2 id="\u672F\u8BED" tabindex="-1"><a class="header-anchor" href="#\u672F\u8BED" aria-hidden="true">#</a> \u672F\u8BED</h2><p>\u4E0B\u5217\u672F\u8BED\u5B9A\u4E49\u4E86\u591A\u7EBF\u7A0B\u548C\u5355\u7EBF\u7A0B\u4E2D\u5404\u4E2A\u53D8\u91CF\u64CD\u4F5C\u4E4B\u95F4\u7684\u5173\u7CFB \u8FD9\u4E9B\u5173\u7CFB\u53EA\u662F\u6211\u4EEC\u671F\u671B\u7684\uFF0C\u60F3\u8981\u786E\u4FDD\u4E0B\u9762\u7684\u5173\u7CFB\u5728\u6D3B\u52A8\u4E2D\u662F\u6B63\u5E38\u7684\uFF0C\u5C31\u9700\u8981\u5185\u5B58\u987A\u5E8F\u4E86</p><h3 id="_1-happens-before" tabindex="-1"><a class="header-anchor" href="#_1-happens-before" aria-hidden="true">#</a> <strong>1. happens-before</strong></h3><p>\u5148\u4E8E\uFF0C\u6216\u8005\u8BF4B\u80FD\u770B\u5230A\u64CD\u4F5C\u7684\u7ED3\u679C\uFF0CAB\u5206\u522B\u5728\u4E24\u4E2A\u7EBF\u7A0B\u91CC</p><h3 id="_2-sequenced-before" tabindex="-1"><a class="header-anchor" href="#_2-sequenced-before" aria-hidden="true">#</a> 2. sequenced-before</h3><p>\u540C\u4E0AA,B\u5728\u4E00\u4E2A\u7EBF\u7A0B\u5185</p><h3 id="_3-synchronized-with" tabindex="-1"><a class="header-anchor" href="#_3-synchronized-with" aria-hidden="true">#</a> <strong>3. synchronized-with</strong></h3><p>x\u662F\u652F\u6301\u539F\u5B50\u64CD\u4F5C\u7684\u53D8\u91CF A\u5199\u5165(store)x\uFF0CB\u8BFB\u53D6(load)x\uFF0C\u5206\u522B\u5728\u4E24\u4E2A\u7EBF\u7A0B\u5185\uFF0C\u5219A((store)\u5C31\u662Fsynchornized-with B(load)\u7684</p><h3 id="_4-inter-thread" tabindex="-1"><a class="header-anchor" href="#_4-inter-thread" aria-hidden="true">#</a> 4. inter-thread</h3><p>\u8DE8\u7EBF\u7A0B \u7B2C\u4E09\u70B9\u8BF4\u5230 A\uFF1Astore synchornized-with B: load \u90A3\u4E48A happens-before B \u591A\u7EBF\u7A0B\u4E2D\u5199\u5165\u5148\u4E8E\u8BFB\u53D6</p><h2 id="\u5185\u5B58\u987A\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u5185\u5B58\u987A\u5E8F" aria-hidden="true">#</a> \u5185\u5B58\u987A\u5E8F</h2><h3 id="_1-relaxed" tabindex="-1"><a class="header-anchor" href="#_1-relaxed" aria-hidden="true">#</a> 1. Relaxed</h3><p>\u53EA\u4FDD\u8BC1\u5728\u540C\u4E00\u4E2A\u7EBF\u7A0B\u4E2D\u6EE1\u8DB3Happens-before\uFF0C\u8FD9\u662F\u6700\u5BBD\u677E\u7684\u89C4\u5219\uFF0C\u4ED6\u5BF9\u7F16\u8BD1\u5668\u548CCPU\u4E0D\u505A\u4EFB\u4F55\u9650\u5236\uFF0C\u53EF\u4EE5\u4E71\u9700\uFF0C\u56E0\u6B64\u4E0B\u9762\u7684\u4F8B\u5B50\u4E0D\u4FDD\u8BC1\u4F1A\u6210\u529F</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">to_relaxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicUsize</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> _ <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">leak</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicUsize</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BFB\u53D6x\u5B58\u5230y\u91CC</span>
        <span class="token keyword">let</span> r1 <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r1
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8BFB\u53D6y\u5B58\u5230x\u91CC</span>
        <span class="token keyword">let</span> r2 <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4E0B\u9762\u4E24\u884C\u53EF\u80FD\u4F1A\u88AB\u91CD\u6392</span>
        y<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r2
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> r1 <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> r2 <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u53EF\u80FD\u51FA\u73B0 r1 == r2 == 42</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_2-acquire-release" tabindex="-1"><a class="header-anchor" href="#_2-acquire-release" aria-hidden="true">#</a> 2. Acquire-Release</h3><p><strong>Release \u91CA\u653E</strong> \uFF0C\u8BBE\u5B9A\u5185\u5B58\u5C4F\u969C(Memory barrier)\uFF0C\u4FDD\u8BC1\u5B83\u4E4B\u524D\u7684\u64CD\u4F5C\u6C38\u8FDC\u5728\u5B83\u4E4B\u524D\uFF0C\u4F46\u662F\u5B83\u540E\u9762\u7684\u64CD\u4F5C\u53EF\u80FD\u88AB\u91CD\u6392\u5230\u5B83\u524D\u9762 <strong>Acquire \u83B7\u53D6</strong> , \u8BBE\u5B9A\u5185\u5B58\u5C4F\u969C\uFF0C\u4FDD\u8BC1\u5728\u5B83\u4E4B\u540E\u7684\u8BBF\u95EE\u6C38\u8FDC\u5728\u5B83\u4E4B\u540E\uFF0C\u4F46\u662F\u5B83\u4E4B\u524D\u7684\u64CD\u4F5C\u5374\u6709\u53EF\u80FD\u88AB\u91CD\u6392\u5230\u5B83\u540E\u9762\uFF0C\u5F80\u5F80\u548C <code>Release</code>\u5728\u4E0D\u540C\u7EBF\u7A0B\u4E2D\u8054\u5408\u4F7F\u7528 <strong>AcqRel</strong>: Acquire\u548CRelease\u7684\u7ED3\u5408\uFF0C\u540C\u65F6\u62E5\u6709\u5B83\u4EEC\u4FE9\u63D0\u4F9B\u7684\u4FDD\u8BC1\u3002\u6BD4\u5982\u4F60\u8981\u5BF9\u4E00\u4E2A atomic \u81EA\u589E 1\uFF0C\u540C\u65F6\u5E0C\u671B\u8BE5\u64CD\u4F5C\u4E4B\u524D\u548C\u4E4B\u540E\u7684\u8BFB\u53D6\u6216\u5199\u5165\u64CD\u4F5C\u4E0D\u4F1A\u88AB\u91CD\u65B0\u6392\u5E8F</p><p>\u8FD9\u4E24\u4E2A\u64CD\u4F5C\u901A\u5E38\u6210\u5BF9\u4F7F\u7528\uFF0C\u5BF9store\u4F7F\u7528Release\uFF0C\u5BF9load\u4F7F\u7528Acquire \u5148\u540E\u987A\u5E8F\u5177\u4F53\u770B\u4E0B\u9762\u7684\u4EE3\u7801</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">write_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">write_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_3-sequence" tabindex="-1"><a class="header-anchor" href="#_3-sequence" aria-hidden="true">#</a> 3. Sequence</h3><p>\u987A\u5E8F\u4E00\u81F4\u6027\uFF0C\u5F3A\u5236\u6240\u6709\u7EBF\u7A0B\u770B\u5230\u4E00\u81F4\u7684\u539F\u5B50\u64CD\u4F5C\uFF0C\u5B8C\u5168\u7684\u5206\u754C\u70B9\uFF0CSeqCst\u5C31\u50CF\u662FAcqRel\u7684\u52A0\u5F3A\u7248\uFF0C\u5B83\u4E0D\u7BA1\u539F\u5B50\u64CD\u4F5C\u662F\u5C5E\u4E8E\u8BFB\u53D6\u8FD8\u662F\u5199\u5165\u7684\u64CD\u4F5C\uFF0C\u53EA\u8981\u67D0\u4E2A\u7EBF\u7A0B\u6709\u7528\u5230SeqCst\u7684\u539F\u5B50\u64CD\u4F5C\uFF0C\u7EBF\u7A0B\u4E2D\u8BE5SeqCst\u64CD\u4F5C\u524D\u7684\u6570\u636E\u64CD\u4F5C\u7EDD\u5BF9\u4E0D\u4F1A\u88AB\u91CD\u65B0\u6392\u5728\u8BE5SeqCst\u64CD\u4F5C\u4E4B\u540E\uFF0C\u4E14\u8BE5SeqCst\u64CD\u4F5C\u540E\u7684\u6570\u636E\u64CD\u4F5C\u4E5F\u7EDD\u5BF9\u4E0D\u4F1A\u88AB\u91CD\u65B0\u6392\u5728SeqCst\u64CD\u4F5C\u524D\u3002 \u4E0B\u9762\u7684\u4F8B\u5B50\uFF0C\u53EA\u6709\u4F7F\u7528 SeqCst ordering\uFF0C\u624D\u80FD\u4FDD\u8BC1 Z \u6700\u540E\u7684\u503C\u4E0D\u4E3A 0</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">write_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">write_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 3</span>
        <span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 4</span>
        <span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">write_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">write_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t3 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">read_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t4 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="_4-fence" tabindex="-1"><a class="header-anchor" href="#_4-fence" aria-hidden="true">#</a> 4. Fence</h3><p>fence\u662F\u652F\u6301synchornized-with\u7684\u53E6\u4E00\u79CD\u65B9\u5F0F, \u53EF\u4EE5\u548CAcquire-Release\u5BF9\u6BD4\u4E00\u4E0B</p><p>\u4F8B1\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                                 <span class="token comment">// A</span>
        <span class="token punctuation">}</span>
        <span class="token constant">READY</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// B: \u5185\u5B58\u5C4F\u969C \u2191</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token operator">!</span><span class="token constant">READY</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token comment">// C: \u5185\u5B58\u5C4F\u969C \u2193</span>

        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token constant">DATA</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// D</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u4F8B2\uFF1A</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">write_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token function">fence</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Release</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 2</span>
    <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 4</span>
    <span class="token function">fence</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5</span>
    <span class="token keyword">if</span> <span class="token class-name">X</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 6</span>
        <span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">write_x_then_y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token function">read_y_then_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token class-name">Z</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">SeqCst</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,46),k={href:"https://doc.rust-lang.org/std/sync/atomic/fn.fence.html",target:"_blank",rel:"noopener noreferrer"},m=s("fence\u7684\u5B98\u65B9\u6587\u6863"),b=s(" An atomic fence. Depending on the specified order, a fence prevents the compiler and CPU from reordering certain types of memory operations around it. That creates synchronizes-with relationships between it and atomic operations or fences in other threads."),d=t(`<p>A fence \u2018A\u2019 which has (at least) Release ordering semantics, synchronizes with a fence \u2018B\u2019 with (at least) Acquire semantics, if and only if there exist operations X and Y, both operating on some atomic object \u2018M\u2019 such that A is sequenced before X, Y is synchronized before B and Y observes the change to M. This provides a happens-before dependence between A and B.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    Thread 1                                          Thread 2

fence(Release);      A --------------
x.store(3, Relaxed); X ---------    |
                               |    |
                               |    |
                               -------------&gt; Y  if x.load(Relaxed) == 3 {
                                    |-------&gt; B      fence(Acquire);
                                                     ...
                                                 }
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="\u5176\u4ED6" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6" aria-hidden="true">#</a> \u5176\u4ED6</h2><h3 id="_1-tips" tabindex="-1"><a class="header-anchor" href="#_1-tips" aria-hidden="true">#</a> 1. Tips</h3>`,4),h=n("li",null,"\u4E0D\u77E5\u9053\u600E\u4E48\u9009\u62E9\u65F6\uFF0C\u4F18\u5148\u4F7F\u7528SeqCst\uFF0C\u867D\u7136\u4F1A\u7A0D\u5FAE\u51CF\u6162\u901F\u5EA6\uFF0C\u4F46\u662F\u6162\u4E00\u70B9\u4E5F\u6BD4\u51FA\u73B0\u9519\u8BEF\u597D",-1),f=s("\u591A\u7EBF\u7A0B\u53EA\u8BA1\u6570fetch_add\u800C\u4E0D\u4F7F\u7528\u8BE5\u503C\u89E6\u53D1\u5176\u4ED6\u903B\u8F91\u5206\u652F\u7684\u7B80\u5355\u4F7F\u7528\u573A\u666F\uFF0C\u53EF\u4EE5\u4F7F\u7528Relaxed \u53C2\u8003 "),_={href:"https://stackoverflow.com/questions/30407121/which-stdsyncatomicordering-to-use",target:"_blank",rel:"noopener noreferrer"},y=s("Which std::sync::atomic::Ordering to use?"),w=n("li",null,"\u5728\u591A\u7EBF\u7A0B\u73AF\u5883\u4E2D\u8981\u4F7F\u7528Atomic\u9700\u8981\u914D\u5408Arc",-1),g=t('<h3 id="_2-atomic\u80FD\u66FF\u4EE3\u9501\u5417" tabindex="-1"><a class="header-anchor" href="#_2-atomic\u80FD\u66FF\u4EE3\u9501\u5417" aria-hidden="true">#</a> 2. Atomic\u80FD\u66FF\u4EE3\u9501\u5417?</h3><p>\u90A3\u4E48\u539F\u5B50\u7C7B\u578B\u65E2\u7136\u8FD9\u4E48\u5168\u80FD\uFF0C\u5B83\u53EF\u4EE5\u66FF\u4EE3\u9501\u5417\uFF1F\u7B54\u6848\u662F\u4E0D\u884C\uFF1A</p><ul><li>\u5BF9\u4E8E\u590D\u6742\u7684\u573A\u666F\u4E0B\uFF0C\u9501\u7684\u4F7F\u7528\u7B80\u5355\u7C97\u66B4\uFF0C\u4E0D\u5BB9\u6613\u6709\u5751</li><li>std::sync::atomic\u5305\u4E2D\u4EC5\u63D0\u4F9B\u4E86\u6570\u503C\u7C7B\u578B\u7684\u539F\u5B50\u64CD\u4F5C\uFF1AAtomicBool, AtomicIsize, AtomicUsize, AtomicI8, AtomicU16\u7B49\uFF0C\u800C\u9501\u53EF\u4EE5\u5E94\u7528\u4E8E\u5404\u79CD\u7C7B\u578B</li><li>\u5728\u6709\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u5FC5\u987B\u4F7F\u7528\u9501\u6765\u914D\u5408\uFF0C\u4F8B\u5982\u4E0A\u4E00\u7AE0\u8282\u4E2D\u4F7F\u7528Mutex\u914D\u5408Condvar</li></ul><h3 id="_3-atomic\u7684\u5E94\u7528\u573A\u666F" tabindex="-1"><a class="header-anchor" href="#_3-atomic\u7684\u5E94\u7528\u573A\u666F" aria-hidden="true">#</a> 3. Atomic\u7684\u5E94\u7528\u573A\u666F</h3><p>\u4E8B\u5B9E\u4E0A\uFF0CAtomic\u867D\u7136\u5BF9\u4E8E\u7528\u6237\u4E0D\u592A\u5E38\u7528\uFF0C\u4F46\u662F\u5BF9\u4E8E\u9AD8\u6027\u80FD\u5E93\u7684\u5F00\u53D1\u8005\u3001\u6807\u51C6\u5E93\u5F00\u53D1\u8005\u90FD\u975E\u5E38\u5E38\u7528\uFF0C\u5B83\u662F\u5E76\u53D1\u539F\u8BED\u7684\u57FA\u77F3\uFF0C\u9664\u6B64\u4E4B\u5916\uFF0C\u8FD8\u6709\u4E00\u4E9B\u573A\u666F\u9002\u7528\uFF1A</p><ul><li>\u65E0\u9501(lock free)\u6570\u636E\u7ED3\u6784</li><li>\u5168\u5C40\u53D8\u91CF\uFF0C\u4F8B\u5982\u5168\u5C40\u81EA\u589EID, \u5728\u540E\u7EED\u7AE0\u8282\u4F1A\u4ECB\u7ECD</li><li>\u8DE8\u7EBF\u7A0B\u8BA1\u6570\u5668\uFF0C\u4F8B\u5982\u53EF\u4EE5\u7528\u4E8E\u7EDF\u8BA1\u6307\u6807</li></ul><h2 id="\u5F15\u7528" tabindex="-1"><a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a> \u5F15\u7528</h2>',7),x={href:"https://www.jianshu.com/p/511cde6b62a6",target:"_blank",rel:"noopener noreferrer"},v=s("Rust \u5E76\u53D1\u7F16\u7A0B - Memory Ordering (siddontang )"),q={href:"https://www.zhihu.com/question/24301047",target:"_blank",rel:"noopener noreferrer"},A=s("\u77E5\u4E4E"),O={href:"http://senlinzhan.github.io/2017/12/04/cpp-memory-order/",target:"_blank",rel:"noopener noreferrer"},R=s("\u7406\u89E3 C++ \u7684 Memory Order (Senlin's Blog)"),C={href:"https://skyao.io/learning-rust/std/sync/atomic-type.html",target:"_blank",rel:"noopener noreferrer"},S=s("Rust\u5B66\u4E60\u7B14\u8BB0"),B={href:"https://course.rs/advance/concurrency-with-threads/sync2.html",target:"_blank",rel:"noopener noreferrer"},j=s("rust\u8BED\u8A00\u5723\u7ECF"),z={href:"https://learnku.com/docs/nomicon/2018/83-atomic-operation/4742",target:"_blank",rel:"noopener noreferrer"},Y=s("Rust \u9AD8\u7EA7\u7F16\u7A0B");function T(X,Z){const a=e("ExternalLinkIcon");return o(),c(l,null,[r,n("p",null,[n("a",k,[m,p(a)]),b]),d,n("ul",null,[h,n("li",null,[f,n("a",_,[y,p(a)])]),w]),g,n("ul",null,[n("li",null,[n("a",x,[v,p(a)])]),n("li",null,[n("a",q,[A,p(a)])]),n("li",null,[n("a",O,[R,p(a)])]),n("li",null,[n("a",C,[S,p(a)])]),n("li",null,[n("a",B,[j,p(a)])]),n("li",null,[n("a",z,[Y,p(a)])])])],64)}var M=u(i,[["render",T]]);export{M as default};
